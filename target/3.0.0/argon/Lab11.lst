
c:/Users/USER/Desktop/Lab11/target/3.0.0/argon/Lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000046a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d86c0  000d86c0  000086c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d86c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e524  000d86cc  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000260  2003e590  2003e590  0002e590  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d8738  000d8738  00028738  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8760  000d8760  00028760  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001c2f7d  00000000  00000000  00028764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001afa4  00000000  00000000  001eb6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003a6c2  00000000  00000000  00206685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003118  00000000  00000000  00240d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a078  00000000  00000000  00243e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d040  00000000  00000000  0024ded7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004589e  00000000  00000000  0028af17  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012ad0d  00000000  00000000  002d07b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008c80  00000000  00000000  003fb4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fd8f 	bl	d7b50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fd97 	bl	d7b6c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e524 	.word	0x2003e524
   d4048:	000d86cc 	.word	0x000d86cc
   d404c:	2003e590 	.word	0x2003e590
   d4050:	2003e590 	.word	0x2003e590
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 ff61 	bl	d5f24 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8690 	.word	0x000d8690
   d407c:	000d86b4 	.word	0x000d86b4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 bdf8 	b.w	d4c74 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd57 	bl	d4b38 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bf0b 	b.w	d5ea8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bb29 	b.w	d56e8 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bb27 	b.w	d56e8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bb2d 	b.w	d56f8 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fa72 	bl	d5590 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d52e1 	.word	0x000d52e1

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c4:	4770      	bx	lr

000d40c6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40c6:	b510      	push	{r4, lr}
  }
   d40c8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40ca:	4604      	mov	r4, r0
  }
   d40cc:	f002 fe03 	bl	d6cd6 <_ZdlPvj>
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40d8:	4608      	mov	r0, r1
   d40da:	9101      	str	r1, [sp, #4]
   d40dc:	f003 fd84 	bl	d7be8 <strlen>
    if (len + l > buff_size)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40e4:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40e6:	18e8      	adds	r0, r5, r3
   d40e8:	4290      	cmp	r0, r2
   d40ea:	d808      	bhi.n	d40fe <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40ec:	6820      	ldr	r0, [r4, #0]
   d40ee:	9901      	ldr	r1, [sp, #4]
   d40f0:	462a      	mov	r2, r5
   d40f2:	4418      	add	r0, r3
   d40f4:	f003 fd2c 	bl	d7b50 <memcpy>
    len += l;
   d40f8:	6860      	ldr	r0, [r4, #4]
   d40fa:	4428      	add	r0, r5
   d40fc:	6060      	str	r0, [r4, #4]
}
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4104:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4106:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4108:	4b0a      	ldr	r3, [pc, #40]	; (d4134 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d410a:	6003      	str	r3, [r0, #0]
   d410c:	4605      	mov	r5, r0
   d410e:	b17c      	cbz	r4, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4110:	6863      	ldr	r3, [r4, #4]
   d4112:	3b01      	subs	r3, #1
   d4114:	6063      	str	r3, [r4, #4]
   d4116:	b95b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	4620      	mov	r0, r4
   d411c:	689b      	ldr	r3, [r3, #8]
   d411e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4120:	68a3      	ldr	r3, [r4, #8]
   d4122:	3b01      	subs	r3, #1
   d4124:	60a3      	str	r3, [r4, #8]
   d4126:	b91b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	68db      	ldr	r3, [r3, #12]
   d412e:	4798      	blx	r3
   d4130:	4628      	mov	r0, r5
   d4132:	bd38      	pop	{r3, r4, r5, pc}
   d4134:	000d83dc 	.word	0x000d83dc

000d4138 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4138:	b40e      	push	{r1, r2, r3}
   d413a:	b503      	push	{r0, r1, lr}
   d413c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4140:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4144:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4146:	f001 fe06 	bl	d5d56 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d414a:	b002      	add	sp, #8
   d414c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4150:	b003      	add	sp, #12
   d4152:	4770      	bx	lr

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f001 bdb9 	b.w	d5ce0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd8 	bl	d4138 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d7d4d 	.word	0x000d7d4d
   d4194:	000d7da3 	.word	0x000d7da3
   d4198:	000d7d49 	.word	0x000d7d49
   d419c:	000d7d45 	.word	0x000d7d45
   d41a0:	000d7d63 	.word	0x000d7d63
   d41a4:	000d7d3c 	.word	0x000d7d3c

000d41a8 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41a8:	b40e      	push	{r1, r2, r3}
   d41aa:	b503      	push	{r0, r1, lr}
   d41ac:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d41ae:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41b0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41b4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d41b6:	f001 fdce 	bl	d5d56 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41ba:	b002      	add	sp, #8
   d41bc:	f85d eb04 	ldr.w	lr, [sp], #4
   d41c0:	b003      	add	sp, #12
   d41c2:	4770      	bx	lr

000d41c4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d41c4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41c6:	f001 f893 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41ca:	4b03      	ldr	r3, [pc, #12]	; (d41d8 <_ZN10CloudClass7processEv+0x14>)
   d41cc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d41ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d41d2:	f001 ba79 	b.w	d56c8 <spark_process>
   d41d6:	bf00      	nop
   d41d8:	2003e7d4 	.word	0x2003e7d4

000d41dc <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41dc:	6803      	ldr	r3, [r0, #0]
   d41de:	b12b      	cbz	r3, d41ec <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d41e0:	6842      	ldr	r2, [r0, #4]
   d41e2:	4293      	cmp	r3, r2
   d41e4:	d202      	bcs.n	d41ec <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d41e6:	4618      	mov	r0, r3
   d41e8:	f003 bc9c 	b.w	d7b24 <atoi>
   d41ec:	2000      	movs	r0, #0
   d41ee:	4770      	bx	lr

000d41f0 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d41f0:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41f2:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d41f4:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41f6:	b145      	cbz	r5, d420a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d41f8:	6843      	ldr	r3, [r0, #4]
   d41fa:	429d      	cmp	r5, r3
   d41fc:	d205      	bcs.n	d420a <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d41fe:	4628      	mov	r0, r5
   d4200:	f003 fcf2 	bl	d7be8 <strlen>
   d4204:	3001      	adds	r0, #1
   d4206:	4405      	add	r5, r0
   d4208:	6025      	str	r5, [r4, #0]
        }
   d420a:	4620      	mov	r0, r4
   d420c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4210 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4210:	b538      	push	{r3, r4, r5, lr}
   d4212:	4604      	mov	r4, r0
   d4214:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4216:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d421a:	6825      	ldr	r5, [r4, #0]
   d421c:	4a04      	ldr	r2, [pc, #16]	; (d4230 <_ZN10BlynkParam3addEi+0x20>)
   d421e:	1a09      	subs	r1, r1, r0
   d4220:	4428      	add	r0, r5
   d4222:	f001 fa79 	bl	d5718 <snprintf>
   d4226:	6863      	ldr	r3, [r4, #4]
   d4228:	3001      	adds	r0, #1
   d422a:	4403      	add	r3, r0
   d422c:	6063      	str	r3, [r4, #4]
    }
   d422e:	bd38      	pop	{r3, r4, r5, pc}
   d4230:	000d7d80 	.word	0x000d7d80

000d4234 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4234:	b538      	push	{r3, r4, r5, lr}
   d4236:	4604      	mov	r4, r0
   d4238:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d423a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d423e:	6825      	ldr	r5, [r4, #0]
   d4240:	4a04      	ldr	r2, [pc, #16]	; (d4254 <_ZN10BlynkParam3addEl+0x20>)
   d4242:	1a09      	subs	r1, r1, r0
   d4244:	4428      	add	r0, r5
   d4246:	f001 fa67 	bl	d5718 <snprintf>
   d424a:	6863      	ldr	r3, [r4, #4]
   d424c:	3001      	adds	r0, #1
   d424e:	4403      	add	r3, r0
   d4250:	6063      	str	r3, [r4, #4]
    }
   d4252:	bd38      	pop	{r3, r4, r5, pc}
   d4254:	000d7d83 	.word	0x000d7d83

000d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4258:	b508      	push	{r3, lr}
        state = CONNECTING;
   d425a:	2300      	movs	r3, #0
   d425c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d425e:	6800      	ldr	r0, [r0, #0]
   d4260:	f002 fa72 	bl	d6748 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d4268:	f000 bfc4 	b.w	d51f4 <BlynkNoOpCbk>

000d426c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d4270:	eb01 0902 	add.w	r9, r1, r2
   d4274:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4276:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4278:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d427c:	4680      	mov	r8, r0
   d427e:	460d      	mov	r5, r1
   d4280:	4616      	mov	r6, r2
    if (it >= param.end())
   d4282:	f080 8092 	bcs.w	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4286:	a805      	add	r0, sp, #20
   d4288:	880f      	ldrh	r7, [r1, #0]
   d428a:	f7ff ffb1 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d428e:	6803      	ldr	r3, [r0, #0]
   d4290:	4599      	cmp	r9, r3
   d4292:	f240 808a 	bls.w	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4296:	a805      	add	r0, sp, #20
   d4298:	f7ff ffa0 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d429c:	f247 2376 	movw	r3, #29302	; 0x7276
   d42a0:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42a2:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d42a4:	f000 80a9 	beq.w	d43fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d42a8:	d827      	bhi.n	d42fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d42aa:	f247 2361 	movw	r3, #29281	; 0x7261
   d42ae:	429f      	cmp	r7, r3
   d42b0:	d07e      	beq.n	d43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d42b2:	f247 2364 	movw	r3, #29284	; 0x7264
   d42b6:	429f      	cmp	r7, r3
   d42b8:	d042      	beq.n	d4340 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d42ba:	f646 5370 	movw	r3, #28016	; 0x6d70
   d42be:	429f      	cmp	r7, r3
   d42c0:	d128      	bne.n	d4314 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d42c2:	4e63      	ldr	r6, [pc, #396]	; (d4450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42c4:	4f63      	ldr	r7, [pc, #396]	; (d4454 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d42c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d42ca:	9b05      	ldr	r3, [sp, #20]
   d42cc:	4599      	cmp	r9, r3
   d42ce:	d96c      	bls.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42d0:	a805      	add	r0, sp, #20
   d42d2:	f7ff ff83 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d42d6:	b2c4      	uxtb	r4, r0
            ++it;
   d42d8:	a805      	add	r0, sp, #20
   d42da:	f7ff ff89 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d42de:	9d05      	ldr	r5, [sp, #20]
   d42e0:	4631      	mov	r1, r6
   d42e2:	4628      	mov	r0, r5
   d42e4:	f003 fc6e 	bl	d7bc4 <strcmp>
   d42e8:	4601      	mov	r1, r0
   d42ea:	b9e0      	cbnz	r0, d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d42ec:	4620      	mov	r0, r4
   d42ee:	f002 fc33 	bl	d6b58 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d42f2:	a805      	add	r0, sp, #20
   d42f4:	f7ff ff7c 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d42f8:	e7e7      	b.n	d42ca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d42fa:	f247 7364 	movw	r3, #30564	; 0x7764
   d42fe:	429f      	cmp	r7, r3
   d4300:	d03f      	beq.n	d4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d4302:	f247 7376 	movw	r3, #30582	; 0x7776
   d4306:	429f      	cmp	r7, r3
   d4308:	f000 8087 	beq.w	d441a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d430c:	f247 7361 	movw	r3, #30561	; 0x7761
   d4310:	429f      	cmp	r7, r3
   d4312:	d05f      	beq.n	d43d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4314:	2300      	movs	r3, #0
   d4316:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d431a:	2202      	movs	r2, #2
   d431c:	9200      	str	r2, [sp, #0]
   d431e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4322:	4619      	mov	r1, r3
   d4324:	e029      	b.n	d437a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4326:	4639      	mov	r1, r7
   d4328:	4628      	mov	r0, r5
   d432a:	f003 fc4b 	bl	d7bc4 <strcmp>
   d432e:	b128      	cbz	r0, d433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4330:	4641      	mov	r1, r8
   d4332:	4628      	mov	r0, r5
   d4334:	f003 fc46 	bl	d7bc4 <strcmp>
   d4338:	2800      	cmp	r0, #0
   d433a:	d1da      	bne.n	d42f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d433c:	2101      	movs	r1, #1
   d433e:	e7d5      	b.n	d42ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4340:	ab0a      	add	r3, sp, #40	; 0x28
   d4342:	4945      	ldr	r1, [pc, #276]	; (d4458 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d4344:	9307      	str	r3, [sp, #28]
   d4346:	a807      	add	r0, sp, #28
   d4348:	2310      	movs	r3, #16
   d434a:	2500      	movs	r5, #0
   d434c:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4350:	f7ff fec0 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4354:	a807      	add	r0, sp, #28
   d4356:	4621      	mov	r1, r4
   d4358:	f7ff ff5a 	bl	d4210 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d435c:	4620      	mov	r0, r4
   d435e:	f002 fc25 	bl	d6bac <digitalRead>
        rsp.add(analogRead(pin));
   d4362:	4601      	mov	r1, r0
   d4364:	a807      	add	r0, sp, #28
   d4366:	f7ff ff65 	bl	d4234 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d436a:	9b08      	ldr	r3, [sp, #32]
   d436c:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4370:	3b01      	subs	r3, #1
   d4372:	9300      	str	r3, [sp, #0]
   d4374:	9b07      	ldr	r3, [sp, #28]
   d4376:	462a      	mov	r2, r5
   d4378:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d437a:	4640      	mov	r0, r8
   d437c:	f000 fae0 	bl	d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4380:	e013      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d4382:	a805      	add	r0, sp, #20
   d4384:	f7ff ff34 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	4599      	cmp	r9, r3
   d438c:	d90d      	bls.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d438e:	b2a4      	uxth	r4, r4
   d4390:	2101      	movs	r1, #1
   d4392:	4620      	mov	r0, r4
   d4394:	f002 fbe0 	bl	d6b58 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4398:	a805      	add	r0, sp, #20
   d439a:	f7ff ff1f 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d439e:	1e01      	subs	r1, r0, #0
   d43a0:	bf18      	it	ne
   d43a2:	2101      	movne	r1, #1
   d43a4:	4620      	mov	r0, r4
   d43a6:	f002 fbe8 	bl	d6b7a <digitalWrite>
    }
}
   d43aa:	b00f      	add	sp, #60	; 0x3c
   d43ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43b0:	ab0a      	add	r3, sp, #40	; 0x28
   d43b2:	9307      	str	r3, [sp, #28]
   d43b4:	a807      	add	r0, sp, #28
   d43b6:	2310      	movs	r3, #16
   d43b8:	4928      	ldr	r1, [pc, #160]	; (d445c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d43ba:	2500      	movs	r5, #0
   d43bc:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43c0:	f7ff fe88 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d43c4:	a807      	add	r0, sp, #28
   d43c6:	4621      	mov	r1, r4
   d43c8:	f7ff ff22 	bl	d4210 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d43cc:	4620      	mov	r0, r4
   d43ce:	f002 fc00 	bl	d6bd2 <analogRead>
   d43d2:	e7c6      	b.n	d4362 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d43d4:	a805      	add	r0, sp, #20
   d43d6:	f7ff ff0b 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d43da:	6803      	ldr	r3, [r0, #0]
   d43dc:	4599      	cmp	r9, r3
   d43de:	d9e4      	bls.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d43e0:	b2a4      	uxth	r4, r4
   d43e2:	2101      	movs	r1, #1
   d43e4:	4620      	mov	r0, r4
   d43e6:	f002 fbb7 	bl	d6b58 <pinMode>
        analogWrite(pin, it.asInt());
   d43ea:	a805      	add	r0, sp, #20
   d43ec:	f7ff fef6 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d43f0:	4601      	mov	r1, r0
   d43f2:	4620      	mov	r0, r4
   d43f4:	f002 fc04 	bl	d6c00 <_Z11analogWritetm>
    } break;
   d43f8:	e7d7      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d43fa:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d43fc:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4400:	f000 fefa 	bl	d51f8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4404:	4603      	mov	r3, r0
            handler(req);
   d4406:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4408:	b123      	cbz	r3, d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d440a:	4a15      	ldr	r2, [pc, #84]	; (d4460 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d440c:	4293      	cmp	r3, r2
   d440e:	d001      	beq.n	d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4410:	4798      	blx	r3
   d4412:	e7ca      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d4414:	f000 feec 	bl	d51f0 <BlynkWidgetRead>
        }
    }
   d4418:	e7c7      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d441a:	a805      	add	r0, sp, #20
   d441c:	f7ff fee8 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4420:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d4422:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d4426:	1b5d      	subs	r5, r3, r5
   d4428:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d442a:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d442c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4430:	950c      	str	r5, [sp, #48]	; 0x30
   d4432:	f000 feeb 	bl	d520c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4436:	4603      	mov	r3, r0
            handler(req, param);
   d4438:	a90a      	add	r1, sp, #40	; 0x28
   d443a:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d443c:	b123      	cbz	r3, d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d443e:	4a09      	ldr	r2, [pc, #36]	; (d4464 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4440:	4293      	cmp	r3, r2
   d4442:	d001      	beq.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d4444:	4798      	blx	r3
   d4446:	e7b0      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d4448:	f000 fed3 	bl	d51f2 <BlynkWidgetWrite>
    } break;
   d444c:	e7ad      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d444e:	bf00      	nop
   d4450:	000d7d87 	.word	0x000d7d87
   d4454:	000d7d8a 	.word	0x000d7d8a
   d4458:	000d7d92 	.word	0x000d7d92
   d445c:	000d7d95 	.word	0x000d7d95
   d4460:	000d51f1 	.word	0x000d51f1
   d4464:	000d51f3 	.word	0x000d51f3
   d4468:	000d7d8e 	.word	0x000d7d8e

000d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4470:	b08c      	sub	sp, #48	; 0x30
   d4472:	af04      	add	r7, sp, #16
   d4474:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4476:	2205      	movs	r2, #5
   d4478:	6800      	ldr	r0, [r0, #0]
   d447a:	1d39      	adds	r1, r7, #4
   d447c:	f001 fcb1 	bl	d5de2 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4480:	b3b8      	cbz	r0, d44f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4482:	2805      	cmp	r0, #5
   d4484:	d004      	beq.n	d4490 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d4486:	2000      	movs	r0, #0
}
   d4488:	3720      	adds	r7, #32
   d448a:	46bd      	mov	sp, r7
   d448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4490:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4494:	0a13      	lsrs	r3, r2, #8
   d4496:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d449a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d449e:	f8a7 3005 	strh.w	r3, [r7, #5]
   d44a2:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d44a4:	0a13      	lsrs	r3, r2, #8
   d44a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44aa:	fa1f f883 	uxth.w	r8, r3
   d44ae:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d44b2:	2900      	cmp	r1, #0
   d44b4:	d0e7      	beq.n	d4486 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d44b6:	793b      	ldrb	r3, [r7, #4]
   d44b8:	bb23      	cbnz	r3, d4504 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d44ba:	f000 fe97 	bl	d51ec <_Z11BlynkMillisv>
   d44be:	4602      	mov	r2, r0
   d44c0:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44c2:	7f60      	ldrb	r0, [r4, #29]
   d44c4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44c8:	b9c0      	cbnz	r0, d44fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d44ca:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d44ce:	2901      	cmp	r1, #1
   d44d0:	d114      	bne.n	d44fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d44d2:	2b09      	cmp	r3, #9
   d44d4:	d00f      	beq.n	d44f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d44d6:	2bc8      	cmp	r3, #200	; 0xc8
   d44d8:	d001      	beq.n	d44de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d44da:	2b04      	cmp	r3, #4
   d44dc:	d1d4      	bne.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d44de:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d44e0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d44e2:	4620      	mov	r0, r4
                state = CONNECTED;
   d44e4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d44e6:	f000 fad9 	bl	d4a9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d44ea:	f7ff fe6b 	bl	d41c4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d44ee:	f000 fe81 	bl	d51f4 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d44f2:	2001      	movs	r0, #1
   d44f4:	e7c8      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d44f6:	2303      	movs	r3, #3
   d44f8:	7763      	strb	r3, [r4, #29]
                break;
   d44fa:	e7c5      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d44fc:	1f58      	subs	r0, r3, #5
   d44fe:	bf18      	it	ne
   d4500:	2001      	movne	r0, #1
   d4502:	e7c1      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4504:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4508:	d903      	bls.n	d4512 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d450a:	4620      	mov	r0, r4
   d450c:	f7ff fea4 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4510:	e7ef      	b.n	d44f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4512:	f108 0308 	add.w	r3, r8, #8
   d4516:	f023 0307 	bic.w	r3, r3, #7
   d451a:	466e      	mov	r6, sp
   d451c:	ebad 0d03 	sub.w	sp, sp, r3
   d4520:	ad04      	add	r5, sp, #16
   d4522:	6820      	ldr	r0, [r4, #0]
   d4524:	4642      	mov	r2, r8
   d4526:	4629      	mov	r1, r5
   d4528:	f001 fc5b 	bl	d5de2 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d452c:	4580      	cmp	r8, r0
   d452e:	f04f 0000 	mov.w	r0, #0
   d4532:	d17f      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4534:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4538:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d453a:	f000 fe57 	bl	d51ec <_Z11BlynkMillisv>
    switch (hdr.type)
   d453e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4540:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d4542:	2b14      	cmp	r3, #20
   d4544:	f000 80a6 	beq.w	d4694 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4548:	d848      	bhi.n	d45dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d454a:	2b0f      	cmp	r3, #15
   d454c:	f000 80a2 	beq.w	d4694 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4550:	d807      	bhi.n	d4562 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d4552:	2b02      	cmp	r3, #2
   d4554:	d048      	beq.n	d45e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d4556:	2b06      	cmp	r3, #6
   d4558:	d051      	beq.n	d45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d455a:	4620      	mov	r0, r4
   d455c:	f7ff fe7c 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4560:	e058      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d4562:	2b11      	cmp	r3, #17
   d4564:	d1f9      	bne.n	d455a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d4566:	2300      	movs	r3, #0
   d4568:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d456a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d456e:	442b      	add	r3, r5
        if (it >= param.end())
   d4570:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4572:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d4576:	d24d      	bcs.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d4578:	f107 000c 	add.w	r0, r7, #12
   d457c:	f8d5 8000 	ldr.w	r8, [r5]
   d4580:	f7ff fe36 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4584:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4586:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d458a:	1b5d      	subs	r5, r3, r5
   d458c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d458e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d4592:	687b      	ldr	r3, [r7, #4]
   d4594:	61fd      	str	r5, [r7, #28]
   d4596:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d459a:	8363      	strh	r3, [r4, #26]
   d459c:	4b64      	ldr	r3, [pc, #400]	; (d4730 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d459e:	4598      	cmp	r8, r3
   d45a0:	f000 80bf 	beq.w	d4722 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d45a4:	f200 808c 	bhi.w	d46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d45a8:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d45ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d45b0:	4413      	add	r3, r2
   d45b2:	4598      	cmp	r8, r3
   d45b4:	f000 809d 	beq.w	d46f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d45b8:	d879      	bhi.n	d46ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d45ba:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d45be:	3b06      	subs	r3, #6
   d45c0:	4598      	cmp	r8, r3
   d45c2:	f000 809c 	beq.w	d46fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d45c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d45ca:	3303      	adds	r3, #3
   d45cc:	4598      	cmp	r8, r3
   d45ce:	d16b      	bne.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d45d0:	f107 0114 	add.w	r1, r7, #20
   d45d4:	4638      	mov	r0, r7
   d45d6:	f000 fe0c 	bl	d51f2 <BlynkWidgetWrite>
   d45da:	e065      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d45dc:	2b29      	cmp	r3, #41	; 0x29
   d45de:	d01b      	beq.n	d4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d45e0:	2b37      	cmp	r3, #55	; 0x37
   d45e2:	d017      	beq.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d45e4:	2b1d      	cmp	r3, #29
   d45e6:	d1b8      	bne.n	d455a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d45e8:	7f63      	ldrb	r3, [r4, #29]
   d45ea:	b943      	cbnz	r3, d45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d45ec:	2301      	movs	r3, #1
   d45ee:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d45f0:	4620      	mov	r0, r4
   d45f2:	f000 fa53 	bl	d4a9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d45f6:	f7ff fde5 	bl	d41c4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d45fa:	f000 fdfb 	bl	d51f4 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d45fe:	2300      	movs	r3, #0
   d4600:	21c8      	movs	r1, #200	; 0xc8
   d4602:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4606:	9100      	str	r1, [sp, #0]
   d4608:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d460c:	4619      	mov	r1, r3
   d460e:	4620      	mov	r0, r4
   d4610:	f000 f996 	bl	d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4614:	2001      	movs	r0, #1
   d4616:	e00d      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4618:	68a3      	ldr	r3, [r4, #8]
   d461a:	b91b      	cbnz	r3, d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d461c:	2040      	movs	r0, #64	; 0x40
   d461e:	f001 f863 	bl	d56e8 <malloc>
   d4622:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4624:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4628:	44a8      	add	r8, r5
        if (it >= param.end())
   d462a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d462c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4630:	d302      	bcc.n	d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d4632:	2000      	movs	r0, #0
   d4634:	46b5      	mov	sp, r6
   d4636:	e727      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d4638:	4629      	mov	r1, r5
   d463a:	2240      	movs	r2, #64	; 0x40
   d463c:	68a0      	ldr	r0, [r4, #8]
   d463e:	f003 fadb 	bl	d7bf8 <strncpy>
        redir_serv[63] = '\0';
   d4642:	68a3      	ldr	r3, [r4, #8]
   d4644:	2500      	movs	r5, #0
   d4646:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d464a:	f107 0014 	add.w	r0, r7, #20
   d464e:	f7ff fdcf 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d4652:	6803      	ldr	r3, [r0, #0]
   d4654:	4543      	cmp	r3, r8
   d4656:	d21b      	bcs.n	d4690 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4658:	6978      	ldr	r0, [r7, #20]
   d465a:	b120      	cbz	r0, d4666 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d465c:	69bb      	ldr	r3, [r7, #24]
   d465e:	4298      	cmp	r0, r3
   d4660:	d214      	bcs.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4662:	f003 fa63 	bl	d7b2c <atol>
            redir_port = it.asLong();
   d4666:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4668:	6820      	ldr	r0, [r4, #0]
   d466a:	f002 f86d 	bl	d6748 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d466e:	6823      	ldr	r3, [r4, #0]
   d4670:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d4672:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4674:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4676:	2300      	movs	r3, #0
   d4678:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d467a:	f000 fdb7 	bl	d51ec <_Z11BlynkMillisv>
   d467e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4682:	3808      	subs	r0, #8
   d4684:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4688:	6160      	str	r0, [r4, #20]
   d468a:	e7c3      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d468c:	4628      	mov	r0, r5
   d468e:	e7ea      	b.n	d4666 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d4690:	2550      	movs	r5, #80	; 0x50
   d4692:	e7e9      	b.n	d4668 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4694:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d4696:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d469a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d469e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d46a0:	4629      	mov	r1, r5
   d46a2:	4620      	mov	r0, r4
   d46a4:	f7ff fde2 	bl	d426c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d46a8:	2300      	movs	r3, #0
   d46aa:	8363      	strh	r3, [r4, #26]
   d46ac:	e7b2      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d46ae:	4b21      	ldr	r3, [pc, #132]	; (d4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d46b0:	4598      	cmp	r8, r3
   d46b2:	d1f9      	bne.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d46b4:	f107 0114 	add.w	r1, r7, #20
   d46b8:	4638      	mov	r0, r7
   d46ba:	f000 fd9a 	bl	d51f2 <BlynkWidgetWrite>
   d46be:	e7f3      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46c0:	4b1d      	ldr	r3, [pc, #116]	; (d4738 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d46c2:	4598      	cmp	r8, r3
   d46c4:	d021      	beq.n	d470a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d46c6:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d46ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d46ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d46d2:	4598      	cmp	r8, r3
   d46d4:	d01f      	beq.n	d4716 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d46d6:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d46da:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d46de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d46e2:	4598      	cmp	r8, r3
   d46e4:	d1e0      	bne.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d46e6:	f107 0114 	add.w	r1, r7, #20
   d46ea:	4638      	mov	r0, r7
   d46ec:	f000 fd81 	bl	d51f2 <BlynkWidgetWrite>
   d46f0:	e7da      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d46f2:	f107 0114 	add.w	r1, r7, #20
   d46f6:	4638      	mov	r0, r7
   d46f8:	f000 fd7b 	bl	d51f2 <BlynkWidgetWrite>
   d46fc:	e7d4      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d46fe:	f107 0114 	add.w	r1, r7, #20
   d4702:	4638      	mov	r0, r7
   d4704:	f000 fd75 	bl	d51f2 <BlynkWidgetWrite>
   d4708:	e7ce      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d470a:	f107 0114 	add.w	r1, r7, #20
   d470e:	4638      	mov	r0, r7
   d4710:	f000 fd6f 	bl	d51f2 <BlynkWidgetWrite>
   d4714:	e7c8      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4716:	f107 0114 	add.w	r1, r7, #20
   d471a:	4638      	mov	r0, r7
   d471c:	f000 fd69 	bl	d51f2 <BlynkWidgetWrite>
   d4720:	e7c2      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d4722:	f107 0114 	add.w	r1, r7, #20
   d4726:	4638      	mov	r0, r7
   d4728:	f000 fd63 	bl	d51f2 <BlynkWidgetWrite>
   d472c:	e7bc      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d472e:	bf00      	nop
   d4730:	00736676 	.word	0x00736676
   d4734:	00676264 	.word	0x00676264
   d4738:	6e6f6361 	.word	0x6e6f6361

000d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4740:	4604      	mov	r4, r0
   d4742:	b08c      	sub	sp, #48	; 0x30
   d4744:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4746:	f7ff fd3d 	bl	d41c4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d474a:	7f63      	ldrb	r3, [r4, #29]
   d474c:	2b02      	cmp	r3, #2
   d474e:	f000 80a8 	beq.w	d48a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4752:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4754:	8b62      	ldrh	r2, [r4, #26]
   d4756:	3301      	adds	r3, #1
   d4758:	b2db      	uxtb	r3, r3
   d475a:	7723      	strb	r3, [r4, #28]
   d475c:	b10a      	cbz	r2, d4762 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d475e:	2501      	movs	r5, #1
   d4760:	e016      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d4762:	2b02      	cmp	r3, #2
   d4764:	d8fb      	bhi.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4766:	6820      	ldr	r0, [r4, #0]
   d4768:	f001 fe0d 	bl	d6386 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d476c:	b1b8      	cbz	r0, d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d476e:	b925      	cbnz	r5, d477a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d4770:	6820      	ldr	r0, [r4, #0]
   d4772:	f001 ff8f 	bl	d6694 <_ZN9TCPClient9availableEv>
   d4776:	2800      	cmp	r0, #0
   d4778:	dd11      	ble.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d477a:	4620      	mov	r0, r4
   d477c:	f7ff fe76 	bl	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d4780:	4605      	mov	r5, r0
   d4782:	2800      	cmp	r0, #0
   d4784:	d1f4      	bne.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4786:	6820      	ldr	r0, [r4, #0]
   d4788:	f001 ffde 	bl	d6748 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d478c:	f000 fd32 	bl	d51f4 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d4790:	7f23      	ldrb	r3, [r4, #28]
   d4792:	3b01      	subs	r3, #1
   d4794:	7723      	strb	r3, [r4, #28]
}
   d4796:	4628      	mov	r0, r5
   d4798:	b00c      	add	sp, #48	; 0x30
   d479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d479e:	f000 fd25 	bl	d51ec <_Z11BlynkMillisv>
   d47a2:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d47a4:	6820      	ldr	r0, [r4, #0]
   d47a6:	f001 fdee 	bl	d6386 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d47aa:	7f67      	ldrb	r7, [r4, #29]
   d47ac:	2f01      	cmp	r7, #1
   d47ae:	4605      	mov	r5, r0
   d47b0:	d129      	bne.n	d4806 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d47b2:	b920      	cbnz	r0, d47be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d47b4:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d47b6:	4620      	mov	r0, r4
   d47b8:	f7ff fd4e 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47bc:	e7e8      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d47be:	68e3      	ldr	r3, [r4, #12]
   d47c0:	f24f 6218 	movw	r2, #63000	; 0xf618
   d47c4:	1af3      	subs	r3, r6, r3
   d47c6:	4293      	cmp	r3, r2
   d47c8:	d904      	bls.n	d47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d47ca:	4620      	mov	r0, r4
   d47cc:	f7ff fd44 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47d0:	2500      	movs	r5, #0
   d47d2:	e7dd      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47d4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d47d8:	4293      	cmp	r3, r2
   d47da:	d803      	bhi.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47dc:	6923      	ldr	r3, [r4, #16]
   d47de:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47e0:	4293      	cmp	r3, r2
   d47e2:	d9bc      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47e4:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47e6:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47ea:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47ec:	4293      	cmp	r3, r2
   d47ee:	d9b6      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d47f0:	2300      	movs	r3, #0
   d47f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d47f6:	9300      	str	r3, [sp, #0]
   d47f8:	461a      	mov	r2, r3
   d47fa:	2106      	movs	r1, #6
   d47fc:	4620      	mov	r0, r4
   d47fe:	f000 f89f 	bl	d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4802:	6166      	str	r6, [r4, #20]
   d4804:	e7ab      	b.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4806:	2f00      	cmp	r7, #0
   d4808:	d1a9      	bne.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d480a:	6962      	ldr	r2, [r4, #20]
   d480c:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d480e:	b140      	cbz	r0, d4822 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4810:	f241 7370 	movw	r3, #6000	; 0x1770
   d4814:	429a      	cmp	r2, r3
   d4816:	d9a2      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4818:	6820      	ldr	r0, [r4, #0]
   d481a:	f001 ff95 	bl	d6748 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d481e:	7767      	strb	r7, [r4, #29]
   d4820:	e7d6      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4822:	f241 3388 	movw	r3, #5000	; 0x1388
   d4826:	429a      	cmp	r2, r3
   d4828:	d999      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d482a:	6820      	ldr	r0, [r4, #0]
   d482c:	f001 ff8c 	bl	d6748 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4830:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4834:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4838:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d483c:	f1be 0f00 	cmp.w	lr, #0
   d4840:	d00b      	beq.n	d485a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4842:	462b      	mov	r3, r5
   d4844:	4642      	mov	r2, r8
   d4846:	4671      	mov	r1, lr
   d4848:	4660      	mov	r0, ip
   d484a:	f001 ffdb 	bl	d6804 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d484e:	1e43      	subs	r3, r0, #1
   d4850:	425d      	negs	r5, r3
   d4852:	415d      	adcs	r5, r3
   d4854:	b98d      	cbnz	r5, d487a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4856:	6166      	str	r6, [r4, #20]
                return false;
   d4858:	e79a      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d485a:	4b13      	ldr	r3, [pc, #76]	; (d48a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d485c:	9306      	str	r3, [sp, #24]
   d485e:	f10c 0720 	add.w	r7, ip, #32
   d4862:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4864:	ad07      	add	r5, sp, #28
   d4866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4868:	683b      	ldr	r3, [r7, #0]
   d486a:	702b      	strb	r3, [r5, #0]
   d486c:	4642      	mov	r2, r8
   d486e:	4673      	mov	r3, lr
   d4870:	a906      	add	r1, sp, #24
   d4872:	4660      	mov	r0, ip
   d4874:	f001 fe93 	bl	d659e <_ZN9TCPClient7connectE9IPAddresstm>
   d4878:	e7e9      	b.n	d484e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d487a:	6863      	ldr	r3, [r4, #4]
   d487c:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d487e:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4880:	4618      	mov	r0, r3
            msgIdOut = 1;
   d4882:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4884:	f003 f9b0 	bl	d7be8 <strlen>
   d4888:	2200      	movs	r2, #0
   d488a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d488e:	9b05      	ldr	r3, [sp, #20]
   d4890:	9000      	str	r0, [sp, #0]
   d4892:	4632      	mov	r2, r6
   d4894:	211d      	movs	r1, #29
   d4896:	4620      	mov	r0, r4
   d4898:	f000 f852 	bl	d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d489c:	6923      	ldr	r3, [r4, #16]
   d489e:	6163      	str	r3, [r4, #20]
            return true;
   d48a0:	e776      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d48a2:	2500      	movs	r5, #0
   d48a4:	e777      	b.n	d4796 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d48a6:	bf00      	nop
   d48a8:	000d830c 	.word	0x000d830c

000d48ac <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d48ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48b0:	4615      	mov	r5, r2
   d48b2:	b08c      	sub	sp, #48	; 0x30
   d48b4:	4604      	mov	r4, r0
   d48b6:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d48b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d48bc:	460f      	mov	r7, r1
   d48be:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d48c0:	f000 fc92 	bl	d51e8 <_Z10BlynkDelaym>
   d48c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48c6:	ae01      	add	r6, sp, #4
   d48c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48ca:	682b      	ldr	r3, [r5, #0]
   d48cc:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d48ce:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d48d0:	f000 fc8c 	bl	d51ec <_Z11BlynkMillisv>
   d48d4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d48d8:	3808      	subs	r0, #8
   d48da:	af01      	add	r7, sp, #4
   d48dc:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d48e0:	6160      	str	r0, [r4, #20]
   d48e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48e4:	ae07      	add	r6, sp, #28
   d48e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48e8:	683b      	ldr	r3, [r7, #0]
   d48ea:	7033      	strb	r3, [r6, #0]
   d48ec:	af07      	add	r7, sp, #28
   d48ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d48f0:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d48f2:	f04f 0c00 	mov.w	ip, #0
   d48f6:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d48fa:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d48fe:	3520      	adds	r5, #32
   d4900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4902:	6833      	ldr	r3, [r6, #0]
   d4904:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4906:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4908:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d490c:	6820      	ldr	r0, [r4, #0]
   d490e:	f001 ff1b 	bl	d6748 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4912:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4914:	f000 fc6a 	bl	d51ec <_Z11BlynkMillisv>
   d4918:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d491a:	7f63      	ldrb	r3, [r4, #29]
   d491c:	2b01      	cmp	r3, #1
   d491e:	d00c      	beq.n	d493a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4920:	f000 fc64 	bl	d51ec <_Z11BlynkMillisv>
   d4924:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4926:	42b8      	cmp	r0, r7
   d4928:	d804      	bhi.n	d4934 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d492a:	2100      	movs	r1, #0
   d492c:	4620      	mov	r0, r4
   d492e:	f7ff ff05 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4932:	e7f2      	b.n	d491a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4934:	7f63      	ldrb	r3, [r4, #29]
   d4936:	2b01      	cmp	r3, #1
   d4938:	d1e8      	bne.n	d490c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d493a:	b00c      	add	sp, #48	; 0x30
   d493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4944:	b083      	sub	sp, #12
   d4946:	af00      	add	r7, sp, #0
   d4948:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d494a:	6800      	ldr	r0, [r0, #0]
   d494c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d494e:	4688      	mov	r8, r1
   d4950:	4616      	mov	r6, r2
   d4952:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4954:	46eb      	mov	fp, sp
   d4956:	f001 fd16 	bl	d6386 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d495a:	2800      	cmp	r0, #0
   d495c:	d07f      	beq.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d495e:	f1b8 0f1d 	cmp.w	r8, #29
   d4962:	d804      	bhi.n	d496e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4964:	4b4c      	ldr	r3, [pc, #304]	; (d4a98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4966:	fa23 f308 	lsr.w	r3, r3, r8
   d496a:	07db      	lsls	r3, r3, #31
   d496c:	d402      	bmi.n	d4974 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d496e:	7f63      	ldrb	r3, [r4, #29]
   d4970:	2b01      	cmp	r3, #1
   d4972:	d174      	bne.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4974:	b946      	cbnz	r6, d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4976:	8b66      	ldrh	r6, [r4, #26]
   d4978:	b936      	cbnz	r6, d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d497a:	8b23      	ldrh	r3, [r4, #24]
   d497c:	3301      	adds	r3, #1
   d497e:	b29b      	uxth	r3, r3
   d4980:	2b00      	cmp	r3, #0
   d4982:	d071      	beq.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4984:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4986:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4988:	f1a8 030c 	sub.w	r3, r8, #12
   d498c:	2b08      	cmp	r3, #8
   d498e:	d816      	bhi.n	d49be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4990:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4994:	4293      	cmp	r3, r2
   d4996:	bf38      	it	cc
   d4998:	4613      	movcc	r3, r2
   d499a:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d499e:	f000 fc25 	bl	d51ec <_Z11BlynkMillisv>
   d49a2:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d49a6:	2800      	cmp	r0, #0
   d49a8:	db60      	blt.n	d4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d49aa:	2100      	movs	r1, #0
   d49ac:	4620      	mov	r0, r4
   d49ae:	f7ff fec5 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d49b2:	f000 fc1b 	bl	d51ec <_Z11BlynkMillisv>
   d49b6:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d49ba:	2800      	cmp	r0, #0
   d49bc:	daf5      	bge.n	d49aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49be:	f1b9 0f00 	cmp.w	r9, #0
   d49c2:	d05a      	beq.n	d4a7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d49c4:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d49c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d49c8:	2a00      	cmp	r2, #0
   d49ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d49cc:	bf08      	it	eq
   d49ce:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49d0:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d49d4:	f10a 0307 	add.w	r3, sl, #7
   d49d8:	f023 0307 	bic.w	r3, r3, #7
   d49dc:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d49e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d49e2:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d49e6:	18ea      	adds	r2, r5, r3
   d49e8:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d49ec:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d49ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d49f2:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d49f6:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d49fa:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d49fe:	f1b9 0f00 	cmp.w	r9, #0
   d4a02:	d03c      	beq.n	d4a7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a04:	2d00      	cmp	r5, #0
   d4a06:	d03a      	beq.n	d4a7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a08:	462a      	mov	r2, r5
   d4a0a:	4649      	mov	r1, r9
   d4a0c:	f10d 0005 	add.w	r0, sp, #5
   d4a10:	f003 f89e 	bl	d7b50 <memcpy>
        pos += length;
   d4a14:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a18:	b13b      	cbz	r3, d4a2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a1c:	b12b      	cbz	r3, d4a2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a1e:	461a      	mov	r2, r3
   d4a20:	687b      	ldr	r3, [r7, #4]
   d4a22:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a24:	4418      	add	r0, r3
   d4a26:	f003 f893 	bl	d7b50 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a2a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a2c:	4555      	cmp	r5, sl
   d4a2e:	d22a      	bcs.n	d4a86 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a30:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a34:	687b      	ldr	r3, [r7, #4]
   d4a36:	6820      	ldr	r0, [r4, #0]
   d4a38:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a3c:	bf28      	it	cs
   d4a3e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a42:	1959      	adds	r1, r3, r5
   d4a44:	f001 fc89 	bl	d635a <_ZN9TCPClient5writeEPKhj>
   d4a48:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a4a:	2000      	movs	r0, #0
   d4a4c:	f000 fbcc 	bl	d51e8 <_Z10BlynkDelaym>
        if (w == 0) {
   d4a50:	b9be      	cbnz	r6, d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4a52:	6820      	ldr	r0, [r4, #0]
   d4a54:	f001 fe78 	bl	d6748 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a58:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a5a:	f000 fbcb 	bl	d51f4 <BlynkNoOpCbk>
}
   d4a5e:	370c      	adds	r7, #12
   d4a60:	46dd      	mov	sp, fp
   d4a62:	46bd      	mov	sp, r7
   d4a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4a68:	2301      	movs	r3, #1
   d4a6a:	e78b      	b.n	d4984 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4a6c:	7f21      	ldrb	r1, [r4, #28]
   d4a6e:	2900      	cmp	r1, #0
   d4a70:	d1a5      	bne.n	d49be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4a72:	4620      	mov	r0, r4
   d4a74:	f7ff fe62 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4a78:	e7a1      	b.n	d49be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a7a:	2305      	movs	r3, #5
   d4a7c:	e7a3      	b.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4a7e:	2005      	movs	r0, #5
   d4a80:	e7c9      	b.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4a82:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4a84:	e7d2      	b.n	d4a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4a86:	d003      	beq.n	d4a90 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4a88:	4620      	mov	r0, r4
   d4a8a:	f7ff fbe5 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4a8e:	e7e6      	b.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4a90:	f000 fbac 	bl	d51ec <_Z11BlynkMillisv>
   d4a94:	6120      	str	r0, [r4, #16]
   d4a96:	e7e2      	b.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a98:	20000045 	.word	0x20000045

000d4a9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4a9c:	b500      	push	{lr}
   d4a9e:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4aa0:	ab04      	add	r3, sp, #16
   d4aa2:	2200      	movs	r2, #0
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	2349      	movs	r3, #73	; 0x49
   d4aa8:	9300      	str	r3, [sp, #0]
   d4aaa:	9202      	str	r2, [sp, #8]
   d4aac:	4b03      	ldr	r3, [pc, #12]	; (d4abc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4aae:	2111      	movs	r1, #17
   d4ab0:	f7ff ff46 	bl	d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4ab4:	b015      	add	sp, #84	; 0x54
   d4ab6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4aba:	bf00      	nop
   d4abc:	000d7dfc 	.word	0x000d7dfc

000d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4ac0:	b570      	push	{r4, r5, r6, lr}
   d4ac2:	ed2d 8b02 	vpush	{d8}
   d4ac6:	eeb0 8a40 	vmov.f32	s16, s0
   d4aca:	eef0 8a60 	vmov.f32	s17, s1
   d4ace:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4ad2:	ab08      	add	r3, sp, #32
   d4ad4:	2400      	movs	r4, #0
   d4ad6:	4605      	mov	r5, r0
   d4ad8:	460e      	mov	r6, r1
   d4ada:	9305      	str	r3, [sp, #20]
   d4adc:	a805      	add	r0, sp, #20
   d4ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4ae2:	4913      	ldr	r1, [pc, #76]	; (d4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   d4ae4:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4ae8:	f7ff faf4 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        cmd.add(pin);
   d4aec:	4631      	mov	r1, r6
   d4aee:	a805      	add	r0, sp, #20
   d4af0:	f7ff fb8e 	bl	d4210 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d4af4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   d4af8:	9805      	ldr	r0, [sp, #20]
   d4afa:	4a0e      	ldr	r2, [pc, #56]	; (d4b34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   d4afc:	1ac9      	subs	r1, r1, r3
   d4afe:	ed8d 8b00 	vstr	d8, [sp]
   d4b02:	4418      	add	r0, r3
   d4b04:	f000 fe08 	bl	d5718 <snprintf>
   d4b08:	1c43      	adds	r3, r0, #1
   d4b0a:	9806      	ldr	r0, [sp, #24]
   d4b0c:	4403      	add	r3, r0
   d4b0e:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b10:	3b01      	subs	r3, #1
   d4b12:	9300      	str	r3, [sp, #0]
   d4b14:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b18:	9b05      	ldr	r3, [sp, #20]
   d4b1a:	4622      	mov	r2, r4
   d4b1c:	2114      	movs	r1, #20
   d4b1e:	4628      	mov	r0, r5
   d4b20:	f7ff ff0e 	bl	d4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b24:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4b28:	ecbd 8b02 	vpop	{d8}
   d4b2c:	bd70      	pop	{r4, r5, r6, pc}
   d4b2e:	bf00      	nop
   d4b30:	000d7d98 	.word	0x000d7d98
   d4b34:	000d7d9b 	.word	0x000d7d9b

000d4b38 <loop>:
  avg_y = sum_y / COUNTER;
  avg_z = sum_z / COUNTER;
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4b38:	b530      	push	{r4, r5, lr}
   d4b3a:	b08b      	sub	sp, #44	; 0x2c



		LIS3DHSample sample;
		if (accel.getSample(sample)) {
   d4b3c:	4844      	ldr	r0, [pc, #272]	; (d4c50 <loop+0x118>)
   d4b3e:	4669      	mov	r1, sp
   d4b40:	f000 fac0 	bl	d50c4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4b44:	2800      	cmp	r0, #0
   d4b46:	d07c      	beq.n	d4c42 <loop+0x10a>
      String output = "";
      output += (String) (sample.x - avg_z);
   d4b48:	4c42      	ldr	r4, [pc, #264]	; (d4c54 <loop+0x11c>)
      String output = "";
   d4b4a:	4943      	ldr	r1, [pc, #268]	; (d4c58 <loop+0x120>)
      output += "  ";
      output += (String)  (sample.y - avg_y);
   d4b4c:	4d43      	ldr	r5, [pc, #268]	; (d4c5c <loop+0x124>)
      String output = "";
   d4b4e:	a802      	add	r0, sp, #8
   d4b50:	f001 f813 	bl	d5b7a <_ZN6StringC1EPKc>
      output += (String) (sample.x - avg_z);
   d4b54:	f9bd 0000 	ldrsh.w	r0, [sp]
   d4b58:	f002 fb26 	bl	d71a8 <__aeabi_i2d>
   d4b5c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4b60:	f002 f9d4 	bl	d6f0c <__aeabi_dsub>
   d4b64:	ec41 0b10 	vmov	d0, r0, r1
   d4b68:	2106      	movs	r1, #6
   d4b6a:	a806      	add	r0, sp, #24
   d4b6c:	f001 f82b 	bl	d5bc6 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4b70:	a906      	add	r1, sp, #24
   d4b72:	a802      	add	r0, sp, #8
   d4b74:	f001 f852 	bl	d5c1c <_ZN6String6concatERKS_>
   d4b78:	a806      	add	r0, sp, #24
   d4b7a:	f000 ffb3 	bl	d5ae4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4b7e:	4938      	ldr	r1, [pc, #224]	; (d4c60 <loop+0x128>)
   d4b80:	a802      	add	r0, sp, #8
   d4b82:	f001 f84f 	bl	d5c24 <_ZN6String6concatEPKc>
      output += (String)  (sample.y - avg_y);
   d4b86:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   d4b8a:	f002 fb0d 	bl	d71a8 <__aeabi_i2d>
   d4b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4b92:	f002 f9bb 	bl	d6f0c <__aeabi_dsub>
   d4b96:	ec41 0b10 	vmov	d0, r0, r1
   d4b9a:	2106      	movs	r1, #6
   d4b9c:	a806      	add	r0, sp, #24
   d4b9e:	f001 f812 	bl	d5bc6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4ba2:	a906      	add	r1, sp, #24
   d4ba4:	a802      	add	r0, sp, #8
   d4ba6:	f001 f839 	bl	d5c1c <_ZN6String6concatERKS_>
   d4baa:	a806      	add	r0, sp, #24
   d4bac:	f000 ff9a 	bl	d5ae4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4bb0:	492c      	ldr	r1, [pc, #176]	; (d4c64 <loop+0x12c>)
   d4bb2:	a802      	add	r0, sp, #8
   d4bb4:	f001 f836 	bl	d5c24 <_ZN6String6concatEPKc>
      output += " ";
      output += (String) (sample.z - avg_z);
   d4bb8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   d4bbc:	f002 faf4 	bl	d71a8 <__aeabi_i2d>
   d4bc0:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4bc4:	f002 f9a2 	bl	d6f0c <__aeabi_dsub>
   d4bc8:	ec41 0b10 	vmov	d0, r0, r1
   d4bcc:	2106      	movs	r1, #6
   d4bce:	a806      	add	r0, sp, #24
   d4bd0:	f000 fff9 	bl	d5bc6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4bd4:	a906      	add	r1, sp, #24
   d4bd6:	a802      	add	r0, sp, #8
   d4bd8:	f001 f820 	bl	d5c1c <_ZN6String6concatERKS_>
   d4bdc:	a806      	add	r0, sp, #24
   d4bde:	f000 ff81 	bl	d5ae4 <_ZN6StringD1Ev>

			//Serial.println(output);

      Blynk.virtualWrite(V0, sample.x- avg_x);
   d4be2:	f9bd 0000 	ldrsh.w	r0, [sp]
   d4be6:	f002 fadf 	bl	d71a8 <__aeabi_i2d>
   d4bea:	4b1f      	ldr	r3, [pc, #124]	; (d4c68 <loop+0x130>)
   d4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bf0:	f002 f98c 	bl	d6f0c <__aeabi_dsub>
   d4bf4:	ec41 0b10 	vmov	d0, r0, r1
   d4bf8:	481c      	ldr	r0, [pc, #112]	; (d4c6c <loop+0x134>)
   d4bfa:	2100      	movs	r1, #0
   d4bfc:	f7ff ff60 	bl	d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
      Blynk.virtualWrite(V1, sample.y - avg_y);
   d4c00:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   d4c04:	f002 fad0 	bl	d71a8 <__aeabi_i2d>
   d4c08:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4c0c:	f002 f97e 	bl	d6f0c <__aeabi_dsub>
   d4c10:	ec41 0b10 	vmov	d0, r0, r1
   d4c14:	4815      	ldr	r0, [pc, #84]	; (d4c6c <loop+0x134>)
   d4c16:	2101      	movs	r1, #1
   d4c18:	f7ff ff52 	bl	d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
      Blynk.virtualWrite(V2, sample.z - avg_z);
   d4c1c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   d4c20:	f002 fac2 	bl	d71a8 <__aeabi_i2d>
   d4c24:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4c28:	f002 f970 	bl	d6f0c <__aeabi_dsub>
   d4c2c:	ec41 0b10 	vmov	d0, r0, r1
   d4c30:	480e      	ldr	r0, [pc, #56]	; (d4c6c <loop+0x134>)
   d4c32:	2102      	movs	r1, #2
   d4c34:	f7ff ff44 	bl	d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
      String output = "";
   d4c38:	a802      	add	r0, sp, #8
   d4c3a:	f000 ff53 	bl	d5ae4 <_ZN6StringD1Ev>
    }
		else {
			Serial.println("no sample");
		}
	}
   d4c3e:	b00b      	add	sp, #44	; 0x2c
   d4c40:	bd30      	pop	{r4, r5, pc}
			Serial.println("no sample");
   d4c42:	f001 fa97 	bl	d6174 <_Z16_fetch_usbserialv>
   d4c46:	490a      	ldr	r1, [pc, #40]	; (d4c70 <loop+0x138>)
   d4c48:	f001 f85d 	bl	d5d06 <_ZN5Print7printlnEPKc>
	}
   d4c4c:	e7f7      	b.n	d4c3e <loop+0x106>
   d4c4e:	bf00      	nop
   d4c50:	2003e5fc 	.word	0x2003e5fc
   d4c54:	2003e638 	.word	0x2003e638
   d4c58:	000d7da3 	.word	0x000d7da3
   d4c5c:	2003e630 	.word	0x2003e630
   d4c60:	000d7da1 	.word	0x000d7da1
   d4c64:	000d7da2 	.word	0x000d7da2
   d4c68:	2003e628 	.word	0x2003e628
   d4c6c:	2003e5a0 	.word	0x2003e5a0
   d4c70:	000d7da4 	.word	0x000d7da4

000d4c74 <setup>:
void setup() {
   d4c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(D3, INPUT);
   d4c78:	2100      	movs	r1, #0
void setup() {
   d4c7a:	b095      	sub	sp, #84	; 0x54
  pinMode(D3, INPUT);
   d4c7c:	2003      	movs	r0, #3
   d4c7e:	f001 ff6b 	bl	d6b58 <pinMode>
  Blynk.begin("8gmPQYYTl5fLuty94QJs3WJ-sWudPSyu", IPAddress(167, 172, 234, 162), 9090);
   d4c82:	23a2      	movs	r3, #162	; 0xa2
   d4c84:	9300      	str	r3, [sp, #0]
   d4c86:	22ac      	movs	r2, #172	; 0xac
   d4c88:	23ea      	movs	r3, #234	; 0xea
   d4c8a:	21a7      	movs	r1, #167	; 0xa7
   d4c8c:	a80e      	add	r0, sp, #56	; 0x38
   d4c8e:	f001 f9f9 	bl	d6084 <_ZN9IPAddressC1Ehhhh>
   d4c92:	f242 3382 	movw	r3, #9090	; 0x2382
   d4c96:	aa0e      	add	r2, sp, #56	; 0x38
   d4c98:	4975      	ldr	r1, [pc, #468]	; (d4e70 <setup+0x1fc>)
   d4c9a:	4876      	ldr	r0, [pc, #472]	; (d4e74 <setup+0x200>)
  for (int i = 0; i < COUNTER; i++)
   d4c9c:	4f76      	ldr	r7, [pc, #472]	; (d4e78 <setup+0x204>)
    if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   d4c9e:	4e77      	ldr	r6, [pc, #476]	; (d4e7c <setup+0x208>)
      if (accel.getSample(sample)) {
   d4ca0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; d4e80 <setup+0x20c>
  Blynk.begin("8gmPQYYTl5fLuty94QJs3WJ-sWudPSyu", IPAddress(167, 172, 234, 162), 9090);
   d4ca4:	f7ff fe02 	bl	d48ac <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Blynk.run();
   d4ca8:	2100      	movs	r1, #0
   d4caa:	4872      	ldr	r0, [pc, #456]	; (d4e74 <setup+0x200>)
   d4cac:	f7ff fd46 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  Serial.begin(9600);
   d4cb0:	f001 fa60 	bl	d6174 <_Z16_fetch_usbserialv>
   d4cb4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4cb8:	f001 fa50 	bl	d615c <_ZN9USBSerial5beginEl>
	LIS3DHConfig config;
   d4cbc:	a807      	add	r0, sp, #28
   d4cbe:	f000 f9bb 	bl	d5038 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   d4cc2:	2150      	movs	r1, #80	; 0x50
   d4cc4:	a807      	add	r0, sp, #28
   d4cc6:	f000 f9c4 	bl	d5052 <_ZN12LIS3DHConfig12setAccelModeEh>
	bool setupSuccess = accel.setup(config);
   d4cca:	a907      	add	r1, sp, #28
   d4ccc:	486c      	ldr	r0, [pc, #432]	; (d4e80 <setup+0x20c>)
   d4cce:	f000 fa2f 	bl	d5130 <_ZN6LIS3DH5setupER12LIS3DHConfig>
   d4cd2:	9003      	str	r0, [sp, #12]
	Serial.printlnf("setupSuccess=%d", setupSuccess);
   d4cd4:	f001 fa4e 	bl	d6174 <_Z16_fetch_usbserialv>
   d4cd8:	9a03      	ldr	r2, [sp, #12]
   d4cda:	496a      	ldr	r1, [pc, #424]	; (d4e84 <setup+0x210>)
   d4cdc:	f7ff fa64 	bl	d41a8 <_ZN5Print8printlnfEPKcz>
  for (int i = 0; i < COUNTER; i++)
   d4ce0:	2500      	movs	r5, #0
   d4ce2:	683c      	ldr	r4, [r7, #0]
   d4ce4:	42ac      	cmp	r4, r5
   d4ce6:	f340 80a5 	ble.w	d4e34 <setup+0x1c0>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4cea:	f000 fb01 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   d4cee:	6833      	ldr	r3, [r6, #0]
   d4cf0:	1ac0      	subs	r0, r0, r3
   d4cf2:	2863      	cmp	r0, #99	; 0x63
   d4cf4:	f240 8096 	bls.w	d4e24 <setup+0x1b0>
   d4cf8:	f000 fafa 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
      if (accel.getSample(sample)) {
   d4cfc:	a905      	add	r1, sp, #20
      lastPrintSample = millis();
   d4cfe:	6030      	str	r0, [r6, #0]
      if (accel.getSample(sample)) {
   d4d00:	4640      	mov	r0, r8
   d4d02:	f000 f9df 	bl	d50c4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4d06:	2800      	cmp	r0, #0
   d4d08:	f000 808e 	beq.w	d4e28 <setup+0x1b4>
        output += (String) (sample.x - avg_z);
   d4d0c:	4c5e      	ldr	r4, [pc, #376]	; (d4e88 <setup+0x214>)
        String output = "";
   d4d0e:	495f      	ldr	r1, [pc, #380]	; (d4e8c <setup+0x218>)
        output += (String)  (sample.y - avg_y);
   d4d10:	f8df 9198 	ldr.w	r9, [pc, #408]	; d4eac <setup+0x238>
        String output = "";
   d4d14:	a80a      	add	r0, sp, #40	; 0x28
   d4d16:	f000 ff30 	bl	d5b7a <_ZN6StringC1EPKc>
        output += (String) (sample.x - avg_z);
   d4d1a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
   d4d1e:	f002 fa43 	bl	d71a8 <__aeabi_i2d>
   d4d22:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4d26:	f002 f8f1 	bl	d6f0c <__aeabi_dsub>
   d4d2a:	ec41 0b10 	vmov	d0, r0, r1
   d4d2e:	2106      	movs	r1, #6
   d4d30:	a80e      	add	r0, sp, #56	; 0x38
   d4d32:	f000 ff48 	bl	d5bc6 <_ZN6StringC1Edi>
   d4d36:	a90e      	add	r1, sp, #56	; 0x38
   d4d38:	a80a      	add	r0, sp, #40	; 0x28
   d4d3a:	f000 ff6f 	bl	d5c1c <_ZN6String6concatERKS_>
   d4d3e:	a80e      	add	r0, sp, #56	; 0x38
   d4d40:	f000 fed0 	bl	d5ae4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4d44:	4952      	ldr	r1, [pc, #328]	; (d4e90 <setup+0x21c>)
   d4d46:	a80a      	add	r0, sp, #40	; 0x28
   d4d48:	f000 ff6c 	bl	d5c24 <_ZN6String6concatEPKc>
        output += (String)  (sample.y - avg_y);
   d4d4c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
   d4d50:	f002 fa2a 	bl	d71a8 <__aeabi_i2d>
   d4d54:	e9d9 2300 	ldrd	r2, r3, [r9]
   d4d58:	f002 f8d8 	bl	d6f0c <__aeabi_dsub>
   d4d5c:	ec41 0b10 	vmov	d0, r0, r1
   d4d60:	2106      	movs	r1, #6
   d4d62:	a80e      	add	r0, sp, #56	; 0x38
   d4d64:	f000 ff2f 	bl	d5bc6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4d68:	a90e      	add	r1, sp, #56	; 0x38
   d4d6a:	a80a      	add	r0, sp, #40	; 0x28
   d4d6c:	f000 ff56 	bl	d5c1c <_ZN6String6concatERKS_>
   d4d70:	a80e      	add	r0, sp, #56	; 0x38
   d4d72:	f000 feb7 	bl	d5ae4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4d76:	4947      	ldr	r1, [pc, #284]	; (d4e94 <setup+0x220>)
   d4d78:	a80a      	add	r0, sp, #40	; 0x28
   d4d7a:	f000 ff53 	bl	d5c24 <_ZN6String6concatEPKc>
        output += (String) (sample.z - avg_z);
   d4d7e:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
   d4d82:	f002 fa11 	bl	d71a8 <__aeabi_i2d>
   d4d86:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4d8a:	f002 f8bf 	bl	d6f0c <__aeabi_dsub>
   d4d8e:	ec41 0b10 	vmov	d0, r0, r1
   d4d92:	2106      	movs	r1, #6
   d4d94:	a80e      	add	r0, sp, #56	; 0x38
   d4d96:	f000 ff16 	bl	d5bc6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4d9a:	a90e      	add	r1, sp, #56	; 0x38
   d4d9c:	a80a      	add	r0, sp, #40	; 0x28
   d4d9e:	f000 ff3d 	bl	d5c1c <_ZN6String6concatERKS_>
   d4da2:	a80e      	add	r0, sp, #56	; 0x38
   d4da4:	f000 fe9e 	bl	d5ae4 <_ZN6StringD1Ev>
        sum_x += sample.x;
   d4da8:	4a3b      	ldr	r2, [pc, #236]	; (d4e98 <setup+0x224>)
   d4daa:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
   d4dae:	6813      	ldr	r3, [r2, #0]
   d4db0:	4403      	add	r3, r0
   d4db2:	6013      	str	r3, [r2, #0]
        sum_y += sample.y;
   d4db4:	4a39      	ldr	r2, [pc, #228]	; (d4e9c <setup+0x228>)
   d4db6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   d4dba:	6811      	ldr	r1, [r2, #0]
   d4dbc:	440b      	add	r3, r1
   d4dbe:	6013      	str	r3, [r2, #0]
        sum_z += sample.z;
   d4dc0:	4a37      	ldr	r2, [pc, #220]	; (d4ea0 <setup+0x22c>)
   d4dc2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d4dc6:	6811      	ldr	r1, [r2, #0]
   d4dc8:	440b      	add	r3, r1
   d4dca:	6013      	str	r3, [r2, #0]
        Blynk.virtualWrite(V0, sample.x- avg_x);
   d4dcc:	f002 f9ec 	bl	d71a8 <__aeabi_i2d>
   d4dd0:	4b34      	ldr	r3, [pc, #208]	; (d4ea4 <setup+0x230>)
   d4dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dd6:	f002 f899 	bl	d6f0c <__aeabi_dsub>
   d4dda:	ec41 0b10 	vmov	d0, r0, r1
   d4dde:	4825      	ldr	r0, [pc, #148]	; (d4e74 <setup+0x200>)
   d4de0:	2100      	movs	r1, #0
   d4de2:	f7ff fe6d 	bl	d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
        Blynk.virtualWrite(V1, sample.y - avg_y);
   d4de6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
   d4dea:	f002 f9dd 	bl	d71a8 <__aeabi_i2d>
   d4dee:	e9d9 2300 	ldrd	r2, r3, [r9]
   d4df2:	f002 f88b 	bl	d6f0c <__aeabi_dsub>
   d4df6:	ec41 0b10 	vmov	d0, r0, r1
   d4dfa:	481e      	ldr	r0, [pc, #120]	; (d4e74 <setup+0x200>)
   d4dfc:	2101      	movs	r1, #1
   d4dfe:	f7ff fe5f 	bl	d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
        Blynk.virtualWrite(V2, sample.z - avg_z);
   d4e02:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
   d4e06:	f002 f9cf 	bl	d71a8 <__aeabi_i2d>
   d4e0a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4e0e:	f002 f87d 	bl	d6f0c <__aeabi_dsub>
   d4e12:	ec41 0b10 	vmov	d0, r0, r1
   d4e16:	4817      	ldr	r0, [pc, #92]	; (d4e74 <setup+0x200>)
   d4e18:	2102      	movs	r1, #2
   d4e1a:	f7ff fe51 	bl	d4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
        String output = "";
   d4e1e:	a80a      	add	r0, sp, #40	; 0x28
   d4e20:	f000 fe60 	bl	d5ae4 <_ZN6StringD1Ev>
  for (int i = 0; i < COUNTER; i++)
   d4e24:	3501      	adds	r5, #1
   d4e26:	e75c      	b.n	d4ce2 <setup+0x6e>
        Serial.println("no sample");
   d4e28:	f001 f9a4 	bl	d6174 <_Z16_fetch_usbserialv>
   d4e2c:	491e      	ldr	r1, [pc, #120]	; (d4ea8 <setup+0x234>)
   d4e2e:	f000 ff6a 	bl	d5d06 <_ZN5Print7printlnEPKc>
   d4e32:	e7f7      	b.n	d4e24 <setup+0x1b0>
  avg_x = sum_x / COUNTER;
   d4e34:	4b18      	ldr	r3, [pc, #96]	; (d4e98 <setup+0x224>)
   d4e36:	6818      	ldr	r0, [r3, #0]
   d4e38:	fb90 f0f4 	sdiv	r0, r0, r4
   d4e3c:	f002 f9b4 	bl	d71a8 <__aeabi_i2d>
   d4e40:	4b18      	ldr	r3, [pc, #96]	; (d4ea4 <setup+0x230>)
   d4e42:	e9c3 0100 	strd	r0, r1, [r3]
  avg_y = sum_y / COUNTER;
   d4e46:	4b15      	ldr	r3, [pc, #84]	; (d4e9c <setup+0x228>)
   d4e48:	6818      	ldr	r0, [r3, #0]
   d4e4a:	fb90 f0f4 	sdiv	r0, r0, r4
   d4e4e:	f002 f9ab 	bl	d71a8 <__aeabi_i2d>
   d4e52:	4b16      	ldr	r3, [pc, #88]	; (d4eac <setup+0x238>)
   d4e54:	e9c3 0100 	strd	r0, r1, [r3]
  avg_z = sum_z / COUNTER;
   d4e58:	4b11      	ldr	r3, [pc, #68]	; (d4ea0 <setup+0x22c>)
   d4e5a:	6818      	ldr	r0, [r3, #0]
   d4e5c:	fb90 f0f4 	sdiv	r0, r0, r4
   d4e60:	f002 f9a2 	bl	d71a8 <__aeabi_i2d>
   d4e64:	4b08      	ldr	r3, [pc, #32]	; (d4e88 <setup+0x214>)
   d4e66:	e9c3 0100 	strd	r0, r1, [r3]
}
   d4e6a:	b015      	add	sp, #84	; 0x54
   d4e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e70:	000d7dae 	.word	0x000d7dae
   d4e74:	2003e5a0 	.word	0x2003e5a0
   d4e78:	2003e524 	.word	0x2003e524
   d4e7c:	2003e640 	.word	0x2003e640
   d4e80:	2003e5fc 	.word	0x2003e5fc
   d4e84:	000d7dcf 	.word	0x000d7dcf
   d4e88:	2003e638 	.word	0x2003e638
   d4e8c:	000d7da3 	.word	0x000d7da3
   d4e90:	000d7da1 	.word	0x000d7da1
   d4e94:	000d7da2 	.word	0x000d7da2
   d4e98:	2003e644 	.word	0x2003e644
   d4e9c:	2003e648 	.word	0x2003e648
   d4ea0:	2003e64c 	.word	0x2003e64c
   d4ea4:	2003e628 	.word	0x2003e628
   d4ea8:	000d7da4 	.word	0x000d7da4
   d4eac:	2003e630 	.word	0x2003e630

000d4eb0 <_GLOBAL__sub_I_Blynk>:
	}
   d4eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0)
   d4eb2:	4d26      	ldr	r5, [pc, #152]	; (d4f4c <_GLOBAL__sub_I_Blynk+0x9c>)
SYSTEM_THREAD(ENABLED);
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	2001      	movs	r0, #1
   d4eb8:	f000 fb8a 	bl	d55d0 <system_thread_set_state>
   d4ebc:	4628      	mov	r0, r5
   d4ebe:	2400      	movs	r4, #0
   d4ec0:	f001 fc8c 	bl	d67dc <_ZN9TCPClientC1Ev>
   d4ec4:	f105 001c 	add.w	r0, r5, #28
   d4ec8:	f001 f898 	bl	d5ffc <_ZN9IPAddressC1Ev>
   d4ecc:	636c      	str	r4, [r5, #52]	; 0x34
   d4ece:	872c      	strh	r4, [r5, #56]	; 0x38
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4ed0:	4a1f      	ldr	r2, [pc, #124]	; (d4f50 <_GLOBAL__sub_I_Blynk+0xa0>)
   d4ed2:	4920      	ldr	r1, [pc, #128]	; (d4f54 <_GLOBAL__sub_I_Blynk+0xa4>)
   d4ed4:	4628      	mov	r0, r5
   d4ed6:	f001 fef9 	bl	d6ccc <__aeabi_atexit>
        , state(CONNECTING)
   d4eda:	4b1f      	ldr	r3, [pc, #124]	; (d4f58 <_GLOBAL__sub_I_Blynk+0xa8>)
   d4edc:	e9c3 5400 	strd	r5, r4, [r3]
   d4ee0:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4ee4:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4ee8:	619c      	str	r4, [r3, #24]
   d4eea:	839c      	strh	r4, [r3, #28]

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d4eec:	4c1b      	ldr	r4, [pc, #108]	; (d4f5c <_GLOBAL__sub_I_Blynk+0xac>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4eee:	4d1c      	ldr	r5, [pc, #112]	; (d4f60 <_GLOBAL__sub_I_Blynk+0xb0>)
   d4ef0:	2108      	movs	r1, #8
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	f000 f8b8 	bl	d5068 <_ZN6LIS3DHC1Ei>
   d4ef8:	4b1a      	ldr	r3, [pc, #104]	; (d4f64 <_GLOBAL__sub_I_Blynk+0xb4>)
   d4efa:	6023      	str	r3, [r4, #0]
   d4efc:	7829      	ldrb	r1, [r5, #0]
   d4efe:	f3bf 8f5b 	dmb	ish
   d4f02:	f011 0101 	ands.w	r1, r1, #1
   d4f06:	d10b      	bne.n	d4f20 <_GLOBAL__sub_I_Blynk+0x70>
   d4f08:	4628      	mov	r0, r5
   d4f0a:	9101      	str	r1, [sp, #4]
   d4f0c:	f7ff f8d2 	bl	d40b4 <__cxa_guard_acquire>
   d4f10:	9901      	ldr	r1, [sp, #4]
   d4f12:	b128      	cbz	r0, d4f20 <_GLOBAL__sub_I_Blynk+0x70>
   d4f14:	4814      	ldr	r0, [pc, #80]	; (d4f68 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4f16:	f000 fc63 	bl	d57e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4f1a:	4628      	mov	r0, r5
   d4f1c:	f7ff f8cf 	bl	d40be <__cxa_guard_release>
   d4f20:	4b11      	ldr	r3, [pc, #68]	; (d4f68 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4f22:	60e3      	str	r3, [r4, #12]
   d4f24:	2303      	movs	r3, #3
      dataMode_{dataMode}
   d4f26:	4a11      	ldr	r2, [pc, #68]	; (d4f6c <_GLOBAL__sub_I_Blynk+0xbc>)
   d4f28:	6123      	str	r3, [r4, #16]
   d4f2a:	2300      	movs	r3, #0
   d4f2c:	7523      	strb	r3, [r4, #20]
   d4f2e:	61a2      	str	r2, [r4, #24]
   d4f30:	7723      	strb	r3, [r4, #28]
LIS3DHSPI accel(SPI, D3, WKP);
   d4f32:	4a07      	ldr	r2, [pc, #28]	; (d4f50 <_GLOBAL__sub_I_Blynk+0xa0>)
   d4f34:	4b0e      	ldr	r3, [pc, #56]	; (d4f70 <_GLOBAL__sub_I_Blynk+0xc0>)
   d4f36:	490f      	ldr	r1, [pc, #60]	; (d4f74 <_GLOBAL__sub_I_Blynk+0xc4>)
   d4f38:	4808      	ldr	r0, [pc, #32]	; (d4f5c <_GLOBAL__sub_I_Blynk+0xac>)
   d4f3a:	6223      	str	r3, [r4, #32]
   d4f3c:	2301      	movs	r3, #1
   d4f3e:	84a3      	strh	r3, [r4, #36]	; 0x24
	}
   d4f40:	b003      	add	sp, #12
   d4f42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
LIS3DHSPI accel(SPI, D3, WKP);
   d4f46:	f001 bec1 	b.w	d6ccc <__aeabi_atexit>
   d4f4a:	bf00      	nop
   d4f4c:	2003e5c0 	.word	0x2003e5c0
   d4f50:	2003e590 	.word	0x2003e590
   d4f54:	000d4105 	.word	0x000d4105
   d4f58:	2003e5a0 	.word	0x2003e5a0
   d4f5c:	2003e5fc 	.word	0x2003e5fc
   d4f60:	2003e594 	.word	0x2003e594
   d4f64:	000d7e7c 	.word	0x000d7e7c
   d4f68:	2003e598 	.word	0x2003e598
   d4f6c:	000d7de8 	.word	0x000d7de8
   d4f70:	00989680 	.word	0x00989680
   d4f74:	000d4f79 	.word	0x000d4f79

000d4f78 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d4f78:	4770      	bx	lr

000d4f7a <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d4f7a:	b510      	push	{r4, lr}
}
   d4f7c:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d4f7e:	4604      	mov	r4, r0
}
   d4f80:	f001 fea9 	bl	d6cd6 <_ZdlPvj>
   d4f84:	4620      	mov	r0, r4
   d4f86:	bd10      	pop	{r4, pc}

000d4f88 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d4f88:	b510      	push	{r4, lr}
   d4f8a:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d4f8c:	f100 0118 	add.w	r1, r0, #24
   d4f90:	68c0      	ldr	r0, [r0, #12]
   d4f92:	f000 fc5b 	bl	d584c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d4f96:	8a20      	ldrh	r0, [r4, #16]
   d4f98:	2100      	movs	r1, #0
}
   d4f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d4f9e:	f001 bdec 	b.w	d6b7a <digitalWrite>

000d4fa2 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d4fa2:	b510      	push	{r4, lr}
   d4fa4:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d4fa6:	2101      	movs	r1, #1
   d4fa8:	8a00      	ldrh	r0, [r0, #16]
   d4faa:	f001 fde6 	bl	d6b7a <digitalWrite>

	spi.endTransaction();
   d4fae:	68e0      	ldr	r0, [r4, #12]
}
   d4fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d4fb4:	f000 bc31 	b.w	d581a <_ZN8SPIClass14endTransactionEv>

000d4fb8 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fba:	461e      	mov	r6, r3
	beginTransaction();
   d4fbc:	6803      	ldr	r3, [r0, #0]
   d4fbe:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4fc0:	460f      	mov	r7, r1
   d4fc2:	4614      	mov	r4, r2
   d4fc4:	4605      	mov	r5, r0
	beginTransaction();
   d4fc6:	4798      	blx	r3

	if (numBytes > 1) {
   d4fc8:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d4fca:	bf88      	it	hi
   d4fcc:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d4fd0:	68e8      	ldr	r0, [r5, #12]
   d4fd2:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d4fd6:	f000 fca7 	bl	d5928 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d4fda:	4426      	add	r6, r4
   d4fdc:	42b4      	cmp	r4, r6
   d4fde:	d006      	beq.n	d4fee <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d4fe0:	68e8      	ldr	r0, [r5, #12]
   d4fe2:	2100      	movs	r1, #0
   d4fe4:	f000 fca0 	bl	d5928 <_ZN8SPIClass8transferEh>
   d4fe8:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4fec:	e7f6      	b.n	d4fdc <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d4fee:	682b      	ldr	r3, [r5, #0]
   d4ff0:	4628      	mov	r0, r5
   d4ff2:	699b      	ldr	r3, [r3, #24]
   d4ff4:	4798      	blx	r3

	return true;
}
   d4ff6:	2001      	movs	r0, #1
   d4ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ffa <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d4ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ffc:	461e      	mov	r6, r3
	beginTransaction();
   d4ffe:	6803      	ldr	r3, [r0, #0]
   d5000:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d5002:	460f      	mov	r7, r1
   d5004:	4614      	mov	r4, r2
   d5006:	4605      	mov	r5, r0
	beginTransaction();
   d5008:	4798      	blx	r3

	if (numBytes > 1) {
   d500a:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d500c:	bf88      	it	hi
   d500e:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d5012:	68e8      	ldr	r0, [r5, #12]
   d5014:	4639      	mov	r1, r7
   d5016:	f000 fc87 	bl	d5928 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d501a:	4426      	add	r6, r4
   d501c:	42b4      	cmp	r4, r6
   d501e:	d005      	beq.n	d502c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d5020:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5024:	68e8      	ldr	r0, [r5, #12]
   d5026:	f000 fc7f 	bl	d5928 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d502a:	e7f7      	b.n	d501c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d502c:	682b      	ldr	r3, [r5, #0]
   d502e:	4628      	mov	r0, r5
   d5030:	699b      	ldr	r3, [r3, #24]
   d5032:	4798      	blx	r3

	return true;
}
   d5034:	2001      	movs	r0, #1
   d5036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5038 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   d5038:	2200      	movs	r2, #0
   d503a:	7002      	strb	r2, [r0, #0]
   d503c:	7042      	strb	r2, [r0, #1]
   d503e:	7082      	strb	r2, [r0, #2]
   d5040:	70c2      	strb	r2, [r0, #3]
   d5042:	7102      	strb	r2, [r0, #4]
   d5044:	7142      	strb	r2, [r0, #5]
   d5046:	7182      	strb	r2, [r0, #6]
   d5048:	71c2      	strb	r2, [r0, #7]
   d504a:	7202      	strb	r2, [r0, #8]
   d504c:	7242      	strb	r2, [r0, #9]
   d504e:	7282      	strb	r2, [r0, #10]
}
   d5050:	4770      	bx	lr

000d5052 <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   d5052:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   d5054:	f041 0107 	orr.w	r1, r1, #7
   d5058:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   d505a:	7102      	strb	r2, [r0, #4]
   d505c:	7082      	strb	r2, [r0, #2]
   d505e:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   d5060:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   d5062:	7242      	strb	r2, [r0, #9]
}
   d5064:	4770      	bx	lr
	...

000d5068 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d5068:	4a02      	ldr	r2, [pc, #8]	; (d5074 <_ZN6LIS3DHC1Ei+0xc>)
   d506a:	e9c0 2100 	strd	r2, r1, [r0]
   d506e:	2200      	movs	r2, #0
   d5070:	7202      	strb	r2, [r0, #8]
}
   d5072:	4770      	bx	lr
   d5074:	000d7e60 	.word	0x000d7e60

000d5078 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d5078:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d507a:	6803      	ldr	r3, [r0, #0]
   d507c:	aa01      	add	r2, sp, #4
   d507e:	68dc      	ldr	r4, [r3, #12]
   d5080:	2301      	movs	r3, #1
   d5082:	47a0      	blx	r4
}
   d5084:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d5088:	b002      	add	sp, #8
   d508a:	bd10      	pop	{r4, pc}

000d508c <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d508c:	b538      	push	{r3, r4, r5, lr}
   d508e:	4605      	mov	r5, r0
   d5090:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d5092:	210f      	movs	r1, #15
   d5094:	4628      	mov	r0, r5
   d5096:	f7ff ffef 	bl	d5078 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d509a:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d509c:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d50a0:	d004      	beq.n	d50ac <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d50a2:	f000 fec7 	bl	d5e34 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d50a6:	3c01      	subs	r4, #1
   d50a8:	d1f3      	bne.n	d5092 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d50aa:	4620      	mov	r0, r4
}
   d50ac:	bd38      	pop	{r3, r4, r5, pc}

000d50ae <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d50ae:	b510      	push	{r4, lr}
   d50b0:	4604      	mov	r4, r0
	spi.begin(ss);
   d50b2:	8a01      	ldrh	r1, [r0, #16]
   d50b4:	68c0      	ldr	r0, [r0, #12]
   d50b6:	f000 fb9d 	bl	d57f4 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d50ba:	4620      	mov	r0, r4
}
   d50bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d50c0:	f7ff bfe4 	b.w	d508c <_ZN6LIS3DH9hasDeviceEv>

000d50c4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d50c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d50c6:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d50c8:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d50ca:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d50cc:	f7ff ffd4 	bl	d5078 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   d50d0:	f000 0008 	and.w	r0, r0, #8
   d50d4:	2800      	cmp	r0, #0
   d50d6:	bf14      	ite	ne
   d50d8:	2601      	movne	r6, #1
   d50da:	2600      	moveq	r6, #0
	if (hasData) {
   d50dc:	d01b      	beq.n	d5116 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   d50de:	682b      	ldr	r3, [r5, #0]
   d50e0:	466a      	mov	r2, sp
   d50e2:	68df      	ldr	r7, [r3, #12]
   d50e4:	2128      	movs	r1, #40	; 0x28
   d50e6:	2306      	movs	r3, #6
   d50e8:	4628      	mov	r0, r5
   d50ea:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   d50ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
   d50f0:	f89d 3000 	ldrb.w	r3, [sp]
   d50f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d50f8:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   d50fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
   d50fe:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d5102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5106:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   d5108:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d510c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5114:	80a3      	strh	r3, [r4, #4]
}
   d5116:	4630      	mov	r0, r6
   d5118:	b003      	add	sp, #12
   d511a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d511c <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   d511c:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   d511e:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   d5120:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   d5124:	691c      	ldr	r4, [r3, #16]
   d5126:	aa01      	add	r2, sp, #4
   d5128:	2301      	movs	r3, #1
   d512a:	47a0      	blx	r4
}
   d512c:	b002      	add	sp, #8
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   d5130:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   d5132:	6803      	ldr	r3, [r0, #0]
   d5134:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   d5136:	4604      	mov	r4, r0
   d5138:	460d      	mov	r5, r1
	if (!hasDevice()) {
   d513a:	4798      	blx	r3
   d513c:	4606      	mov	r6, r0
   d513e:	b930      	cbnz	r0, d514e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   d5140:	f001 f818 	bl	d6174 <_Z16_fetch_usbserialv>
   d5144:	4927      	ldr	r1, [pc, #156]	; (d51e4 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   d5146:	f000 fdde 	bl	d5d06 <_ZN5Print7printlnEPKc>
}
   d514a:	4630      	mov	r0, r6
   d514c:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   d514e:	782a      	ldrb	r2, [r5, #0]
   d5150:	2120      	movs	r1, #32
   d5152:	4620      	mov	r0, r4
   d5154:	f7ff ffe2 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   d5158:	786a      	ldrb	r2, [r5, #1]
   d515a:	2121      	movs	r1, #33	; 0x21
   d515c:	4620      	mov	r0, r4
   d515e:	f7ff ffdd 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   d5162:	78aa      	ldrb	r2, [r5, #2]
   d5164:	2122      	movs	r1, #34	; 0x22
   d5166:	4620      	mov	r0, r4
   d5168:	f7ff ffd8 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   d516c:	78ea      	ldrb	r2, [r5, #3]
   d516e:	2123      	movs	r1, #35	; 0x23
   d5170:	4620      	mov	r0, r4
   d5172:	f7ff ffd3 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   d5176:	792a      	ldrb	r2, [r5, #4]
   d5178:	2124      	movs	r1, #36	; 0x24
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff ffce 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   d5180:	796a      	ldrb	r2, [r5, #5]
   d5182:	2125      	movs	r1, #37	; 0x25
   d5184:	4620      	mov	r0, r4
   d5186:	f7ff ffc9 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   d518a:	79ab      	ldrb	r3, [r5, #6]
   d518c:	b11b      	cbz	r3, d5196 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   d518e:	2126      	movs	r1, #38	; 0x26
   d5190:	4620      	mov	r0, r4
   d5192:	f7ff ff71 	bl	d5078 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   d5196:	7aaa      	ldrb	r2, [r5, #10]
   d5198:	212e      	movs	r1, #46	; 0x2e
   d519a:	4620      	mov	r0, r4
   d519c:	f7ff ffbe 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   d51a0:	78ab      	ldrb	r3, [r5, #2]
   d51a2:	065b      	lsls	r3, r3, #25
   d51a4:	d5d1      	bpl.n	d514a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   d51a6:	79ea      	ldrb	r2, [r5, #7]
   d51a8:	2132      	movs	r1, #50	; 0x32
   d51aa:	4620      	mov	r0, r4
   d51ac:	f7ff ffb6 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   d51b0:	7a2a      	ldrb	r2, [r5, #8]
   d51b2:	2133      	movs	r1, #51	; 0x33
   d51b4:	4620      	mov	r0, r4
   d51b6:	f7ff ffb1 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   d51ba:	6863      	ldr	r3, [r4, #4]
   d51bc:	2b00      	cmp	r3, #0
   d51be:	db0a      	blt.n	d51d6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   d51c0:	7a6a      	ldrb	r2, [r5, #9]
   d51c2:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   d51c4:	4620      	mov	r0, r4
   d51c6:	2130      	movs	r1, #48	; 0x30
   d51c8:	f7ff ffa8 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   d51cc:	2131      	movs	r1, #49	; 0x31
   d51ce:	4620      	mov	r0, r4
   d51d0:	f7ff ff52 	bl	d5078 <_ZN6LIS3DH13readRegister8Eh>
   d51d4:	e7b9      	b.n	d514a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   d51d6:	2200      	movs	r2, #0
   d51d8:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   d51da:	2130      	movs	r1, #48	; 0x30
   d51dc:	4620      	mov	r0, r4
   d51de:	f7ff ff9d 	bl	d511c <_ZN6LIS3DH14writeRegister8Ehh>
   d51e2:	e7b2      	b.n	d514a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   d51e4:	000d7e47 	.word	0x000d7e47

000d51e8 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d51e8:	f000 be24 	b.w	d5e34 <delay>

000d51ec <_Z11BlynkMillisv>:
   d51ec:	f000 b880 	b.w	d52f0 <HAL_Timer_Get_Milli_Seconds>

000d51f0 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d51f0:	4770      	bx	lr

000d51f2 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d51f2:	4770      	bx	lr

000d51f4 <BlynkNoOpCbk>:
{}
   d51f4:	4770      	bx	lr
	...

000d51f8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d51f8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d51fa:	bf5a      	itte	pl
   d51fc:	4b02      	ldrpl	r3, [pc, #8]	; (d5208 <GetReadHandler+0x10>)
   d51fe:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d5202:	2000      	movmi	r0, #0
#endif
}
   d5204:	4770      	bx	lr
   d5206:	bf00      	nop
   d5208:	000d7e98 	.word	0x000d7e98

000d520c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d520c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d520e:	bf5a      	itte	pl
   d5210:	4b02      	ldrpl	r3, [pc, #8]	; (d521c <GetWriteHandler+0x10>)
   d5212:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d5216:	2000      	movmi	r0, #0
#endif
}
   d5218:	4770      	bx	lr
   d521a:	bf00      	nop
   d521c:	000d8098 	.word	0x000d8098

000d5220 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <netdb_freeaddrinfo+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	689b      	ldr	r3, [r3, #8]
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030268 	.word	0x00030268

000d5230 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <netdb_getaddrinfo+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	68db      	ldr	r3, [r3, #12]
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030268 	.word	0x00030268

000d5240 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <HAL_Validate_Pin_Function+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	685b      	ldr	r3, [r3, #4]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	0003022c 	.word	0x0003022c

000d5250 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <HAL_Pin_Mode+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	689b      	ldr	r3, [r3, #8]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	0003022c 	.word	0x0003022c

000d5260 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <HAL_Get_Pin_Mode+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	68db      	ldr	r3, [r3, #12]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	0003022c 	.word	0x0003022c

000d5270 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <HAL_GPIO_Write+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	691b      	ldr	r3, [r3, #16]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	0003022c 	.word	0x0003022c

000d5280 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <HAL_GPIO_Read+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	695b      	ldr	r3, [r3, #20]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	0003022c 	.word	0x0003022c

000d5290 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <HAL_DAC_Write+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003022c 	.word	0x0003022c

000d52a0 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <hal_adc_read+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	0003022c 	.word	0x0003022c

000d52b0 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <hal_pwm_write_ext+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003022c 	.word	0x0003022c

000d52c0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <if_index_to_name+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	695b      	ldr	r3, [r3, #20]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003026c 	.word	0x0003026c

000d52d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_RNG_GetRandomNumber+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	685b      	ldr	r3, [r3, #4]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	00030218 	.word	0x00030218

000d52e0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_Delay_Microseconds+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	68db      	ldr	r3, [r3, #12]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	00030218 	.word	0x00030218

000d52f0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	695b      	ldr	r3, [r3, #20]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	00030218 	.word	0x00030218

000d5300 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <os_mutex_recursive_create+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	00030248 	.word	0x00030248

000d5310 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <os_mutex_recursive_destroy+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030248 	.word	0x00030248

000d5320 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <inet_inet_ntop+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	695b      	ldr	r3, [r3, #20]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030264 	.word	0x00030264

000d5330 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <inet_htonl+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	6a1b      	ldr	r3, [r3, #32]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030264 	.word	0x00030264

000d5340 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <inet_htons+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030264 	.word	0x00030264

000d5350 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <hal_usart_init+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	681b      	ldr	r3, [r3, #0]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	0003023c 	.word	0x0003023c

000d5360 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <hal_usart_write+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	68db      	ldr	r3, [r3, #12]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	0003023c 	.word	0x0003023c

000d5370 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <hal_usart_available+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	691b      	ldr	r3, [r3, #16]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	0003023c 	.word	0x0003023c

000d5380 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <hal_usart_read+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	695b      	ldr	r3, [r3, #20]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	0003023c 	.word	0x0003023c

000d5390 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <hal_usart_peek+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	699b      	ldr	r3, [r3, #24]
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	0003023c 	.word	0x0003023c

000d53a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <hal_usart_flush+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	69db      	ldr	r3, [r3, #28]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	0003023c 	.word	0x0003023c

000d53b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <hal_usart_is_enabled+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	6a1b      	ldr	r3, [r3, #32]
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	0003023c 	.word	0x0003023c

000d53c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <hal_usart_available_data_for_write+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	0003023c 	.word	0x0003023c

000d53d0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <hal_i2c_write+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	6a1b      	ldr	r3, [r3, #32]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030228 	.word	0x00030228

000d53e0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <hal_i2c_available+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030228 	.word	0x00030228

000d53f0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <hal_i2c_read+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030228 	.word	0x00030228

000d5400 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <hal_i2c_peek+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030228 	.word	0x00030228

000d5410 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <hal_i2c_flush+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	00030228 	.word	0x00030228

000d5420 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <hal_i2c_is_enabled+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	00030228 	.word	0x00030228

000d5430 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <hal_i2c_init+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	00030228 	.word	0x00030228

000d5440 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <sock_setsockopt+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	699b      	ldr	r3, [r3, #24]
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	00030238 	.word	0x00030238

000d5450 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <sock_close+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	69db      	ldr	r3, [r3, #28]
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030238 	.word	0x00030238

000d5460 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <sock_connect+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	6a1b      	ldr	r3, [r3, #32]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030238 	.word	0x00030238

000d5470 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <sock_recv+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	00030238 	.word	0x00030238

000d5480 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <sock_send+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	00030238 	.word	0x00030238

000d5490 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <sock_socket+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	00030238 	.word	0x00030238

000d54a0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <hal_spi_begin+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	681b      	ldr	r3, [r3, #0]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	00030230 	.word	0x00030230

000d54b0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <hal_spi_transfer+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	695b      	ldr	r3, [r3, #20]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	00030230 	.word	0x00030230

000d54c0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <hal_spi_init+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	69db      	ldr	r3, [r3, #28]
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	00030230 	.word	0x00030230

000d54d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <hal_spi_is_enabled+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6a1b      	ldr	r3, [r3, #32]
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030230 	.word	0x00030230

000d54e0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <hal_spi_info+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030230 	.word	0x00030230

000d54f0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <hal_spi_set_settings+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030230 	.word	0x00030230

000d5500 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <hal_spi_acquire+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	00030230 	.word	0x00030230

000d5510 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <hal_spi_release+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	00030230 	.word	0x00030230

000d5520 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <HAL_USB_USART_Init+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	681b      	ldr	r3, [r3, #0]
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	0003024c 	.word	0x0003024c

000d5530 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <HAL_USB_USART_Begin+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	685b      	ldr	r3, [r3, #4]
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	0003024c 	.word	0x0003024c

000d5540 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <HAL_USB_USART_Available_Data+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	691b      	ldr	r3, [r3, #16]
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	0003024c 	.word	0x0003024c

000d5550 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	695b      	ldr	r3, [r3, #20]
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	0003024c 	.word	0x0003024c

000d5560 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <HAL_USB_USART_Receive_Data+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	699b      	ldr	r3, [r3, #24]
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	0003024c 	.word	0x0003024c

000d5570 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <HAL_USB_USART_Send_Data+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	69db      	ldr	r3, [r3, #28]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	0003024c 	.word	0x0003024c

000d5580 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <HAL_USB_USART_Flush_Data+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	6a1b      	ldr	r3, [r3, #32]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	0003024c 	.word	0x0003024c

000d5590 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <panic_+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	00030260 	.word	0x00030260

000d55a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <log_message+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	00030260 	.word	0x00030260

000d55b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <set_system_mode+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	685b      	ldr	r3, [r3, #4]
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	00030220 	.word	0x00030220

000d55c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <system_delay_ms+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	695b      	ldr	r3, [r3, #20]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	00030220 	.word	0x00030220

000d55d0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <system_thread_set_state+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	00030220 	.word	0x00030220

000d55e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b03      	ldr	r3, [pc, #12]	; (d55f0 <system_ctrl_set_app_request_handler+0x10>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55ea:	9301      	str	r3, [sp, #4]
   d55ec:	bd08      	pop	{r3, pc}
   d55ee:	0000      	.short	0x0000
   d55f0:	00030220 	.word	0x00030220

000d55f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b03      	ldr	r3, [pc, #12]	; (d5604 <system_ctrl_set_result+0x10>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55fe:	9301      	str	r3, [sp, #4]
   d5600:	bd08      	pop	{r3, pc}
   d5602:	0000      	.short	0x0000
   d5604:	00030220 	.word	0x00030220

000d5608 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <network_connect+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	685b      	ldr	r3, [r3, #4]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030240 	.word	0x00030240

000d5618 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <network_connecting+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	689b      	ldr	r3, [r3, #8]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030240 	.word	0x00030240

000d5628 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <network_disconnect+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	68db      	ldr	r3, [r3, #12]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030240 	.word	0x00030240

000d5638 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <network_ready+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	691b      	ldr	r3, [r3, #16]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030240 	.word	0x00030240

000d5648 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <network_on+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	695b      	ldr	r3, [r3, #20]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030240 	.word	0x00030240

000d5658 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <network_off+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	699b      	ldr	r3, [r3, #24]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030240 	.word	0x00030240

000d5668 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <network_listen+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	69db      	ldr	r3, [r3, #28]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030240 	.word	0x00030240

000d5678 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <network_listening+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6a1b      	ldr	r3, [r3, #32]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030240 	.word	0x00030240

000d5688 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <network_set_listen_timeout+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030240 	.word	0x00030240

000d5698 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <network_get_listen_timeout+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030240 	.word	0x00030240

000d56a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <network_is_on+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030240 	.word	0x00030240

000d56b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <network_is_off+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030240 	.word	0x00030240

000d56c8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <spark_process+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	689b      	ldr	r3, [r3, #8]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030244 	.word	0x00030244

000d56d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030244 	.word	0x00030244

000d56e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <malloc+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	681b      	ldr	r3, [r3, #0]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	0003021c 	.word	0x0003021c

000d56f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <free+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	685b      	ldr	r3, [r3, #4]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	0003021c 	.word	0x0003021c

000d5708 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <realloc+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	689b      	ldr	r3, [r3, #8]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	0003021c 	.word	0x0003021c

000d5718 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <snprintf+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	69db      	ldr	r3, [r3, #28]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	0003021c 	.word	0x0003021c

000d5728 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <vsnprintf+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	0003021c 	.word	0x0003021c

000d5738 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <__errno+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	0003021c 	.word	0x0003021c

000d5748 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <newlib_impure_ptr_callback+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	0003021c 	.word	0x0003021c

000d5758 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5758:	2200      	movs	r2, #0
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	4611      	mov	r1, r2
   d575e:	f7ff bf8b 	b.w	d5678 <network_listening>

000d5762 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5762:	2200      	movs	r2, #0
   d5764:	6840      	ldr	r0, [r0, #4]
   d5766:	4611      	mov	r1, r2
   d5768:	f7ff bf96 	b.w	d5698 <network_get_listen_timeout>

000d576c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d576c:	6840      	ldr	r0, [r0, #4]
   d576e:	2200      	movs	r2, #0
   d5770:	f7ff bf8a 	b.w	d5688 <network_set_listen_timeout>

000d5774 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	2200      	movs	r2, #0
   d5778:	f081 0101 	eor.w	r1, r1, #1
   d577c:	f7ff bf74 	b.w	d5668 <network_listen>

000d5780 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5780:	2300      	movs	r3, #0
   d5782:	6840      	ldr	r0, [r0, #4]
   d5784:	461a      	mov	r2, r3
   d5786:	4619      	mov	r1, r3
   d5788:	f7ff bf66 	b.w	d5658 <network_off>

000d578c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d578c:	2300      	movs	r3, #0
   d578e:	6840      	ldr	r0, [r0, #4]
   d5790:	461a      	mov	r2, r3
   d5792:	4619      	mov	r1, r3
   d5794:	f7ff bf58 	b.w	d5648 <network_on>

000d5798 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5798:	2200      	movs	r2, #0
   d579a:	6840      	ldr	r0, [r0, #4]
   d579c:	4611      	mov	r1, r2
   d579e:	f7ff bf4b 	b.w	d5638 <network_ready>

000d57a2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d57a2:	2200      	movs	r2, #0
   d57a4:	6840      	ldr	r0, [r0, #4]
   d57a6:	4611      	mov	r1, r2
   d57a8:	f7ff bf36 	b.w	d5618 <network_connecting>

000d57ac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57ac:	6840      	ldr	r0, [r0, #4]
   d57ae:	2200      	movs	r2, #0
   d57b0:	2102      	movs	r1, #2
   d57b2:	f7ff bf39 	b.w	d5628 <network_disconnect>

000d57b6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d57b6:	2300      	movs	r3, #0
   d57b8:	6840      	ldr	r0, [r0, #4]
   d57ba:	461a      	mov	r2, r3
   d57bc:	f7ff bf24 	b.w	d5608 <network_connect>

000d57c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d57c0:	4b02      	ldr	r3, [pc, #8]	; (d57cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d57c2:	2203      	movs	r2, #3
   d57c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d57c6:	4a02      	ldr	r2, [pc, #8]	; (d57d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d57c8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d57ca:	4770      	bx	lr
   d57cc:	2003e650 	.word	0x2003e650
   d57d0:	000d82a0 	.word	0x000d82a0

000d57d4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d57d4:	2100      	movs	r1, #0
   d57d6:	f7ff be93 	b.w	d5500 <hal_spi_acquire>

000d57da <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d57da:	2100      	movs	r1, #0
   d57dc:	f7ff be98 	b.w	d5510 <hal_spi_release>

000d57e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d57e0:	b510      	push	{r4, lr}
   d57e2:	4604      	mov	r4, r0
   d57e4:	4608      	mov	r0, r1
{
    _spi = spi;
   d57e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d57e8:	f7ff fe6a 	bl	d54c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d57ec:	2300      	movs	r3, #0
   d57ee:	6063      	str	r3, [r4, #4]
}
   d57f0:	4620      	mov	r0, r4
   d57f2:	bd10      	pop	{r4, pc}

000d57f4 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d57f4:	b513      	push	{r0, r1, r4, lr}
   d57f6:	4604      	mov	r4, r0
    if (!lock())
   d57f8:	7800      	ldrb	r0, [r0, #0]
{
   d57fa:	9101      	str	r1, [sp, #4]
    if (!lock())
   d57fc:	f7ff ffea 	bl	d57d4 <_ZN8SPIClass4lockEv.isra.0>
   d5800:	9901      	ldr	r1, [sp, #4]
   d5802:	b940      	cbnz	r0, d5816 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d5804:	7820      	ldrb	r0, [r4, #0]
   d5806:	f7ff fe4b 	bl	d54a0 <hal_spi_begin>
        unlock();
   d580a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d580c:	b002      	add	sp, #8
   d580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5812:	f7ff bfe2 	b.w	d57da <_ZN8SPIClass6unlockEv.isra.0>
}
   d5816:	b002      	add	sp, #8
   d5818:	bd10      	pop	{r4, pc}

000d581a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d581a:	7800      	ldrb	r0, [r0, #0]
   d581c:	f7ff bfdd 	b.w	d57da <_ZN8SPIClass6unlockEv.isra.0>

000d5820 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5820:	0840      	lsrs	r0, r0, #1
{
   d5822:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5824:	6018      	str	r0, [r3, #0]
   d5826:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5828:	6818      	ldr	r0, [r3, #0]
   d582a:	4288      	cmp	r0, r1
   d582c:	b2e5      	uxtb	r5, r4
   d582e:	d906      	bls.n	d583e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5830:	3401      	adds	r4, #1
   d5832:	2c08      	cmp	r4, #8
   d5834:	d002      	beq.n	d583c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5836:	0840      	lsrs	r0, r0, #1
   d5838:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d583a:	e7f5      	b.n	d5828 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d583c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5840:	5d5b      	ldrb	r3, [r3, r5]
   d5842:	7013      	strb	r3, [r2, #0]
}
   d5844:	bd30      	pop	{r4, r5, pc}
   d5846:	bf00      	nop
   d5848:	000d82d4 	.word	0x000d82d4

000d584c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d584c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5850:	4606      	mov	r6, r0
   d5852:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5854:	7800      	ldrb	r0, [r0, #0]
{
   d5856:	460c      	mov	r4, r1
    CHECK(lock());
   d5858:	f7ff ffbc 	bl	d57d4 <_ZN8SPIClass4lockEv.isra.0>
   d585c:	2800      	cmp	r0, #0
   d585e:	db1b      	blt.n	d5898 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5860:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5862:	2214      	movs	r2, #20
   d5864:	2100      	movs	r1, #0
   d5866:	a809      	add	r0, sp, #36	; 0x24
   d5868:	f002 f980 	bl	d7b6c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d586c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d586e:	2200      	movs	r2, #0
   d5870:	a909      	add	r1, sp, #36	; 0x24
   d5872:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5874:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5878:	f7ff fe32 	bl	d54e0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d587c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5880:	b113      	cbz	r3, d5888 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5882:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5886:	b155      	cbz	r5, d589e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5888:	2700      	movs	r7, #0
   d588a:	46b9      	mov	r9, r7
   d588c:	46b8      	mov	r8, r7
   d588e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5890:	7923      	ldrb	r3, [r4, #4]
   d5892:	b15d      	cbz	r5, d58ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5894:	b1c3      	cbz	r3, d58c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5896:	2000      	movs	r0, #0
}
   d5898:	b00f      	add	sp, #60	; 0x3c
   d589a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d589e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d58a2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d58a6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d58aa:	e7f1      	b.n	d5890 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d58ac:	2b00      	cmp	r3, #0
   d58ae:	d135      	bne.n	d591c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d58b0:	68a3      	ldr	r3, [r4, #8]
   d58b2:	4543      	cmp	r3, r8
   d58b4:	d108      	bne.n	d58c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d58b6:	f88d 9020 	strb.w	r9, [sp, #32]
   d58ba:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d58be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d58c2:	89a3      	ldrh	r3, [r4, #12]
   d58c4:	429a      	cmp	r2, r3
   d58c6:	d0e6      	beq.n	d5896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d58c8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d58ca:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d58cc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d58d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d58d2:	ab04      	add	r3, sp, #16
   d58d4:	f10d 020f 	add.w	r2, sp, #15
   d58d8:	f7ff ffa2 	bl	d5820 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d58dc:	7921      	ldrb	r1, [r4, #4]
   d58de:	b985      	cbnz	r5, d5902 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d58e0:	b989      	cbnz	r1, d5906 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d58e2:	68a3      	ldr	r3, [r4, #8]
   d58e4:	4543      	cmp	r3, r8
   d58e6:	d30e      	bcc.n	d5906 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d58e8:	f88d 9020 	strb.w	r9, [sp, #32]
   d58ec:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d58f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d58f4:	89a3      	ldrh	r3, [r4, #12]
   d58f6:	429a      	cmp	r2, r3
   d58f8:	d105      	bne.n	d5906 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d58fa:	9b04      	ldr	r3, [sp, #16]
   d58fc:	4543      	cmp	r3, r8
   d58fe:	d102      	bne.n	d5906 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5900:	e7c9      	b.n	d5896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5902:	2900      	cmp	r1, #0
   d5904:	d1f9      	bne.n	d58fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5906:	2300      	movs	r3, #0
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	7b63      	ldrb	r3, [r4, #13]
   d590c:	9300      	str	r3, [sp, #0]
   d590e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5912:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5914:	7830      	ldrb	r0, [r6, #0]
   d5916:	f7ff fdeb 	bl	d54f0 <hal_spi_set_settings>
   d591a:	e7bc      	b.n	d5896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d591c:	e9cd 5500 	strd	r5, r5, [sp]
   d5920:	462b      	mov	r3, r5
   d5922:	462a      	mov	r2, r5
   d5924:	2101      	movs	r1, #1
   d5926:	e7f5      	b.n	d5914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5928 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5928:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d592a:	7800      	ldrb	r0, [r0, #0]
   d592c:	f7ff fdc0 	bl	d54b0 <hal_spi_transfer>
}
   d5930:	b2c0      	uxtb	r0, r0
   d5932:	bd08      	pop	{r3, pc}

000d5934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5934:	b510      	push	{r4, lr}
   d5936:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5938:	6800      	ldr	r0, [r0, #0]
   d593a:	b118      	cbz	r0, d5944 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d593c:	f7ff fedc 	bl	d56f8 <free>
            wakeupSource_ = nullptr;
   d5940:	2300      	movs	r3, #0
   d5942:	6023      	str	r3, [r4, #0]
        }
    }
   d5944:	bd10      	pop	{r4, pc}

000d5946 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5946:	b510      	push	{r4, lr}
   d5948:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d594a:	f7ff fff3 	bl	d5934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d594e:	4620      	mov	r0, r4
   d5950:	bd10      	pop	{r4, pc}
	...

000d5954 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5954:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5956:	4b09      	ldr	r3, [pc, #36]	; (d597c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5958:	4c09      	ldr	r4, [pc, #36]	; (d5980 <_GLOBAL__sub_I_System+0x2c>)
   d595a:	2202      	movs	r2, #2
   d595c:	2000      	movs	r0, #0
   d595e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5960:	4b08      	ldr	r3, [pc, #32]	; (d5984 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5962:	6020      	str	r0, [r4, #0]
   d5964:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5966:	71a0      	strb	r0, [r4, #6]
   d5968:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d596a:	f7ff fe21 	bl	d55b0 <set_system_mode>
SystemClass System;
   d596e:	4620      	mov	r0, r4
   d5970:	4a05      	ldr	r2, [pc, #20]	; (d5988 <_GLOBAL__sub_I_System+0x34>)
   d5972:	4906      	ldr	r1, [pc, #24]	; (d598c <_GLOBAL__sub_I_System+0x38>)
   d5974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5978:	f001 b9a8 	b.w	d6ccc <__aeabi_atexit>
   d597c:	2003e664 	.word	0x2003e664
   d5980:	2003e658 	.word	0x2003e658
   d5984:	ffff0000 	.word	0xffff0000
   d5988:	2003e590 	.word	0x2003e590
   d598c:	000d5947 	.word	0x000d5947

000d5990 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5990:	b510      	push	{r4, lr}
   d5992:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5994:	f002 f928 	bl	d7be8 <strlen>
   d5998:	3801      	subs	r0, #1
   d599a:	1823      	adds	r3, r4, r0
   d599c:	4620      	mov	r0, r4
	while(i<j){
   d599e:	4283      	cmp	r3, r0
   d59a0:	d906      	bls.n	d59b0 <_Z11str_reversePc+0x20>
		c = *i;
   d59a2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d59a4:	7819      	ldrb	r1, [r3, #0]
   d59a6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d59aa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d59ae:	e7f6      	b.n	d599e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d59b0:	bd10      	pop	{r4, pc}

000d59b2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d59b2:	b570      	push	{r4, r5, r6, lr}
   d59b4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d59b6:	1e91      	subs	r1, r2, #2
   d59b8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d59ba:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d59bc:	d822      	bhi.n	d5a04 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d59be:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d59c0:	b16d      	cbz	r5, d59de <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d59c2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d59c6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d59ca:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d59cc:	2d09      	cmp	r5, #9
                *ptr += '0';
   d59ce:	bf94      	ite	ls
   d59d0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d59d2:	3157      	addhi	r1, #87	; 0x57
   d59d4:	b2c9      	uxtb	r1, r1
   d59d6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d59da:	4635      	mov	r5, r6
	while(a){
   d59dc:	e7f0      	b.n	d59c0 <ultoa+0xe>
   d59de:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d59e0:	4423      	add	r3, r4
            *ptr++ = '0';
   d59e2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d59e4:	4293      	cmp	r3, r2
   d59e6:	d902      	bls.n	d59ee <ultoa+0x3c>
            *ptr++ = '0';
   d59e8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d59ec:	e7fa      	b.n	d59e4 <ultoa+0x32>
   d59ee:	1a1a      	subs	r2, r3, r0
   d59f0:	4283      	cmp	r3, r0
   d59f2:	bf38      	it	cc
   d59f4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d59f6:	2300      	movs	r3, #0
   d59f8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d59fa:	4620      	mov	r0, r4
   d59fc:	f7ff ffc8 	bl	d5990 <_Z11str_reversePc>
	return buffer;
   d5a00:	4620      	mov	r0, r4
}
   d5a02:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5a04:	2000      	movs	r0, #0
   d5a06:	e7fc      	b.n	d5a02 <ultoa+0x50>

000d5a08 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5a08:	b570      	push	{r4, r5, r6, lr}
   d5a0a:	b086      	sub	sp, #24
   d5a0c:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5a0e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5a10:	4668      	mov	r0, sp
   d5a12:	f000 fb43 	bl	d609c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a18:	1d34      	adds	r4, r6, #4
   d5a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a1c:	682b      	ldr	r3, [r5, #0]
   d5a1e:	7023      	strb	r3, [r4, #0]
    }
   d5a20:	4630      	mov	r0, r6
   d5a22:	b006      	add	sp, #24
   d5a24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a28 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a2c:	ec57 6b10 	vmov	r6, r7, d0
   d5a30:	4680      	mov	r8, r0
   d5a32:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d5a34:	ee10 0a10 	vmov	r0, s0
   d5a38:	2200      	movs	r2, #0
   d5a3a:	2300      	movs	r3, #0
   d5a3c:	4639      	mov	r1, r7
   d5a3e:	f001 fe8f 	bl	d7760 <__aeabi_dcmplt>
   d5a42:	b128      	cbz	r0, d5a50 <_Z4dtoadhPc+0x28>
        val = -val;
   d5a44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d5a48:	461f      	mov	r7, r3
        *sout++ = '-';
   d5a4a:	232d      	movs	r3, #45	; 0x2d
   d5a4c:	f804 3b01 	strb.w	r3, [r4], #1
   d5a50:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5a52:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5a56:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5a58:	b2d9      	uxtb	r1, r3
   d5a5a:	4588      	cmp	r8, r1
   d5a5c:	d903      	bls.n	d5a66 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d5a5e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d5a62:	3301      	adds	r3, #1
   d5a64:	e7f8      	b.n	d5a58 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d5a66:	4648      	mov	r0, r9
   d5a68:	f001 fb9e 	bl	d71a8 <__aeabi_i2d>
   d5a6c:	4632      	mov	r2, r6
   d5a6e:	463b      	mov	r3, r7
   d5a70:	f001 fc04 	bl	d727c <__aeabi_dmul>
   d5a74:	4606      	mov	r6, r0
   d5a76:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5a78:	f001 fed2 	bl	d7820 <__aeabi_d2ulz>
   d5a7c:	4605      	mov	r5, r0
   d5a7e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5a80:	f001 fbc6 	bl	d7210 <__aeabi_ul2d>
   d5a84:	4602      	mov	r2, r0
   d5a86:	460b      	mov	r3, r1
   d5a88:	4630      	mov	r0, r6
   d5a8a:	4639      	mov	r1, r7
   d5a8c:	f001 fa3e 	bl	d6f0c <__aeabi_dsub>
   d5a90:	4b13      	ldr	r3, [pc, #76]	; (d5ae0 <_Z4dtoadhPc+0xb8>)
   d5a92:	2200      	movs	r2, #0
   d5a94:	f001 fe78 	bl	d7788 <__aeabi_dcmpge>
   d5a98:	b110      	cbz	r0, d5aa0 <_Z4dtoadhPc+0x78>
        fixed++;
   d5a9a:	3501      	adds	r5, #1
   d5a9c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5aa0:	464a      	mov	r2, r9
   d5aa2:	4628      	mov	r0, r5
   d5aa4:	17d3      	asrs	r3, r2, #31
   d5aa6:	4651      	mov	r1, sl
   d5aa8:	f001 fea2 	bl	d77f0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5aac:	2301      	movs	r3, #1
   d5aae:	4615      	mov	r5, r2
   d5ab0:	4621      	mov	r1, r4
   d5ab2:	220a      	movs	r2, #10
   d5ab4:	f7ff ff7d 	bl	d59b2 <ultoa>
    if (prec) {
   d5ab8:	f1b8 0f00 	cmp.w	r8, #0
   d5abc:	d00d      	beq.n	d5ada <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5abe:	4620      	mov	r0, r4
   d5ac0:	f002 f892 	bl	d7be8 <strlen>
        *sout++ = '.';
   d5ac4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d5ac6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5ac8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5aca:	220a      	movs	r2, #10
   d5acc:	4643      	mov	r3, r8
   d5ace:	4628      	mov	r0, r5
   d5ad0:	3101      	adds	r1, #1
    }
}
   d5ad2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d5ad6:	f7ff bf6c 	b.w	d59b2 <ultoa>
}
   d5ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ade:	bf00      	nop
   d5ae0:	3fe00000 	.word	0x3fe00000

000d5ae4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ae4:	b510      	push	{r4, lr}
   d5ae6:	4604      	mov	r4, r0
{
	free(buffer);
   d5ae8:	6800      	ldr	r0, [r0, #0]
   d5aea:	f7ff fe05 	bl	d56f8 <free>
}
   d5aee:	4620      	mov	r0, r4
   d5af0:	bd10      	pop	{r4, pc}

000d5af2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5af2:	b510      	push	{r4, lr}
   d5af4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5af6:	6800      	ldr	r0, [r0, #0]
   d5af8:	b108      	cbz	r0, d5afe <_ZN6String10invalidateEv+0xc>
   d5afa:	f7ff fdfd 	bl	d56f8 <free>
	buffer = NULL;
   d5afe:	2300      	movs	r3, #0
	capacity = len = 0;
   d5b00:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5b04:	6023      	str	r3, [r4, #0]
}
   d5b06:	bd10      	pop	{r4, pc}

000d5b08 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5b08:	b538      	push	{r3, r4, r5, lr}
   d5b0a:	4604      	mov	r4, r0
   d5b0c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5b0e:	6800      	ldr	r0, [r0, #0]
   d5b10:	3101      	adds	r1, #1
   d5b12:	f7ff fdf9 	bl	d5708 <realloc>
	if (newbuffer) {
   d5b16:	b110      	cbz	r0, d5b1e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5b18:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5b1c:	2001      	movs	r0, #1
	}
	return 0;
}
   d5b1e:	bd38      	pop	{r3, r4, r5, pc}

000d5b20 <_ZN6String7reserveEj>:
{
   d5b20:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5b22:	6803      	ldr	r3, [r0, #0]
{
   d5b24:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5b26:	b123      	cbz	r3, d5b32 <_ZN6String7reserveEj+0x12>
   d5b28:	6843      	ldr	r3, [r0, #4]
   d5b2a:	428b      	cmp	r3, r1
   d5b2c:	d301      	bcc.n	d5b32 <_ZN6String7reserveEj+0x12>
   d5b2e:	2001      	movs	r0, #1
}
   d5b30:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5b32:	4620      	mov	r0, r4
   d5b34:	f7ff ffe8 	bl	d5b08 <_ZN6String12changeBufferEj>
   d5b38:	2800      	cmp	r0, #0
   d5b3a:	d0f9      	beq.n	d5b30 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5b3c:	68a3      	ldr	r3, [r4, #8]
   d5b3e:	2b00      	cmp	r3, #0
   d5b40:	d1f5      	bne.n	d5b2e <_ZN6String7reserveEj+0xe>
   d5b42:	6822      	ldr	r2, [r4, #0]
   d5b44:	7013      	strb	r3, [r2, #0]
   d5b46:	e7f2      	b.n	d5b2e <_ZN6String7reserveEj+0xe>

000d5b48 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b4a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5b4c:	4611      	mov	r1, r2
   d5b4e:	9201      	str	r2, [sp, #4]
{
   d5b50:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5b52:	f7ff ffe5 	bl	d5b20 <_ZN6String7reserveEj>
   d5b56:	9a01      	ldr	r2, [sp, #4]
   d5b58:	b928      	cbnz	r0, d5b66 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	f7ff ffc9 	bl	d5af2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5b60:	4620      	mov	r0, r4
   d5b62:	b003      	add	sp, #12
   d5b64:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5b66:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5b68:	4629      	mov	r1, r5
   d5b6a:	6820      	ldr	r0, [r4, #0]
   d5b6c:	f001 fff0 	bl	d7b50 <memcpy>
	buffer[len] = 0;
   d5b70:	6822      	ldr	r2, [r4, #0]
   d5b72:	68a3      	ldr	r3, [r4, #8]
   d5b74:	2100      	movs	r1, #0
   d5b76:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5b78:	e7f2      	b.n	d5b60 <_ZN6String4copyEPKcj+0x18>

000d5b7a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5b7a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5b7c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5b7e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5b82:	4604      	mov	r4, r0
	len = 0;
   d5b84:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b86:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5b88:	b141      	cbz	r1, d5b9c <_ZN6StringC1EPKc+0x22>
   d5b8a:	4608      	mov	r0, r1
   d5b8c:	9101      	str	r1, [sp, #4]
   d5b8e:	f002 f82b 	bl	d7be8 <strlen>
   d5b92:	9901      	ldr	r1, [sp, #4]
   d5b94:	4602      	mov	r2, r0
   d5b96:	4620      	mov	r0, r4
   d5b98:	f7ff ffd6 	bl	d5b48 <_ZN6String4copyEPKcj>
}
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	b002      	add	sp, #8
   d5ba0:	bd10      	pop	{r4, pc}

000d5ba2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5ba2:	b513      	push	{r0, r1, r4, lr}
   d5ba4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5ba6:	b159      	cbz	r1, d5bc0 <_ZN6StringaSEPKc+0x1e>
   d5ba8:	4608      	mov	r0, r1
   d5baa:	9101      	str	r1, [sp, #4]
   d5bac:	f002 f81c 	bl	d7be8 <strlen>
   d5bb0:	9901      	ldr	r1, [sp, #4]
   d5bb2:	4602      	mov	r2, r0
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	f7ff ffc7 	bl	d5b48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5bba:	4620      	mov	r0, r4
   d5bbc:	b002      	add	sp, #8
   d5bbe:	bd10      	pop	{r4, pc}
	else invalidate();
   d5bc0:	f7ff ff97 	bl	d5af2 <_ZN6String10invalidateEv>
   d5bc4:	e7f9      	b.n	d5bba <_ZN6StringaSEPKc+0x18>

000d5bc6 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d5bc6:	b510      	push	{r4, lr}
   d5bc8:	4604      	mov	r4, r0
   d5bca:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5bcc:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d5bce:	4608      	mov	r0, r1
	capacity = 0;
   d5bd0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5bd4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5bd6:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d5bd8:	a901      	add	r1, sp, #4
   d5bda:	b2c0      	uxtb	r0, r0
   d5bdc:	f7ff ff24 	bl	d5a28 <_Z4dtoadhPc>
        *this = buf;
   d5be0:	a901      	add	r1, sp, #4
   d5be2:	4620      	mov	r0, r4
   d5be4:	f7ff ffdd 	bl	d5ba2 <_ZN6StringaSEPKc>
}
   d5be8:	4620      	mov	r0, r4
   d5bea:	b00a      	add	sp, #40	; 0x28
   d5bec:	bd10      	pop	{r4, pc}

000d5bee <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5bee:	b570      	push	{r4, r5, r6, lr}
   d5bf0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5bf2:	460e      	mov	r6, r1
   d5bf4:	b909      	cbnz	r1, d5bfa <_ZN6String6concatEPKcj+0xc>
   d5bf6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5bf8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5bfa:	b16a      	cbz	r2, d5c18 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5bfc:	6884      	ldr	r4, [r0, #8]
   d5bfe:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5c00:	4621      	mov	r1, r4
   d5c02:	f7ff ff8d 	bl	d5b20 <_ZN6String7reserveEj>
   d5c06:	2800      	cmp	r0, #0
   d5c08:	d0f5      	beq.n	d5bf6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5c0a:	6828      	ldr	r0, [r5, #0]
   d5c0c:	68ab      	ldr	r3, [r5, #8]
   d5c0e:	4631      	mov	r1, r6
   d5c10:	4418      	add	r0, r3
   d5c12:	f001 ffe1 	bl	d7bd8 <strcpy>
	len = newlen;
   d5c16:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5c18:	2001      	movs	r0, #1
   d5c1a:	e7ed      	b.n	d5bf8 <_ZN6String6concatEPKcj+0xa>

000d5c1c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5c1c:	688a      	ldr	r2, [r1, #8]
   d5c1e:	6809      	ldr	r1, [r1, #0]
   d5c20:	f7ff bfe5 	b.w	d5bee <_ZN6String6concatEPKcj>

000d5c24 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d5c24:	b513      	push	{r0, r1, r4, lr}
   d5c26:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   d5c28:	4608      	mov	r0, r1
	if (!cstr) return 0;
   d5c2a:	b151      	cbz	r1, d5c42 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   d5c2c:	9101      	str	r1, [sp, #4]
   d5c2e:	f001 ffdb 	bl	d7be8 <strlen>
   d5c32:	9901      	ldr	r1, [sp, #4]
   d5c34:	4602      	mov	r2, r0
   d5c36:	4620      	mov	r0, r4
}
   d5c38:	b002      	add	sp, #8
   d5c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   d5c3e:	f7ff bfd6 	b.w	d5bee <_ZN6String6concatEPKcj>
}
   d5c42:	b002      	add	sp, #8
   d5c44:	bd10      	pop	{r4, pc}

000d5c46 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5c46:	b510      	push	{r4, lr}
   d5c48:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c4a:	6800      	ldr	r0, [r0, #0]
   d5c4c:	b108      	cbz	r0, d5c52 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5c4e:	f7ff fb5f 	bl	d5310 <os_mutex_recursive_destroy>
    }
   d5c52:	4620      	mov	r0, r4
   d5c54:	bd10      	pop	{r4, pc}

000d5c56 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c56:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5c58:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5c5a:	4604      	mov	r4, r0
      if (_M_manager)
   d5c5c:	b113      	cbz	r3, d5c64 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c5e:	2203      	movs	r2, #3
   d5c60:	4601      	mov	r1, r0
   d5c62:	4798      	blx	r3
    }
   d5c64:	4620      	mov	r0, r4
   d5c66:	bd10      	pop	{r4, pc}

000d5c68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5c68:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5c6a:	4c06      	ldr	r4, [pc, #24]	; (d5c84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c6c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5c6e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5c70:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5c72:	f7ff fb45 	bl	d5300 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5c76:	4620      	mov	r0, r4
   d5c78:	4a03      	ldr	r2, [pc, #12]	; (d5c88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c7a:	4904      	ldr	r1, [pc, #16]	; (d5c8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5c80:	f001 b824 	b.w	d6ccc <__aeabi_atexit>
   d5c84:	2003e668 	.word	0x2003e668
   d5c88:	2003e590 	.word	0x2003e590
   d5c8c:	000d5c47 	.word	0x000d5c47

000d5c90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c92:	4606      	mov	r6, r0
   d5c94:	460d      	mov	r5, r1
  size_t n = 0;
   d5c96:	188f      	adds	r7, r1, r2
   d5c98:	2400      	movs	r4, #0
  while (size--) {
   d5c9a:	42bd      	cmp	r5, r7
   d5c9c:	d00c      	beq.n	d5cb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c9e:	6833      	ldr	r3, [r6, #0]
   d5ca0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5ca4:	689b      	ldr	r3, [r3, #8]
   d5ca6:	4630      	mov	r0, r6
   d5ca8:	4798      	blx	r3
     if (chunk>=0)
   d5caa:	1e03      	subs	r3, r0, #0
   d5cac:	db01      	blt.n	d5cb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5cae:	441c      	add	r4, r3
  while (size--) {
   d5cb0:	e7f3      	b.n	d5c9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5cb2:	2c00      	cmp	r4, #0
   d5cb4:	bf08      	it	eq
   d5cb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5cb8:	4620      	mov	r0, r4
   d5cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cbc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5cbc:	b513      	push	{r0, r1, r4, lr}
   d5cbe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5cc0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5cc2:	b159      	cbz	r1, d5cdc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5cc4:	9101      	str	r1, [sp, #4]
   d5cc6:	f001 ff8f 	bl	d7be8 <strlen>
   d5cca:	6823      	ldr	r3, [r4, #0]
   d5ccc:	9901      	ldr	r1, [sp, #4]
   d5cce:	68db      	ldr	r3, [r3, #12]
   d5cd0:	4602      	mov	r2, r0
   d5cd2:	4620      	mov	r0, r4
    }
   d5cd4:	b002      	add	sp, #8
   d5cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5cda:	4718      	bx	r3
    }
   d5cdc:	b002      	add	sp, #8
   d5cde:	bd10      	pop	{r4, pc}

000d5ce0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5ce0:	b508      	push	{r3, lr}
  return write(str);
   d5ce2:	f7ff ffeb 	bl	d5cbc <_ZN5Print5writeEPKc>
}
   d5ce6:	bd08      	pop	{r3, pc}

000d5ce8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5ce8:	6803      	ldr	r3, [r0, #0]
   d5cea:	689b      	ldr	r3, [r3, #8]
   d5cec:	4718      	bx	r3

000d5cee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5cee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5cf0:	210d      	movs	r1, #13
{
   d5cf2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5cf4:	f7ff fff8 	bl	d5ce8 <_ZN5Print5printEc>
  n += print('\n');
   d5cf8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5cfa:	4604      	mov	r4, r0
  n += print('\n');
   d5cfc:	4628      	mov	r0, r5
   d5cfe:	f7ff fff3 	bl	d5ce8 <_ZN5Print5printEc>
  return n;
}
   d5d02:	4420      	add	r0, r4
   d5d04:	bd38      	pop	{r3, r4, r5, pc}

000d5d06 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d06:	b538      	push	{r3, r4, r5, lr}
   d5d08:	4605      	mov	r5, r0
  return write(str);
   d5d0a:	f7ff ffd7 	bl	d5cbc <_ZN5Print5writeEPKc>
   d5d0e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5d10:	4628      	mov	r0, r5
   d5d12:	f7ff ffec 	bl	d5cee <_ZN5Print7printlnEv>
  return n;
}
   d5d16:	4420      	add	r0, r4
   d5d18:	bd38      	pop	{r3, r4, r5, pc}

000d5d1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d1a:	b530      	push	{r4, r5, lr}
   d5d1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d1e:	2300      	movs	r3, #0
   d5d20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d24:	2a01      	cmp	r2, #1
   d5d26:	bf98      	it	ls
   d5d28:	220a      	movls	r2, #10
   d5d2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5d2c:	460d      	mov	r5, r1
   d5d2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5d32:	fb01 5312 	mls	r3, r1, r2, r5
   d5d36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d3a:	2b09      	cmp	r3, #9
   d5d3c:	bf94      	ite	ls
   d5d3e:	3330      	addls	r3, #48	; 0x30
   d5d40:	3337      	addhi	r3, #55	; 0x37
   d5d42:	b2db      	uxtb	r3, r3
  } while(n);
   d5d44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5d4a:	d9ef      	bls.n	d5d2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5d4c:	4621      	mov	r1, r4
   d5d4e:	f7ff ffb5 	bl	d5cbc <_ZN5Print5writeEPKc>
}
   d5d52:	b00b      	add	sp, #44	; 0x2c
   d5d54:	bd30      	pop	{r4, r5, pc}

000d5d56 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d5a:	b086      	sub	sp, #24
   d5d5c:	af00      	add	r7, sp, #0
   d5d5e:	4605      	mov	r5, r0
   d5d60:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5d62:	1d38      	adds	r0, r7, #4
   d5d64:	2114      	movs	r1, #20
{
   d5d66:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5d68:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5d6a:	f7ff fcdd 	bl	d5728 <vsnprintf>

    if (n<bufsize)
   d5d6e:	2813      	cmp	r0, #19
   d5d70:	d80e      	bhi.n	d5d90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5d72:	1d39      	adds	r1, r7, #4
   d5d74:	4628      	mov	r0, r5
   d5d76:	f7ff ffa1 	bl	d5cbc <_ZN5Print5writeEPKc>
   d5d7a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5d7c:	b11e      	cbz	r6, d5d86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5d7e:	4628      	mov	r0, r5
   d5d80:	f7ff ffb5 	bl	d5cee <_ZN5Print7printlnEv>
   d5d84:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5d86:	4620      	mov	r0, r4
   d5d88:	3718      	adds	r7, #24
   d5d8a:	46bd      	mov	sp, r7
   d5d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5d90:	f100 0308 	add.w	r3, r0, #8
   d5d94:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5d98:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5d9a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5d9e:	4622      	mov	r2, r4
   d5da0:	1c41      	adds	r1, r0, #1
   d5da2:	683b      	ldr	r3, [r7, #0]
   d5da4:	4668      	mov	r0, sp
   d5da6:	f7ff fcbf 	bl	d5728 <vsnprintf>
  return write(str);
   d5daa:	4669      	mov	r1, sp
   d5dac:	4628      	mov	r0, r5
   d5dae:	f7ff ff85 	bl	d5cbc <_ZN5Print5writeEPKc>
   d5db2:	4604      	mov	r4, r0
   d5db4:	46c5      	mov	sp, r8
   d5db6:	e7e1      	b.n	d5d7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5db8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d5db8:	b510      	push	{r4, lr}
   d5dba:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5dbc:	f7ff fa98 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5dc0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d5dc2:	6823      	ldr	r3, [r4, #0]
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	695b      	ldr	r3, [r3, #20]
   d5dc8:	4798      	blx	r3
    if (c >= 0) return c;
   d5dca:	2800      	cmp	r0, #0
   d5dcc:	da08      	bge.n	d5de0 <_ZN6Stream9timedReadEv+0x28>
   d5dce:	f7ff fa8f 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d5dd2:	68e3      	ldr	r3, [r4, #12]
   d5dd4:	1ac0      	subs	r0, r0, r3
   d5dd6:	68a3      	ldr	r3, [r4, #8]
   d5dd8:	4298      	cmp	r0, r3
   d5dda:	d3f2      	bcc.n	d5dc2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d5ddc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5de0:	bd10      	pop	{r4, pc}

000d5de2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d5de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5de4:	4606      	mov	r6, r0
   d5de6:	460d      	mov	r5, r1
   d5de8:	4617      	mov	r7, r2
  size_t count = 0;
   d5dea:	2400      	movs	r4, #0
  while (count < length) {
   d5dec:	42bc      	cmp	r4, r7
   d5dee:	d007      	beq.n	d5e00 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d5df0:	4630      	mov	r0, r6
   d5df2:	f7ff ffe1 	bl	d5db8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d5df6:	1e03      	subs	r3, r0, #0
   d5df8:	db02      	blt.n	d5e00 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d5dfa:	552b      	strb	r3, [r5, r4]
    count++;
   d5dfc:	3401      	adds	r4, #1
  while (count < length) {
   d5dfe:	e7f5      	b.n	d5dec <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d5e00:	4620      	mov	r0, r4
   d5e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e04 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e04:	2300      	movs	r3, #0
   d5e06:	6840      	ldr	r0, [r0, #4]
   d5e08:	461a      	mov	r2, r3
   d5e0a:	4619      	mov	r1, r3
   d5e0c:	f7ff bc1c 	b.w	d5648 <network_on>

000d5e10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e10:	4b01      	ldr	r3, [pc, #4]	; (d5e18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e12:	4a02      	ldr	r2, [pc, #8]	; (d5e1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5e16:	4770      	bx	lr
   d5e18:	2003e66c 	.word	0x2003e66c
   d5e1c:	000d82e4 	.word	0x000d82e4

000d5e20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e20:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e22:	681a      	ldr	r2, [r3, #0]
   d5e24:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5e28:	4770      	bx	lr
   d5e2a:	bf00      	nop
   d5e2c:	2003e528 	.word	0x2003e528
   d5e30:	2003e670 	.word	0x2003e670

000d5e34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5e34:	2100      	movs	r1, #0
   d5e36:	f7ff bbc3 	b.w	d55c0 <system_delay_ms>

000d5e3a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e3a:	b510      	push	{r4, lr}
   d5e3c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e3e:	f7ff ff0a 	bl	d5c56 <_ZNSt14_Function_baseD1Ev>
   d5e42:	4620      	mov	r0, r4
   d5e44:	bd10      	pop	{r4, pc}
	...

000d5e48 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5e48:	4803      	ldr	r0, [pc, #12]	; (d5e58 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e4a:	4a04      	ldr	r2, [pc, #16]	; (d5e5c <_GLOBAL__sub_I_RGB+0x14>)
   d5e4c:	4904      	ldr	r1, [pc, #16]	; (d5e60 <_GLOBAL__sub_I_RGB+0x18>)
   d5e4e:	2300      	movs	r3, #0
   d5e50:	6083      	str	r3, [r0, #8]
   d5e52:	f000 bf3b 	b.w	d6ccc <__aeabi_atexit>
   d5e56:	bf00      	nop
   d5e58:	2003e674 	.word	0x2003e674
   d5e5c:	2003e590 	.word	0x2003e590
   d5e60:	000d5e3b 	.word	0x000d5e3b

000d5e64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5e64:	4b01      	ldr	r3, [pc, #4]	; (d5e6c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5e66:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5e68:	4770      	bx	lr
   d5e6a:	bf00      	nop
   d5e6c:	2003e52c 	.word	0x2003e52c

000d5e70 <serialEventRun>:
{
   d5e70:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e72:	4b0b      	ldr	r3, [pc, #44]	; (d5ea0 <serialEventRun+0x30>)
   d5e74:	b143      	cbz	r3, d5e88 <serialEventRun+0x18>
   d5e76:	f000 f97d 	bl	d6174 <_Z16_fetch_usbserialv>
   d5e7a:	6803      	ldr	r3, [r0, #0]
   d5e7c:	691b      	ldr	r3, [r3, #16]
   d5e7e:	4798      	blx	r3
   d5e80:	2800      	cmp	r0, #0
   d5e82:	dd01      	ble.n	d5e88 <serialEventRun+0x18>
        serialEvent();
   d5e84:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5e88:	4b06      	ldr	r3, [pc, #24]	; (d5ea4 <serialEventRun+0x34>)
   d5e8a:	b143      	cbz	r3, d5e9e <serialEventRun+0x2e>
   d5e8c:	f000 f9f0 	bl	d6270 <_Z22__fetch_global_Serial1v>
   d5e90:	6803      	ldr	r3, [r0, #0]
   d5e92:	691b      	ldr	r3, [r3, #16]
   d5e94:	4798      	blx	r3
   d5e96:	2800      	cmp	r0, #0
   d5e98:	dd01      	ble.n	d5e9e <serialEventRun+0x2e>
        serialEvent1();
   d5e9a:	f3af 8000 	nop.w
}
   d5e9e:	bd08      	pop	{r3, pc}
	...

000d5ea8 <_post_loop>:
{
   d5ea8:	b508      	push	{r3, lr}
	serialEventRun();
   d5eaa:	f7ff ffe1 	bl	d5e70 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5eae:	f7ff fa1f 	bl	d52f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5eb2:	4b01      	ldr	r3, [pc, #4]	; (d5eb8 <_post_loop+0x10>)
   d5eb4:	6018      	str	r0, [r3, #0]
}
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	2003e7d4 	.word	0x2003e7d4

000d5ebc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5ebc:	4802      	ldr	r0, [pc, #8]	; (d5ec8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5ebe:	4a03      	ldr	r2, [pc, #12]	; (d5ecc <_Z33system_initialize_user_backup_ramv+0x10>)
   d5ec0:	4903      	ldr	r1, [pc, #12]	; (d5ed0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5ec2:	1a12      	subs	r2, r2, r0
   d5ec4:	f001 be44 	b.w	d7b50 <memcpy>
   d5ec8:	2003f400 	.word	0x2003f400
   d5ecc:	2003f404 	.word	0x2003f404
   d5ed0:	000d86c8 	.word	0x000d86c8

000d5ed4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5ed4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ed6:	2300      	movs	r3, #0
   d5ed8:	9300      	str	r3, [sp, #0]
   d5eda:	461a      	mov	r2, r3
   d5edc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ee0:	f7ff fb88 	bl	d55f4 <system_ctrl_set_result>
}
   d5ee4:	b003      	add	sp, #12
   d5ee6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5eec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5eec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5eee:	8843      	ldrh	r3, [r0, #2]
   d5ef0:	2b0a      	cmp	r3, #10
   d5ef2:	d008      	beq.n	d5f06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ef4:	2b50      	cmp	r3, #80	; 0x50
   d5ef6:	d10b      	bne.n	d5f10 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5ef8:	4b09      	ldr	r3, [pc, #36]	; (d5f20 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5efa:	681b      	ldr	r3, [r3, #0]
   d5efc:	b14b      	cbz	r3, d5f12 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5efe:	b003      	add	sp, #12
   d5f00:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5f04:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5f06:	f7ff ffe5 	bl	d5ed4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5f0a:	b003      	add	sp, #12
   d5f0c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f10:	2300      	movs	r3, #0
   d5f12:	9300      	str	r3, [sp, #0]
   d5f14:	461a      	mov	r2, r3
   d5f16:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f1a:	f7ff fb6b 	bl	d55f4 <system_ctrl_set_result>
}
   d5f1e:	e7f4      	b.n	d5f0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5f20:	2003e688 	.word	0x2003e688

000d5f24 <module_user_init_hook>:
{
   d5f24:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f26:	4c12      	ldr	r4, [pc, #72]	; (d5f70 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f28:	4812      	ldr	r0, [pc, #72]	; (d5f74 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f2a:	4d13      	ldr	r5, [pc, #76]	; (d5f78 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f2c:	2100      	movs	r1, #0
   d5f2e:	f7ff fc0b 	bl	d5748 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f32:	6823      	ldr	r3, [r4, #0]
   d5f34:	42ab      	cmp	r3, r5
   d5f36:	4b11      	ldr	r3, [pc, #68]	; (d5f7c <module_user_init_hook+0x58>)
   d5f38:	bf0c      	ite	eq
   d5f3a:	2201      	moveq	r2, #1
   d5f3c:	2200      	movne	r2, #0
   d5f3e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f40:	d002      	beq.n	d5f48 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5f42:	f7ff ffbb 	bl	d5ebc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f46:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f48:	f7ff f9c2 	bl	d52d0 <HAL_RNG_GetRandomNumber>
   d5f4c:	4604      	mov	r4, r0
    srand(seed);
   d5f4e:	f001 fe15 	bl	d7b7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f52:	4b0b      	ldr	r3, [pc, #44]	; (d5f80 <module_user_init_hook+0x5c>)
   d5f54:	b113      	cbz	r3, d5f5c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5f56:	4620      	mov	r0, r4
   d5f58:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f5c:	2100      	movs	r1, #0
   d5f5e:	4808      	ldr	r0, [pc, #32]	; (d5f80 <module_user_init_hook+0x5c>)
   d5f60:	f7ff fbba 	bl	d56d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f68:	4806      	ldr	r0, [pc, #24]	; (d5f84 <module_user_init_hook+0x60>)
   d5f6a:	2100      	movs	r1, #0
   d5f6c:	f7ff bb38 	b.w	d55e0 <system_ctrl_set_app_request_handler>
   d5f70:	2003f400 	.word	0x2003f400
   d5f74:	000d5e65 	.word	0x000d5e65
   d5f78:	9a271c1e 	.word	0x9a271c1e
   d5f7c:	2003e684 	.word	0x2003e684
   d5f80:	00000000 	.word	0x00000000
   d5f84:	000d5eed 	.word	0x000d5eed

000d5f88 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d5f88:	4770      	bx	lr

000d5f8a <_ZN9IPAddressD0Ev>:
   d5f8a:	b510      	push	{r4, lr}
   d5f8c:	2118      	movs	r1, #24
   d5f8e:	4604      	mov	r4, r0
   d5f90:	f000 fea1 	bl	d6cd6 <_ZdlPvj>
   d5f94:	4620      	mov	r0, r4
   d5f96:	bd10      	pop	{r4, pc}

000d5f98 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5f98:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5f9a:	7d03      	ldrb	r3, [r0, #20]
   d5f9c:	2b06      	cmp	r3, #6
{
   d5f9e:	b08d      	sub	sp, #52	; 0x34
   d5fa0:	460e      	mov	r6, r1
   d5fa2:	f100 0704 	add.w	r7, r0, #4
   d5fa6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5faa:	d012      	beq.n	d5fd2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5fac:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5fb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5fb4:	220a      	movs	r2, #10
   d5fb6:	4630      	mov	r0, r6
   d5fb8:	f7ff feaf 	bl	d5d1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5fbc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5fbe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5fc0:	d019      	beq.n	d5ff6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5fc2:	2c00      	cmp	r4, #0
   d5fc4:	d0f4      	beq.n	d5fb0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5fc6:	212e      	movs	r1, #46	; 0x2e
   d5fc8:	4630      	mov	r0, r6
   d5fca:	f7ff fe8d 	bl	d5ce8 <_ZN5Print5printEc>
   d5fce:	4404      	add	r4, r0
   d5fd0:	e7ee      	b.n	d5fb0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5fd2:	232f      	movs	r3, #47	; 0x2f
   d5fd4:	466a      	mov	r2, sp
   d5fd6:	4639      	mov	r1, r7
   d5fd8:	200a      	movs	r0, #10
		buf[0] = 0;
   d5fda:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5fde:	f7ff f99f 	bl	d5320 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5fe2:	4668      	mov	r0, sp
   d5fe4:	f001 fe00 	bl	d7be8 <strlen>
   d5fe8:	6833      	ldr	r3, [r6, #0]
   d5fea:	4602      	mov	r2, r0
   d5fec:	68db      	ldr	r3, [r3, #12]
   d5fee:	4669      	mov	r1, sp
   d5ff0:	4630      	mov	r0, r6
   d5ff2:	4798      	blx	r3
   d5ff4:	4604      	mov	r4, r0
    }
    return n;
}
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	b00d      	add	sp, #52	; 0x34
   d5ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ffc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5ffc:	b510      	push	{r4, lr}
   d5ffe:	4b05      	ldr	r3, [pc, #20]	; (d6014 <_ZN9IPAddressC1Ev+0x18>)
   d6000:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6002:	2211      	movs	r2, #17
   d6004:	f840 3b04 	str.w	r3, [r0], #4
   d6008:	2100      	movs	r1, #0
   d600a:	f001 fdaf 	bl	d7b6c <memset>
}
   d600e:	4620      	mov	r0, r4
   d6010:	bd10      	pop	{r4, pc}
   d6012:	bf00      	nop
   d6014:	000d830c 	.word	0x000d830c

000d6018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6018:	4603      	mov	r3, r0
   d601a:	4a07      	ldr	r2, [pc, #28]	; (d6038 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d601c:	b510      	push	{r4, lr}
   d601e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6022:	f101 0210 	add.w	r2, r1, #16
   d6026:	f851 4b04 	ldr.w	r4, [r1], #4
   d602a:	f843 4b04 	str.w	r4, [r3], #4
   d602e:	4291      	cmp	r1, r2
   d6030:	d1f9      	bne.n	d6026 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6032:	780a      	ldrb	r2, [r1, #0]
   d6034:	701a      	strb	r2, [r3, #0]
}
   d6036:	bd10      	pop	{r4, pc}
   d6038:	000d830c 	.word	0x000d830c

000d603c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d603c:	7d03      	ldrb	r3, [r0, #20]
   d603e:	2b04      	cmp	r3, #4
   d6040:	d104      	bne.n	d604c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d6042:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6044:	3800      	subs	r0, #0
   d6046:	bf18      	it	ne
   d6048:	2001      	movne	r0, #1
   d604a:	4770      	bx	lr
    } else if (version() == 6) {
   d604c:	2b06      	cmp	r3, #6
   d604e:	d107      	bne.n	d6060 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6050:	6843      	ldr	r3, [r0, #4]
   d6052:	b93b      	cbnz	r3, d6064 <_ZNK9IPAddresscvbEv+0x28>
   d6054:	6883      	ldr	r3, [r0, #8]
   d6056:	b92b      	cbnz	r3, d6064 <_ZNK9IPAddresscvbEv+0x28>
   d6058:	68c3      	ldr	r3, [r0, #12]
   d605a:	b91b      	cbnz	r3, d6064 <_ZNK9IPAddresscvbEv+0x28>
   d605c:	6900      	ldr	r0, [r0, #16]
   d605e:	e7f1      	b.n	d6044 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6060:	2000      	movs	r0, #0
   d6062:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6064:	2001      	movs	r0, #1
}
   d6066:	4770      	bx	lr

000d6068 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6068:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d606a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d606e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6072:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6076:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d607a:	2304      	movs	r3, #4
   d607c:	6041      	str	r1, [r0, #4]
   d607e:	7503      	strb	r3, [r0, #20]
}
   d6080:	bd10      	pop	{r4, pc}
	...

000d6084 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d6084:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6086:	4d04      	ldr	r5, [pc, #16]	; (d6098 <_ZN9IPAddressC1Ehhhh+0x14>)
   d6088:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d608a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d608e:	9500      	str	r5, [sp, #0]
   d6090:	f7ff ffea 	bl	d6068 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6094:	b003      	add	sp, #12
   d6096:	bd30      	pop	{r4, r5, pc}
   d6098:	000d830c 	.word	0x000d830c

000d609c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d609c:	b513      	push	{r0, r1, r4, lr}
   d609e:	4b05      	ldr	r3, [pc, #20]	; (d60b4 <_ZN9IPAddressC1EPKh+0x18>)
   d60a0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d60a2:	78cb      	ldrb	r3, [r1, #3]
   d60a4:	9300      	str	r3, [sp, #0]
   d60a6:	788b      	ldrb	r3, [r1, #2]
   d60a8:	784a      	ldrb	r2, [r1, #1]
   d60aa:	7809      	ldrb	r1, [r1, #0]
   d60ac:	f7ff ffdc 	bl	d6068 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d60b0:	b002      	add	sp, #8
   d60b2:	bd10      	pop	{r4, pc}
   d60b4:	000d830c 	.word	0x000d830c

000d60b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60b8:	7441      	strb	r1, [r0, #17]
}
   d60ba:	4770      	bx	lr

000d60bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d60bc:	4770      	bx	lr

000d60be <_ZN9USBSerial4readEv>:
{
   d60be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d60c0:	2100      	movs	r1, #0
   d60c2:	7c00      	ldrb	r0, [r0, #16]
   d60c4:	f7ff fa4c 	bl	d5560 <HAL_USB_USART_Receive_Data>
}
   d60c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60cc:	bd08      	pop	{r3, pc}

000d60ce <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d60ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d60d0:	2101      	movs	r1, #1
   d60d2:	7c00      	ldrb	r0, [r0, #16]
   d60d4:	f7ff fa44 	bl	d5560 <HAL_USB_USART_Receive_Data>
}
   d60d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60dc:	bd08      	pop	{r3, pc}

000d60de <_ZN9USBSerial17availableForWriteEv>:
{
   d60de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d60e0:	7c00      	ldrb	r0, [r0, #16]
   d60e2:	f7ff fa35 	bl	d5550 <HAL_USB_USART_Available_Data_For_Write>
}
   d60e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60ea:	bd08      	pop	{r3, pc}

000d60ec <_ZN9USBSerial9availableEv>:
{
   d60ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d60ee:	7c00      	ldrb	r0, [r0, #16]
   d60f0:	f7ff fa26 	bl	d5540 <HAL_USB_USART_Available_Data>
}
   d60f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60f8:	bd08      	pop	{r3, pc}

000d60fa <_ZN9USBSerial5writeEh>:
{
   d60fa:	b513      	push	{r0, r1, r4, lr}
   d60fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60fe:	7c00      	ldrb	r0, [r0, #16]
{
   d6100:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6102:	f7ff fa25 	bl	d5550 <HAL_USB_USART_Available_Data_For_Write>
   d6106:	2800      	cmp	r0, #0
   d6108:	9901      	ldr	r1, [sp, #4]
   d610a:	dc01      	bgt.n	d6110 <_ZN9USBSerial5writeEh+0x16>
   d610c:	7c60      	ldrb	r0, [r4, #17]
   d610e:	b120      	cbz	r0, d611a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6110:	7c20      	ldrb	r0, [r4, #16]
   d6112:	f7ff fa2d 	bl	d5570 <HAL_USB_USART_Send_Data>
   d6116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d611a:	b002      	add	sp, #8
   d611c:	bd10      	pop	{r4, pc}

000d611e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d611e:	7c00      	ldrb	r0, [r0, #16]
   d6120:	f7ff ba2e 	b.w	d5580 <HAL_USB_USART_Flush_Data>

000d6124 <_ZN9USBSerialD0Ev>:
   d6124:	b510      	push	{r4, lr}
   d6126:	2114      	movs	r1, #20
   d6128:	4604      	mov	r4, r0
   d612a:	f000 fdd4 	bl	d6cd6 <_ZdlPvj>
   d612e:	4620      	mov	r0, r4
   d6130:	bd10      	pop	{r4, pc}
	...

000d6134 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6134:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d613a:	4604      	mov	r4, r0
   d613c:	4608      	mov	r0, r1
   d613e:	2100      	movs	r1, #0
   d6140:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6144:	4b04      	ldr	r3, [pc, #16]	; (d6158 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6146:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6148:	2301      	movs	r3, #1
  _serial = serial;
   d614a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d614c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d614e:	4611      	mov	r1, r2
   d6150:	f7ff f9e6 	bl	d5520 <HAL_USB_USART_Init>
}
   d6154:	4620      	mov	r0, r4
   d6156:	bd10      	pop	{r4, pc}
   d6158:	000d8320 	.word	0x000d8320

000d615c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d615c:	7c00      	ldrb	r0, [r0, #16]
   d615e:	2200      	movs	r2, #0
   d6160:	f7ff b9e6 	b.w	d5530 <HAL_USB_USART_Begin>

000d6164 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6164:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6166:	2214      	movs	r2, #20
{
   d6168:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d616a:	2100      	movs	r1, #0
   d616c:	f001 fcfe 	bl	d7b6c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6170:	4620      	mov	r0, r4
   d6172:	bd10      	pop	{r4, pc}

000d6174 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6174:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6176:	4c10      	ldr	r4, [pc, #64]	; (d61b8 <_Z16_fetch_usbserialv+0x44>)
{
   d6178:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d617a:	a803      	add	r0, sp, #12
   d617c:	f7ff fff2 	bl	d6164 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6180:	7821      	ldrb	r1, [r4, #0]
   d6182:	f3bf 8f5b 	dmb	ish
   d6186:	f011 0101 	ands.w	r1, r1, #1
   d618a:	d111      	bne.n	d61b0 <_Z16_fetch_usbserialv+0x3c>
   d618c:	4620      	mov	r0, r4
   d618e:	9101      	str	r1, [sp, #4]
   d6190:	f7fd ff90 	bl	d40b4 <__cxa_guard_acquire>
   d6194:	9901      	ldr	r1, [sp, #4]
   d6196:	b158      	cbz	r0, d61b0 <_Z16_fetch_usbserialv+0x3c>
   d6198:	aa03      	add	r2, sp, #12
   d619a:	4808      	ldr	r0, [pc, #32]	; (d61bc <_Z16_fetch_usbserialv+0x48>)
   d619c:	f7ff ffca 	bl	d6134 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d61a0:	4620      	mov	r0, r4
   d61a2:	f7fd ff8c 	bl	d40be <__cxa_guard_release>
   d61a6:	4a06      	ldr	r2, [pc, #24]	; (d61c0 <_Z16_fetch_usbserialv+0x4c>)
   d61a8:	4906      	ldr	r1, [pc, #24]	; (d61c4 <_Z16_fetch_usbserialv+0x50>)
   d61aa:	4804      	ldr	r0, [pc, #16]	; (d61bc <_Z16_fetch_usbserialv+0x48>)
   d61ac:	f000 fd8e 	bl	d6ccc <__aeabi_atexit>
	return _usbserial;
}
   d61b0:	4802      	ldr	r0, [pc, #8]	; (d61bc <_Z16_fetch_usbserialv+0x48>)
   d61b2:	b008      	add	sp, #32
   d61b4:	bd10      	pop	{r4, pc}
   d61b6:	bf00      	nop
   d61b8:	2003e68c 	.word	0x2003e68c
   d61bc:	2003e690 	.word	0x2003e690
   d61c0:	2003e590 	.word	0x2003e590
   d61c4:	000d60bd 	.word	0x000d60bd

000d61c8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d61c8:	4770      	bx	lr

000d61ca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61ca:	7441      	strb	r1, [r0, #17]
}
   d61cc:	4770      	bx	lr

000d61ce <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d61ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d61d0:	7c00      	ldrb	r0, [r0, #16]
   d61d2:	f7ff f8f5 	bl	d53c0 <hal_usart_available_data_for_write>
}
   d61d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61da:	bd08      	pop	{r3, pc}

000d61dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d61dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d61de:	7c00      	ldrb	r0, [r0, #16]
   d61e0:	f7ff f8c6 	bl	d5370 <hal_usart_available>
}
   d61e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61e8:	bd08      	pop	{r3, pc}

000d61ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d61ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d61ec:	7c00      	ldrb	r0, [r0, #16]
   d61ee:	f7ff f8cf 	bl	d5390 <hal_usart_peek>
}
   d61f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61f6:	bd08      	pop	{r3, pc}

000d61f8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d61f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d61fa:	7c00      	ldrb	r0, [r0, #16]
   d61fc:	f7ff f8c0 	bl	d5380 <hal_usart_read>
}
   d6200:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6204:	bd08      	pop	{r3, pc}

000d6206 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6206:	7c00      	ldrb	r0, [r0, #16]
   d6208:	f7ff b8ca 	b.w	d53a0 <hal_usart_flush>

000d620c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d620c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d620e:	7c45      	ldrb	r5, [r0, #17]
{
   d6210:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6212:	b12d      	cbz	r5, d6220 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6214:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6216:	b003      	add	sp, #12
   d6218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d621c:	f7ff b8a0 	b.w	d5360 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6220:	7c00      	ldrb	r0, [r0, #16]
   d6222:	9101      	str	r1, [sp, #4]
   d6224:	f7ff f8cc 	bl	d53c0 <hal_usart_available_data_for_write>
   d6228:	2800      	cmp	r0, #0
   d622a:	9901      	ldr	r1, [sp, #4]
   d622c:	dcf2      	bgt.n	d6214 <_ZN11USARTSerial5writeEh+0x8>
}
   d622e:	4628      	mov	r0, r5
   d6230:	b003      	add	sp, #12
   d6232:	bd30      	pop	{r4, r5, pc}

000d6234 <_ZN11USARTSerialD0Ev>:
   d6234:	b510      	push	{r4, lr}
   d6236:	2114      	movs	r1, #20
   d6238:	4604      	mov	r4, r0
   d623a:	f000 fd4c 	bl	d6cd6 <_ZdlPvj>
   d623e:	4620      	mov	r0, r4
   d6240:	bd10      	pop	{r4, pc}
	...

000d6244 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6244:	b510      	push	{r4, lr}
   d6246:	f04f 0c00 	mov.w	ip, #0
   d624a:	4604      	mov	r4, r0
   d624c:	4608      	mov	r0, r1
   d624e:	4611      	mov	r1, r2
   d6250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6254:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6258:	4a04      	ldr	r2, [pc, #16]	; (d626c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d625a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d625c:	2201      	movs	r2, #1
  _serial = serial;
   d625e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6260:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6262:	461a      	mov	r2, r3
   d6264:	f7ff f874 	bl	d5350 <hal_usart_init>
}
   d6268:	4620      	mov	r0, r4
   d626a:	bd10      	pop	{r4, pc}
   d626c:	000d8350 	.word	0x000d8350

000d6270 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6270:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6272:	4c0e      	ldr	r4, [pc, #56]	; (d62ac <_Z22__fetch_global_Serial1v+0x3c>)
   d6274:	7821      	ldrb	r1, [r4, #0]
   d6276:	f3bf 8f5b 	dmb	ish
   d627a:	f011 0101 	ands.w	r1, r1, #1
   d627e:	d112      	bne.n	d62a6 <_Z22__fetch_global_Serial1v+0x36>
   d6280:	4620      	mov	r0, r4
   d6282:	9101      	str	r1, [sp, #4]
   d6284:	f7fd ff16 	bl	d40b4 <__cxa_guard_acquire>
   d6288:	9901      	ldr	r1, [sp, #4]
   d628a:	b160      	cbz	r0, d62a6 <_Z22__fetch_global_Serial1v+0x36>
   d628c:	4a08      	ldr	r2, [pc, #32]	; (d62b0 <_Z22__fetch_global_Serial1v+0x40>)
   d628e:	4b09      	ldr	r3, [pc, #36]	; (d62b4 <_Z22__fetch_global_Serial1v+0x44>)
   d6290:	4809      	ldr	r0, [pc, #36]	; (d62b8 <_Z22__fetch_global_Serial1v+0x48>)
   d6292:	f7ff ffd7 	bl	d6244 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6296:	4620      	mov	r0, r4
   d6298:	f7fd ff11 	bl	d40be <__cxa_guard_release>
   d629c:	4a07      	ldr	r2, [pc, #28]	; (d62bc <_Z22__fetch_global_Serial1v+0x4c>)
   d629e:	4908      	ldr	r1, [pc, #32]	; (d62c0 <_Z22__fetch_global_Serial1v+0x50>)
   d62a0:	4805      	ldr	r0, [pc, #20]	; (d62b8 <_Z22__fetch_global_Serial1v+0x48>)
   d62a2:	f000 fd13 	bl	d6ccc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d62a6:	4804      	ldr	r0, [pc, #16]	; (d62b8 <_Z22__fetch_global_Serial1v+0x48>)
   d62a8:	b002      	add	sp, #8
   d62aa:	bd10      	pop	{r4, pc}
   d62ac:	2003e6a4 	.word	0x2003e6a4
   d62b0:	2003e6a8 	.word	0x2003e6a8
   d62b4:	2003e72c 	.word	0x2003e72c
   d62b8:	2003e7b0 	.word	0x2003e7b0
   d62bc:	2003e590 	.word	0x2003e590
   d62c0:	000d61c9 	.word	0x000d61c9

000d62c4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d62c4:	4770      	bx	lr

000d62c6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d62c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62c8:	4606      	mov	r6, r0
   d62ca:	4615      	mov	r5, r2
   d62cc:	460c      	mov	r4, r1
   d62ce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d62d0:	42bc      	cmp	r4, r7
   d62d2:	d006      	beq.n	d62e2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d62d4:	6833      	ldr	r3, [r6, #0]
   d62d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d62da:	689b      	ldr	r3, [r3, #8]
   d62dc:	4630      	mov	r0, r6
   d62de:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d62e0:	e7f6      	b.n	d62d0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d62e2:	4628      	mov	r0, r5
   d62e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62e6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d62e6:	7c00      	ldrb	r0, [r0, #16]
   d62e8:	2200      	movs	r2, #0
   d62ea:	f7ff b871 	b.w	d53d0 <hal_i2c_write>

000d62ee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d62ee:	7c00      	ldrb	r0, [r0, #16]
   d62f0:	2100      	movs	r1, #0
   d62f2:	f7ff b875 	b.w	d53e0 <hal_i2c_available>

000d62f6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d62f6:	7c00      	ldrb	r0, [r0, #16]
   d62f8:	2100      	movs	r1, #0
   d62fa:	f7ff b879 	b.w	d53f0 <hal_i2c_read>

000d62fe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d62fe:	7c00      	ldrb	r0, [r0, #16]
   d6300:	2100      	movs	r1, #0
   d6302:	f7ff b87d 	b.w	d5400 <hal_i2c_peek>

000d6306 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6306:	7c00      	ldrb	r0, [r0, #16]
   d6308:	2100      	movs	r1, #0
   d630a:	f7ff b881 	b.w	d5410 <hal_i2c_flush>

000d630e <_ZN7TwoWireD0Ev>:
   d630e:	b510      	push	{r4, lr}
   d6310:	2114      	movs	r1, #20
   d6312:	4604      	mov	r4, r0
   d6314:	f000 fcdf 	bl	d6cd6 <_ZdlPvj>
   d6318:	4620      	mov	r0, r4
   d631a:	bd10      	pop	{r4, pc}

000d631c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d631c:	b510      	push	{r4, lr}
   d631e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6322:	4604      	mov	r4, r0
   d6324:	4608      	mov	r0, r1
   d6326:	2100      	movs	r1, #0
   d6328:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d632c:	4b03      	ldr	r3, [pc, #12]	; (d633c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d632e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6330:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6332:	4611      	mov	r1, r2
   d6334:	f7ff f87c 	bl	d5430 <hal_i2c_init>
}
   d6338:	4620      	mov	r0, r4
   d633a:	bd10      	pop	{r4, pc}
   d633c:	000d8380 	.word	0x000d8380

000d6340 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6340:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6342:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6344:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6348:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d634a:	2201      	movs	r2, #1
   d634c:	f04f 33ff 	mov.w	r3, #4294967295
   d6350:	f10d 0107 	add.w	r1, sp, #7
   d6354:	47a0      	blx	r4
}
   d6356:	b002      	add	sp, #8
   d6358:	bd10      	pop	{r4, pc}

000d635a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d635a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d635c:	6803      	ldr	r3, [r0, #0]
   d635e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6360:	f04f 33ff 	mov.w	r3, #4294967295
   d6364:	46a4      	mov	ip, r4
}
   d6366:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d636a:	4760      	bx	ip

000d636c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d636c:	b513      	push	{r0, r1, r4, lr}
   d636e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6370:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6372:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6376:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6378:	f10d 0107 	add.w	r1, sp, #7
   d637c:	2201      	movs	r2, #1
   d637e:	47a0      	blx	r4
}
   d6380:	b002      	add	sp, #8
   d6382:	bd10      	pop	{r4, pc}

000d6384 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6384:	4770      	bx	lr

000d6386 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6386:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6388:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d638e:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d6390:	da10      	bge.n	d63b4 <_ZN9TCPClient9connectedEv+0x2e>
   d6392:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6396:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d639a:	429a      	cmp	r2, r3
   d639c:	d10a      	bne.n	d63b4 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d639e:	6803      	ldr	r3, [r0, #0]
   d63a0:	691b      	ldr	r3, [r3, #16]
   d63a2:	4798      	blx	r3
        if (!rv) {
   d63a4:	4604      	mov	r4, r0
   d63a6:	b928      	cbnz	r0, d63b4 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d63a8:	682b      	ldr	r3, [r5, #0]
   d63aa:	4628      	mov	r0, r5
   d63ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63ae:	4798      	blx	r3
        rv = available();
   d63b0:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d63b2:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d63b4:	2001      	movs	r0, #1
   d63b6:	e7fc      	b.n	d63b2 <_ZN9TCPClient9connectedEv+0x2c>

000d63b8 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d63b8:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d63ba:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d63bc:	43c0      	mvns	r0, r0
   d63be:	0fc0      	lsrs	r0, r0, #31
   d63c0:	4770      	bx	lr

000d63c2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d63c2:	4770      	bx	lr

000d63c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d63c4:	4b06      	ldr	r3, [pc, #24]	; (d63e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d63c6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d63c8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d63ca:	f100 040c 	add.w	r4, r0, #12
	    ||
   d63ce:	d005      	beq.n	d63dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d63d0:	4608      	mov	r0, r1
   d63d2:	f000 fc85 	bl	d6ce0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d63d6:	2800      	cmp	r0, #0
	return nullptr;
   d63d8:	bf08      	it	eq
   d63da:	2400      	moveq	r4, #0
      }
   d63dc:	4620      	mov	r0, r4
   d63de:	bd10      	pop	{r4, pc}
   d63e0:	000d82dc 	.word	0x000d82dc

000d63e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d63e4:	b510      	push	{r4, lr}
   d63e6:	21ac      	movs	r1, #172	; 0xac
   d63e8:	4604      	mov	r4, r0
   d63ea:	f000 fc74 	bl	d6cd6 <_ZdlPvj>
   d63ee:	4620      	mov	r0, r4
   d63f0:	bd10      	pop	{r4, pc}

000d63f2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d63f2:	f7fd be52 	b.w	d409a <_ZdlPv>

000d63f6 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d63f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d63fa:	f04f 0800 	mov.w	r8, #0
   d63fe:	b086      	sub	sp, #24
   d6400:	461d      	mov	r5, r3
   d6402:	f8c0 8004 	str.w	r8, [r0, #4]
   d6406:	4604      	mov	r4, r0
   d6408:	460e      	mov	r6, r1
   d640a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d640c:	4641      	mov	r1, r8
   d640e:	2210      	movs	r2, #16
   d6410:	a802      	add	r0, sp, #8
   d6412:	f001 fbab 	bl	d7b6c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6416:	1c6b      	adds	r3, r5, #1
   d6418:	d009      	beq.n	d642e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d641a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d641e:	fbb5 f3f0 	udiv	r3, r5, r0
   d6422:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6426:	fb00 5313 	mls	r3, r0, r3, r5
   d642a:	4358      	muls	r0, r3
   d642c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d642e:	6960      	ldr	r0, [r4, #20]
   d6430:	2310      	movs	r3, #16
   d6432:	9300      	str	r3, [sp, #0]
   d6434:	6800      	ldr	r0, [r0, #0]
   d6436:	ab02      	add	r3, sp, #8
   d6438:	f241 0205 	movw	r2, #4101	; 0x1005
   d643c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6440:	f7fe fffe 	bl	d5440 <sock_setsockopt>
    if (ret < 0) {
   d6444:	2800      	cmp	r0, #0
   d6446:	da07      	bge.n	d6458 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6448:	f7ff f976 	bl	d5738 <__errno>
   d644c:	6803      	ldr	r3, [r0, #0]
   d644e:	6063      	str	r3, [r4, #4]
        return 0;
   d6450:	2000      	movs	r0, #0
}
   d6452:	b006      	add	sp, #24
   d6454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6458:	6960      	ldr	r0, [r4, #20]
   d645a:	2300      	movs	r3, #0
   d645c:	6800      	ldr	r0, [r0, #0]
   d645e:	463a      	mov	r2, r7
   d6460:	4631      	mov	r1, r6
   d6462:	f7ff f80d 	bl	d5480 <sock_send>
    if (ret < 0) {
   d6466:	1e03      	subs	r3, r0, #0
   d6468:	dbee      	blt.n	d6448 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d646a:	4618      	mov	r0, r3
   d646c:	e7f1      	b.n	d6452 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6470 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6470:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d6472:	6984      	ldr	r4, [r0, #24]
   d6474:	4b0a      	ldr	r3, [pc, #40]	; (d64a0 <_ZN9TCPClientD1Ev+0x30>)
   d6476:	6003      	str	r3, [r0, #0]
   d6478:	4605      	mov	r5, r0
   d647a:	b17c      	cbz	r4, d649c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d647c:	6863      	ldr	r3, [r4, #4]
   d647e:	3b01      	subs	r3, #1
   d6480:	6063      	str	r3, [r4, #4]
   d6482:	b95b      	cbnz	r3, d649c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6484:	6823      	ldr	r3, [r4, #0]
   d6486:	4620      	mov	r0, r4
   d6488:	689b      	ldr	r3, [r3, #8]
   d648a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d648c:	68a3      	ldr	r3, [r4, #8]
   d648e:	3b01      	subs	r3, #1
   d6490:	60a3      	str	r3, [r4, #8]
   d6492:	b91b      	cbnz	r3, d649c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6494:	6823      	ldr	r3, [r4, #0]
   d6496:	4620      	mov	r0, r4
   d6498:	68db      	ldr	r3, [r3, #12]
   d649a:	4798      	blx	r3
   d649c:	4628      	mov	r0, r5
   d649e:	bd38      	pop	{r3, r4, r5, pc}
   d64a0:	000d83dc 	.word	0x000d83dc

000d64a4 <_ZN9TCPClientD0Ev>:
   d64a4:	b510      	push	{r4, lr}
   d64a6:	4604      	mov	r4, r0
   d64a8:	f7ff ffe2 	bl	d6470 <_ZN9TCPClientD1Ev>
   d64ac:	4620      	mov	r0, r4
   d64ae:	211c      	movs	r1, #28
   d64b0:	f000 fc11 	bl	d6cd6 <_ZdlPvj>
   d64b4:	4620      	mov	r0, r4
   d64b6:	bd10      	pop	{r4, pc}

000d64b8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d64b8:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d64ba:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d64bc:	4b05      	ldr	r3, [pc, #20]	; (d64d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d64be:	4604      	mov	r4, r0
   d64c0:	358c      	adds	r5, #140	; 0x8c
   d64c2:	f844 3b04 	str.w	r3, [r4], #4
   d64c6:	4606      	mov	r6, r0
   d64c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64cc:	682b      	ldr	r3, [r5, #0]
   d64ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d64d0:	4630      	mov	r0, r6
   d64d2:	bd70      	pop	{r4, r5, r6, pc}
   d64d4:	000d830c 	.word	0x000d830c

000d64d8 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d64d8:	b510      	push	{r4, lr}
   d64da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d64dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d64e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d64e4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d64e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d64e8:	d005      	beq.n	d64f6 <_ZN9TCPClient4peekEv+0x1e>
   d64ea:	6963      	ldr	r3, [r4, #20]
   d64ec:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d64f0:	4413      	add	r3, r2
   d64f2:	7918      	ldrb	r0, [r3, #4]
}
   d64f4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d64f6:	6803      	ldr	r3, [r0, #0]
   d64f8:	691b      	ldr	r3, [r3, #16]
   d64fa:	4798      	blx	r3
   d64fc:	2800      	cmp	r0, #0
   d64fe:	d1f4      	bne.n	d64ea <_ZN9TCPClient4peekEv+0x12>
   d6500:	f04f 30ff 	mov.w	r0, #4294967295
   d6504:	e7f6      	b.n	d64f4 <_ZN9TCPClient4peekEv+0x1c>

000d6506 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d6506:	b510      	push	{r4, lr}
   d6508:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d650a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d650e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6512:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6514:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6516:	d008      	beq.n	d652a <_ZN9TCPClient4readEv+0x24>
   d6518:	6963      	ldr	r3, [r4, #20]
   d651a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d651e:	1c51      	adds	r1, r2, #1
   d6520:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6524:	4413      	add	r3, r2
   d6526:	7918      	ldrb	r0, [r3, #4]
}
   d6528:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d652a:	6803      	ldr	r3, [r0, #0]
   d652c:	691b      	ldr	r3, [r3, #16]
   d652e:	4798      	blx	r3
   d6530:	2800      	cmp	r0, #0
   d6532:	d1f1      	bne.n	d6518 <_ZN9TCPClient4readEv+0x12>
   d6534:	f04f 30ff 	mov.w	r0, #4294967295
   d6538:	e7f6      	b.n	d6528 <_ZN9TCPClient4readEv+0x22>

000d653a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d653a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d653c:	6943      	ldr	r3, [r0, #20]
   d653e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6540:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6544:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6548:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d654a:	4605      	mov	r5, r0
   d654c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d654e:	d016      	beq.n	d657e <_ZN9TCPClient4readEPhj+0x44>
   d6550:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6552:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6556:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d655a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d655c:	42bc      	cmp	r4, r7
   d655e:	bf28      	it	cs
   d6560:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6562:	3304      	adds	r3, #4
   d6564:	4622      	mov	r2, r4
   d6566:	4419      	add	r1, r3
   d6568:	4630      	mov	r0, r6
   d656a:	f001 faf1 	bl	d7b50 <memcpy>
   d656e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6570:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6574:	4423      	add	r3, r4
   d6576:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d657a:	4620      	mov	r0, r4
   d657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d657e:	6803      	ldr	r3, [r0, #0]
   d6580:	691b      	ldr	r3, [r3, #16]
   d6582:	4798      	blx	r3
   d6584:	2800      	cmp	r0, #0
   d6586:	d1e3      	bne.n	d6550 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d6588:	f04f 34ff 	mov.w	r4, #4294967295
   d658c:	e7f5      	b.n	d657a <_ZN9TCPClient4readEPhj+0x40>

000d658e <_ZN9TCPClient12flush_bufferEv>:
   d658e:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6590:	2300      	movs	r3, #0
   d6592:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6596:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6598:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d659c:	4770      	bx	lr

000d659e <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d659e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65a2:	461f      	mov	r7, r3
    stop();
   d65a4:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d65a6:	460c      	mov	r4, r1
    stop();
   d65a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d65aa:	b08a      	sub	sp, #40	; 0x28
   d65ac:	4605      	mov	r5, r0
   d65ae:	4616      	mov	r6, r2
    stop();
   d65b0:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d65b2:	7d23      	ldrb	r3, [r4, #20]
   d65b4:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d65b8:	2b04      	cmp	r3, #4
   d65ba:	bf0c      	ite	eq
   d65bc:	2002      	moveq	r0, #2
   d65be:	200a      	movne	r0, #10
   d65c0:	2206      	movs	r2, #6
   d65c2:	2101      	movs	r1, #1
   d65c4:	f7fe ff64 	bl	d5490 <sock_socket>
   d65c8:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d65cc:	696b      	ldr	r3, [r5, #20]
   d65ce:	681b      	ldr	r3, [r3, #0]
   d65d0:	2b00      	cmp	r3, #0
   d65d2:	da08      	bge.n	d65e6 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d65d4:	682b      	ldr	r3, [r5, #0]
   d65d6:	4628      	mov	r0, r5
   d65d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d65da:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d65dc:	4798      	blx	r3
}
   d65de:	4620      	mov	r0, r4
   d65e0:	b00a      	add	sp, #40	; 0x28
   d65e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d65e6:	4628      	mov	r0, r5
   d65e8:	f7ff ffd1 	bl	d658e <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d65ec:	b1b7      	cbz	r7, d661c <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d65ee:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d65f0:	a903      	add	r1, sp, #12
   d65f2:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d65f4:	9303      	str	r3, [sp, #12]
   d65f6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d65fa:	f7fe fe61 	bl	d52c0 <if_index_to_name>
   d65fe:	2800      	cmp	r0, #0
   d6600:	d1e8      	bne.n	d65d4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6602:	6968      	ldr	r0, [r5, #20]
   d6604:	2306      	movs	r3, #6
   d6606:	9300      	str	r3, [sp, #0]
   d6608:	6800      	ldr	r0, [r0, #0]
   d660a:	ab03      	add	r3, sp, #12
   d660c:	f241 020b 	movw	r2, #4107	; 0x100b
   d6610:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6614:	f7fe ff14 	bl	d5440 <sock_setsockopt>
   d6618:	2800      	cmp	r0, #0
   d661a:	d1db      	bne.n	d65d4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d661c:	221c      	movs	r2, #28
   d661e:	2100      	movs	r1, #0
   d6620:	a803      	add	r0, sp, #12
   d6622:	f001 faa3 	bl	d7b6c <memset>
    if (ip.version() == 4) {
   d6626:	7d23      	ldrb	r3, [r4, #20]
   d6628:	2b04      	cmp	r3, #4
   d662a:	d11d      	bne.n	d6668 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d662c:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6630:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d6632:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d6636:	f7fe fe83 	bl	d5340 <inet_htons>
   d663a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d663e:	6860      	ldr	r0, [r4, #4]
   d6640:	f7fe fe76 	bl	d5330 <inet_htonl>
   d6644:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6646:	696b      	ldr	r3, [r5, #20]
   d6648:	221c      	movs	r2, #28
   d664a:	6818      	ldr	r0, [r3, #0]
   d664c:	a903      	add	r1, sp, #12
   d664e:	f7fe ff07 	bl	d5460 <sock_connect>
   d6652:	2800      	cmp	r0, #0
   d6654:	d1be      	bne.n	d65d4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d6656:	3404      	adds	r4, #4
   d6658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d665a:	696d      	ldr	r5, [r5, #20]
   d665c:	358c      	adds	r5, #140	; 0x8c
   d665e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6660:	6823      	ldr	r3, [r4, #0]
   d6662:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d6664:	2401      	movs	r4, #1
   d6666:	e7ba      	b.n	d65de <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d6668:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d666c:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d666e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d6672:	f7fe fe65 	bl	d5340 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6676:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6678:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d667c:	1d23      	adds	r3, r4, #4
   d667e:	f104 0714 	add.w	r7, r4, #20
   d6682:	6818      	ldr	r0, [r3, #0]
   d6684:	6859      	ldr	r1, [r3, #4]
   d6686:	4632      	mov	r2, r6
   d6688:	c203      	stmia	r2!, {r0, r1}
   d668a:	3308      	adds	r3, #8
   d668c:	42bb      	cmp	r3, r7
   d668e:	4616      	mov	r6, r2
   d6690:	d1f7      	bne.n	d6682 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d6692:	e7d8      	b.n	d6646 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d6694 <_ZN9TCPClient9availableEv>:
{
   d6694:	b530      	push	{r4, r5, lr}
   d6696:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d6698:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d669c:	b08b      	sub	sp, #44	; 0x2c
   d669e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d66a0:	b12b      	cbz	r3, d66ae <_ZN9TCPClient9availableEv+0x1a>
   d66a2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d66a6:	429a      	cmp	r2, r3
   d66a8:	d101      	bne.n	d66ae <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d66aa:	f7ff ff70 	bl	d658e <_ZN9TCPClient12flush_bufferEv>
   d66ae:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d66b0:	6808      	ldr	r0, [r1, #0]
   d66b2:	2800      	cmp	r0, #0
   d66b4:	db18      	blt.n	d66e8 <_ZN9TCPClient9availableEv+0x54>
   d66b6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d66ba:	2d7f      	cmp	r5, #127	; 0x7f
   d66bc:	d814      	bhi.n	d66e8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d66be:	3104      	adds	r1, #4
   d66c0:	2308      	movs	r3, #8
   d66c2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d66c6:	4429      	add	r1, r5
   d66c8:	f7fe fed2 	bl	d5470 <sock_recv>
            if (ret > 0) {
   d66cc:	2800      	cmp	r0, #0
   d66ce:	dd13      	ble.n	d66f8 <_ZN9TCPClient9availableEv+0x64>
   d66d0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d66d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66d6:	b90a      	cbnz	r2, d66dc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d66d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d66dc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d66de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66e2:	4410      	add	r0, r2
   d66e4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d66e8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d66ea:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d66ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d66f2:	1ac0      	subs	r0, r0, r3
   d66f4:	b00b      	add	sp, #44	; 0x2c
   d66f6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d66f8:	f7ff f81e 	bl	d5738 <__errno>
   d66fc:	6803      	ldr	r3, [r0, #0]
   d66fe:	2b0b      	cmp	r3, #11
   d6700:	d0f2      	beq.n	d66e8 <_ZN9TCPClient9availableEv+0x54>
   d6702:	f7ff f819 	bl	d5738 <__errno>
   d6706:	6803      	ldr	r3, [r0, #0]
   d6708:	2b0b      	cmp	r3, #11
   d670a:	d0ed      	beq.n	d66e8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d670c:	2320      	movs	r3, #32
   d670e:	2500      	movs	r5, #0
   d6710:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6714:	f7ff f810 	bl	d5738 <__errno>
   d6718:	6803      	ldr	r3, [r0, #0]
   d671a:	9301      	str	r3, [sp, #4]
   d671c:	4b08      	ldr	r3, [pc, #32]	; (d6740 <_ZN9TCPClient9availableEv+0xac>)
   d671e:	4909      	ldr	r1, [pc, #36]	; (d6744 <_ZN9TCPClient9availableEv+0xb0>)
   d6720:	9300      	str	r3, [sp, #0]
   d6722:	aa02      	add	r2, sp, #8
   d6724:	462b      	mov	r3, r5
   d6726:	2032      	movs	r0, #50	; 0x32
   d6728:	f7fe ff3a 	bl	d55a0 <log_message>
                    sock_close(d_->sock);
   d672c:	6963      	ldr	r3, [r4, #20]
   d672e:	6818      	ldr	r0, [r3, #0]
   d6730:	f7fe fe8e 	bl	d5450 <sock_close>
   d6734:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6736:	f04f 32ff 	mov.w	r2, #4294967295
   d673a:	601a      	str	r2, [r3, #0]
   d673c:	e7d4      	b.n	d66e8 <_ZN9TCPClient9availableEv+0x54>
   d673e:	bf00      	nop
   d6740:	000d83a7 	.word	0x000d83a7
   d6744:	000d83a0 	.word	0x000d83a0

000d6748 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6748:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d674a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d674c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d674e:	6818      	ldr	r0, [r3, #0]
   d6750:	2800      	cmp	r0, #0
   d6752:	db01      	blt.n	d6758 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6754:	f7fe fe7c 	bl	d5450 <sock_close>
   d6758:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d675a:	f04f 32ff 	mov.w	r2, #4294967295
   d675e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6760:	6960      	ldr	r0, [r4, #20]
   d6762:	2211      	movs	r2, #17
   d6764:	2100      	movs	r1, #0
   d6766:	308c      	adds	r0, #140	; 0x8c
   d6768:	f001 fa00 	bl	d7b6c <memset>
    flush_buffer();
   d676c:	4620      	mov	r0, r4
}
   d676e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d6772:	f7ff bf0c 	b.w	d658e <_ZN9TCPClient12flush_bufferEv>

000d6776 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d6776:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6778:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d677a:	4604      	mov	r4, r0
          total(0) {
   d677c:	6001      	str	r1, [r0, #0]
   d677e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d6782:	3088      	adds	r0, #136	; 0x88
   d6784:	f7ff fc3a 	bl	d5ffc <_ZN9IPAddressC1Ev>
}
   d6788:	4620      	mov	r0, r4
   d678a:	bd10      	pop	{r4, pc}

000d678c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d678c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d678e:	2300      	movs	r3, #0
   d6790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6794:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6798:	4a0e      	ldr	r2, [pc, #56]	; (d67d4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d679a:	6103      	str	r3, [r0, #16]
   d679c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d679e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d67a0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d67a2:	20ac      	movs	r0, #172	; 0xac
   d67a4:	9101      	str	r1, [sp, #4]
   d67a6:	f7fd fc74 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d67aa:	1e05      	subs	r5, r0, #0
   d67ac:	f105 060c 	add.w	r6, r5, #12
   d67b0:	d008      	beq.n	d67c4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d67b2:	2301      	movs	r3, #1
   d67b4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d67b8:	4b07      	ldr	r3, [pc, #28]	; (d67d8 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d67ba:	9901      	ldr	r1, [sp, #4]
   d67bc:	602b      	str	r3, [r5, #0]
   d67be:	4630      	mov	r0, r6
   d67c0:	f7ff ffd9 	bl	d6776 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d67c4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d67c6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d67ca:	f7ff fee0 	bl	d658e <_ZN9TCPClient12flush_bufferEv>
}
   d67ce:	b002      	add	sp, #8
   d67d0:	bd70      	pop	{r4, r5, r6, pc}
   d67d2:	bf00      	nop
   d67d4:	000d83dc 	.word	0x000d83dc
   d67d8:	000d83c0 	.word	0x000d83c0

000d67dc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d67dc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d67de:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d67e2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d67e4:	f7ff ffd2 	bl	d678c <_ZN9TCPClientC1Ei>
}
   d67e8:	4620      	mov	r0, r4
   d67ea:	bd10      	pop	{r4, pc}

000d67ec <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d67ec:	b510      	push	{r4, lr}
   d67ee:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d67f0:	6800      	ldr	r0, [r0, #0]
   d67f2:	2800      	cmp	r0, #0
   d67f4:	db01      	blt.n	d67fa <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d67f6:	f7fe fe2b 	bl	d5450 <sock_close>
    }
}
   d67fa:	4620      	mov	r0, r4
   d67fc:	bd10      	pop	{r4, pc}

000d67fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d67fe:	300c      	adds	r0, #12
   d6800:	f7ff bff4 	b.w	d67ec <_ZN9TCPClient4DataD1Ev>

000d6804 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6808:	4698      	mov	r8, r3
    stop();
   d680a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d680c:	b093      	sub	sp, #76	; 0x4c
   d680e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6810:	2400      	movs	r4, #0
    stop();
   d6812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6814:	4606      	mov	r6, r0
   d6816:	4617      	mov	r7, r2
    stop();
   d6818:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d681a:	4628      	mov	r0, r5
   d681c:	466b      	mov	r3, sp
   d681e:	4622      	mov	r2, r4
   d6820:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6822:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6824:	f7fe fd04 	bl	d5230 <netdb_getaddrinfo>
   d6828:	4605      	mov	r5, r0
   d682a:	2800      	cmp	r0, #0
   d682c:	d163      	bne.n	d68f6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d682e:	9b00      	ldr	r3, [sp, #0]
   d6830:	2b00      	cmp	r3, #0
   d6832:	d04b      	beq.n	d68cc <_ZN9TCPClient7connectEPKctm+0xc8>
   d6834:	695b      	ldr	r3, [r3, #20]
   d6836:	2b00      	cmp	r3, #0
   d6838:	d048      	beq.n	d68cc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d683a:	a806      	add	r0, sp, #24
   d683c:	f7ff fbde 	bl	d5ffc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6840:	9b00      	ldr	r3, [sp, #0]
   d6842:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6844:	7863      	ldrb	r3, [r4, #1]
   d6846:	2b02      	cmp	r3, #2
   d6848:	d104      	bne.n	d6854 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d684a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d684c:	a806      	add	r0, sp, #24
   d684e:	f7ff f8db 	bl	d5a08 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6852:	e026      	b.n	d68a2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6854:	2b0a      	cmp	r3, #10
   d6856:	d124      	bne.n	d68a2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6858:	2211      	movs	r2, #17
   d685a:	4629      	mov	r1, r5
   d685c:	a801      	add	r0, sp, #4
   d685e:	f001 f985 	bl	d7b6c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6862:	68a3      	ldr	r3, [r4, #8]
   d6864:	2b00      	cmp	r3, #0
   d6866:	d038      	beq.n	d68da <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6868:	f104 0308 	add.w	r3, r4, #8
   d686c:	f10d 0c04 	add.w	ip, sp, #4
   d6870:	3418      	adds	r4, #24
   d6872:	6818      	ldr	r0, [r3, #0]
   d6874:	6859      	ldr	r1, [r3, #4]
   d6876:	4662      	mov	r2, ip
   d6878:	c203      	stmia	r2!, {r0, r1}
   d687a:	3308      	adds	r3, #8
   d687c:	42a3      	cmp	r3, r4
   d687e:	4694      	mov	ip, r2
   d6880:	d1f7      	bne.n	d6872 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6882:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6884:	a901      	add	r1, sp, #4
   d6886:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6888:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d688c:	f7ff fbc4 	bl	d6018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6890:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6898:	ac07      	add	r4, sp, #28
   d689a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d689c:	f8dc 3000 	ldr.w	r3, [ip]
   d68a0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d68a2:	a806      	add	r0, sp, #24
   d68a4:	f7ff fbca 	bl	d603c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d68a8:	b180      	cbz	r0, d68cc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d68aa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d68ac:	ad07      	add	r5, sp, #28
   d68ae:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d68b2:	4b12      	ldr	r3, [pc, #72]	; (d68fc <_ZN9TCPClient7connectEPKctm+0xf8>)
   d68b4:	930c      	str	r3, [sp, #48]	; 0x30
   d68b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68b8:	ac0d      	add	r4, sp, #52	; 0x34
   d68ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68bc:	682b      	ldr	r3, [r5, #0]
   d68be:	7023      	strb	r3, [r4, #0]
   d68c0:	463a      	mov	r2, r7
   d68c2:	4643      	mov	r3, r8
   d68c4:	a90c      	add	r1, sp, #48	; 0x30
   d68c6:	4630      	mov	r0, r6
   d68c8:	47c8      	blx	r9
   d68ca:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d68cc:	9800      	ldr	r0, [sp, #0]
   d68ce:	f7fe fca7 	bl	d5220 <netdb_freeaddrinfo>
}
   d68d2:	4628      	mov	r0, r5
   d68d4:	b013      	add	sp, #76	; 0x4c
   d68d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d68da:	68e3      	ldr	r3, [r4, #12]
   d68dc:	2b00      	cmp	r3, #0
   d68de:	d1c3      	bne.n	d6868 <_ZN9TCPClient7connectEPKctm+0x64>
   d68e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d68e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d68e8:	f7fe fd22 	bl	d5330 <inet_htonl>
   d68ec:	4581      	cmp	r9, r0
   d68ee:	d1bb      	bne.n	d6868 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d68f0:	f104 0114 	add.w	r1, r4, #20
   d68f4:	e7aa      	b.n	d684c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d68f6:	4625      	mov	r5, r4
   d68f8:	e7e8      	b.n	d68cc <_ZN9TCPClient7connectEPKctm+0xc8>
   d68fa:	bf00      	nop
   d68fc:	000d830c 	.word	0x000d830c

000d6900 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6900:	2200      	movs	r2, #0
   d6902:	6840      	ldr	r0, [r0, #4]
   d6904:	4611      	mov	r1, r2
   d6906:	f7fe be97 	b.w	d5638 <network_ready>

000d690a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d690a:	2200      	movs	r2, #0
   d690c:	6840      	ldr	r0, [r0, #4]
   d690e:	4611      	mov	r1, r2
   d6910:	f7fe beb2 	b.w	d5678 <network_listening>

000d6914 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6914:	2200      	movs	r2, #0
   d6916:	6840      	ldr	r0, [r0, #4]
   d6918:	4611      	mov	r1, r2
   d691a:	f7fe bebd 	b.w	d5698 <network_get_listen_timeout>

000d691e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d691e:	6840      	ldr	r0, [r0, #4]
   d6920:	2200      	movs	r2, #0
   d6922:	f7fe beb1 	b.w	d5688 <network_set_listen_timeout>

000d6926 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6926:	6840      	ldr	r0, [r0, #4]
   d6928:	2200      	movs	r2, #0
   d692a:	f081 0101 	eor.w	r1, r1, #1
   d692e:	f7fe be9b 	b.w	d5668 <network_listen>

000d6932 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6932:	2300      	movs	r3, #0
   d6934:	6840      	ldr	r0, [r0, #4]
   d6936:	461a      	mov	r2, r3
   d6938:	4619      	mov	r1, r3
   d693a:	f7fe be8d 	b.w	d5658 <network_off>

000d693e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d693e:	2200      	movs	r2, #0
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	4611      	mov	r1, r2
   d6944:	f7fe be68 	b.w	d5618 <network_connecting>

000d6948 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6948:	6840      	ldr	r0, [r0, #4]
   d694a:	2200      	movs	r2, #0
   d694c:	2102      	movs	r1, #2
   d694e:	f7fe be6b 	b.w	d5628 <network_disconnect>

000d6952 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6952:	2300      	movs	r3, #0
   d6954:	6840      	ldr	r0, [r0, #4]
   d6956:	461a      	mov	r2, r3
   d6958:	f7fe be56 	b.w	d5608 <network_connect>

000d695c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d695c:	4b02      	ldr	r3, [pc, #8]	; (d6968 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d695e:	2204      	movs	r2, #4
   d6960:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6962:	4a02      	ldr	r2, [pc, #8]	; (d696c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6964:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6966:	4770      	bx	lr
   d6968:	2003e7c4 	.word	0x2003e7c4
   d696c:	000d8428 	.word	0x000d8428

000d6970 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6970:	2300      	movs	r3, #0
   d6972:	6840      	ldr	r0, [r0, #4]
   d6974:	461a      	mov	r2, r3
   d6976:	f7fe be47 	b.w	d5608 <network_connect>

000d697a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d697a:	6840      	ldr	r0, [r0, #4]
   d697c:	2200      	movs	r2, #0
   d697e:	2102      	movs	r1, #2
   d6980:	f7fe be52 	b.w	d5628 <network_disconnect>

000d6984 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6984:	2200      	movs	r2, #0
   d6986:	6840      	ldr	r0, [r0, #4]
   d6988:	4611      	mov	r1, r2
   d698a:	f7fe be45 	b.w	d5618 <network_connecting>

000d698e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d698e:	2200      	movs	r2, #0
   d6990:	6840      	ldr	r0, [r0, #4]
   d6992:	4611      	mov	r1, r2
   d6994:	f7fe be50 	b.w	d5638 <network_ready>

000d6998 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6998:	2300      	movs	r3, #0
   d699a:	6840      	ldr	r0, [r0, #4]
   d699c:	461a      	mov	r2, r3
   d699e:	4619      	mov	r1, r3
   d69a0:	f7fe be52 	b.w	d5648 <network_on>

000d69a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d69a4:	2300      	movs	r3, #0
   d69a6:	6840      	ldr	r0, [r0, #4]
   d69a8:	461a      	mov	r2, r3
   d69aa:	4619      	mov	r1, r3
   d69ac:	f7fe be54 	b.w	d5658 <network_off>

000d69b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d69b0:	6840      	ldr	r0, [r0, #4]
   d69b2:	2100      	movs	r1, #0
   d69b4:	f7fe be78 	b.w	d56a8 <network_is_on>

000d69b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d69b8:	6840      	ldr	r0, [r0, #4]
   d69ba:	2100      	movs	r1, #0
   d69bc:	f7fe be7c 	b.w	d56b8 <network_is_off>

000d69c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d69c0:	6840      	ldr	r0, [r0, #4]
   d69c2:	2200      	movs	r2, #0
   d69c4:	f081 0101 	eor.w	r1, r1, #1
   d69c8:	f7fe be4e 	b.w	d5668 <network_listen>

000d69cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d69cc:	6840      	ldr	r0, [r0, #4]
   d69ce:	2200      	movs	r2, #0
   d69d0:	f7fe be5a 	b.w	d5688 <network_set_listen_timeout>

000d69d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d69d4:	2200      	movs	r2, #0
   d69d6:	6840      	ldr	r0, [r0, #4]
   d69d8:	4611      	mov	r1, r2
   d69da:	f7fe be5d 	b.w	d5698 <network_get_listen_timeout>

000d69de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d69de:	2200      	movs	r2, #0
   d69e0:	6840      	ldr	r0, [r0, #4]
   d69e2:	4611      	mov	r1, r2
   d69e4:	f7fe be48 	b.w	d5678 <network_listening>

000d69e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d69e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d69ec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d69ee:	b095      	sub	sp, #84	; 0x54
   d69f0:	4616      	mov	r6, r2
   d69f2:	460d      	mov	r5, r1
   d69f4:	4607      	mov	r7, r0
    IPAddress addr;
   d69f6:	f7ff fb01 	bl	d5ffc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d69fa:	4621      	mov	r1, r4
   d69fc:	2218      	movs	r2, #24
   d69fe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6a00:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6a02:	f001 f8b3 	bl	d7b6c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6a06:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6a08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6a0c:	4621      	mov	r1, r4
   d6a0e:	466b      	mov	r3, sp
   d6a10:	aa0c      	add	r2, sp, #48	; 0x30
   d6a12:	4630      	mov	r0, r6
   d6a14:	f7fe fc0c 	bl	d5230 <netdb_getaddrinfo>
    if (!r) {
   d6a18:	4604      	mov	r4, r0
   d6a1a:	2800      	cmp	r0, #0
   d6a1c:	d14c      	bne.n	d6ab8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a1e:	4602      	mov	r2, r0
   d6a20:	2101      	movs	r1, #1
   d6a22:	6868      	ldr	r0, [r5, #4]
   d6a24:	f7fe fe08 	bl	d5638 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a28:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a2a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a2c:	4622      	mov	r2, r4
   d6a2e:	6868      	ldr	r0, [r5, #4]
   d6a30:	f7fe fe02 	bl	d5638 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a34:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a36:	4681      	mov	r9, r0
        bool ok = false;
   d6a38:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a3a:	2e00      	cmp	r6, #0
   d6a3c:	d03c      	beq.n	d6ab8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6a3e:	2900      	cmp	r1, #0
   d6a40:	d13a      	bne.n	d6ab8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6a42:	6873      	ldr	r3, [r6, #4]
   d6a44:	2b02      	cmp	r3, #2
   d6a46:	d003      	beq.n	d6a50 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6a48:	2b0a      	cmp	r3, #10
   d6a4a:	d011      	beq.n	d6a70 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a4c:	69f6      	ldr	r6, [r6, #28]
   d6a4e:	e7f4      	b.n	d6a3a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6a50:	f1b8 0f00 	cmp.w	r8, #0
   d6a54:	d00a      	beq.n	d6a6c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6a56:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6a58:	a806      	add	r0, sp, #24
   d6a5a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6a5c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6a5e:	f7ff fb1d 	bl	d609c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a64:	1d3c      	adds	r4, r7, #4
   d6a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a68:	682b      	ldr	r3, [r5, #0]
   d6a6a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6a6c:	4641      	mov	r1, r8
   d6a6e:	e7ed      	b.n	d6a4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6a70:	f1b9 0f00 	cmp.w	r9, #0
   d6a74:	d101      	bne.n	d6a7a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6a76:	4649      	mov	r1, r9
   d6a78:	e7e8      	b.n	d6a4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6a7a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6a7c:	2210      	movs	r2, #16
   d6a7e:	a801      	add	r0, sp, #4
   d6a80:	f001 f874 	bl	d7b6c <memset>
                    a.v = 6;
   d6a84:	2306      	movs	r3, #6
   d6a86:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a8a:	ad01      	add	r5, sp, #4
   d6a8c:	f104 0308 	add.w	r3, r4, #8
   d6a90:	3418      	adds	r4, #24
   d6a92:	6818      	ldr	r0, [r3, #0]
   d6a94:	6859      	ldr	r1, [r3, #4]
   d6a96:	462a      	mov	r2, r5
   d6a98:	c203      	stmia	r2!, {r0, r1}
   d6a9a:	3308      	adds	r3, #8
   d6a9c:	42a3      	cmp	r3, r4
   d6a9e:	4615      	mov	r5, r2
   d6aa0:	d1f7      	bne.n	d6a92 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6aa2:	a901      	add	r1, sp, #4
   d6aa4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6aa6:	ad07      	add	r5, sp, #28
   d6aa8:	f7ff fab6 	bl	d6018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6aae:	1d3c      	adds	r4, r7, #4
   d6ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ab2:	682b      	ldr	r3, [r5, #0]
   d6ab4:	7023      	strb	r3, [r4, #0]
   d6ab6:	e7de      	b.n	d6a76 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ab8:	9800      	ldr	r0, [sp, #0]
   d6aba:	f7fe fbb1 	bl	d5220 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6abe:	4638      	mov	r0, r7
   d6ac0:	b015      	add	sp, #84	; 0x54
   d6ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6ac8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ac8:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6aca:	4a03      	ldr	r2, [pc, #12]	; (d6ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6acc:	601a      	str	r2, [r3, #0]
   d6ace:	2200      	movs	r2, #0
   d6ad0:	605a      	str	r2, [r3, #4]

} // spark
   d6ad2:	4770      	bx	lr
   d6ad4:	2003e7cc 	.word	0x2003e7cc
   d6ad8:	000d8464 	.word	0x000d8464

000d6adc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6adc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6ade:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6ae0:	d902      	bls.n	d6ae8 <pinAvailable+0xc>
    return false;
   d6ae2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6ae4:	b002      	add	sp, #8
   d6ae6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6ae8:	f1a0 030b 	sub.w	r3, r0, #11
   d6aec:	2b02      	cmp	r3, #2
   d6aee:	d81a      	bhi.n	d6b26 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6af0:	4c17      	ldr	r4, [pc, #92]	; (d6b50 <pinAvailable+0x74>)
   d6af2:	7821      	ldrb	r1, [r4, #0]
   d6af4:	f3bf 8f5b 	dmb	ish
   d6af8:	f011 0101 	ands.w	r1, r1, #1
   d6afc:	d10b      	bne.n	d6b16 <pinAvailable+0x3a>
   d6afe:	4620      	mov	r0, r4
   d6b00:	9101      	str	r1, [sp, #4]
   d6b02:	f7fd fad7 	bl	d40b4 <__cxa_guard_acquire>
   d6b06:	9901      	ldr	r1, [sp, #4]
   d6b08:	b128      	cbz	r0, d6b16 <pinAvailable+0x3a>
   d6b0a:	4812      	ldr	r0, [pc, #72]	; (d6b54 <pinAvailable+0x78>)
   d6b0c:	f7fe fe68 	bl	d57e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6b10:	4620      	mov	r0, r4
   d6b12:	f7fd fad4 	bl	d40be <__cxa_guard_release>
   d6b16:	4b0f      	ldr	r3, [pc, #60]	; (d6b54 <pinAvailable+0x78>)
   d6b18:	7818      	ldrb	r0, [r3, #0]
   d6b1a:	f7fe fcd9 	bl	d54d0 <hal_spi_is_enabled>
   d6b1e:	2800      	cmp	r0, #0
   d6b20:	d1df      	bne.n	d6ae2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6b22:	2001      	movs	r0, #1
   d6b24:	e7de      	b.n	d6ae4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6b26:	2801      	cmp	r0, #1
   d6b28:	d809      	bhi.n	d6b3e <pinAvailable+0x62>
   d6b2a:	f000 f8a7 	bl	d6c7c <_Z19__fetch_global_Wirev>
   d6b2e:	2100      	movs	r1, #0
   d6b30:	7c00      	ldrb	r0, [r0, #16]
   d6b32:	f7fe fc75 	bl	d5420 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6b36:	f080 0001 	eor.w	r0, r0, #1
   d6b3a:	b2c0      	uxtb	r0, r0
   d6b3c:	e7d2      	b.n	d6ae4 <pinAvailable+0x8>
   d6b3e:	3809      	subs	r0, #9
   d6b40:	2801      	cmp	r0, #1
   d6b42:	d8ee      	bhi.n	d6b22 <pinAvailable+0x46>
   d6b44:	f7ff fb94 	bl	d6270 <_Z22__fetch_global_Serial1v>
   d6b48:	7c00      	ldrb	r0, [r0, #16]
   d6b4a:	f7fe fc31 	bl	d53b0 <hal_usart_is_enabled>
   d6b4e:	e7f2      	b.n	d6b36 <pinAvailable+0x5a>
   d6b50:	2003e594 	.word	0x2003e594
   d6b54:	2003e598 	.word	0x2003e598

000d6b58 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b58:	2823      	cmp	r0, #35	; 0x23
{
   d6b5a:	b538      	push	{r3, r4, r5, lr}
   d6b5c:	4604      	mov	r4, r0
   d6b5e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b60:	d80a      	bhi.n	d6b78 <pinMode+0x20>
   d6b62:	29ff      	cmp	r1, #255	; 0xff
   d6b64:	d008      	beq.n	d6b78 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6b66:	f7ff ffb9 	bl	d6adc <pinAvailable>
   d6b6a:	b128      	cbz	r0, d6b78 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6b6c:	4629      	mov	r1, r5
   d6b6e:	4620      	mov	r0, r4
}
   d6b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6b74:	f7fe bb6c 	b.w	d5250 <HAL_Pin_Mode>
}
   d6b78:	bd38      	pop	{r3, r4, r5, pc}

000d6b7a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6b7a:	b538      	push	{r3, r4, r5, lr}
   d6b7c:	4604      	mov	r4, r0
   d6b7e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b80:	f7fe fb6e 	bl	d5260 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6b84:	28ff      	cmp	r0, #255	; 0xff
   d6b86:	d010      	beq.n	d6baa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6b88:	2806      	cmp	r0, #6
   d6b8a:	d804      	bhi.n	d6b96 <digitalWrite+0x1c>
   d6b8c:	234d      	movs	r3, #77	; 0x4d
   d6b8e:	fa23 f000 	lsr.w	r0, r3, r0
   d6b92:	07c3      	lsls	r3, r0, #31
   d6b94:	d409      	bmi.n	d6baa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6b96:	4620      	mov	r0, r4
   d6b98:	f7ff ffa0 	bl	d6adc <pinAvailable>
   d6b9c:	b128      	cbz	r0, d6baa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6b9e:	4629      	mov	r1, r5
   d6ba0:	4620      	mov	r0, r4
}
   d6ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6ba6:	f7fe bb63 	b.w	d5270 <HAL_GPIO_Write>
}
   d6baa:	bd38      	pop	{r3, r4, r5, pc}

000d6bac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6bac:	b510      	push	{r4, lr}
   d6bae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bb0:	f7fe fb56 	bl	d5260 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6bb4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6bb6:	b2db      	uxtb	r3, r3
   d6bb8:	2b01      	cmp	r3, #1
   d6bba:	d908      	bls.n	d6bce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	f7ff ff8d 	bl	d6adc <pinAvailable>
   d6bc2:	b120      	cbz	r0, d6bce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6bc4:	4620      	mov	r0, r4
}
   d6bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6bca:	f7fe bb59 	b.w	d5280 <HAL_GPIO_Read>
}
   d6bce:	2000      	movs	r0, #0
   d6bd0:	bd10      	pop	{r4, pc}

000d6bd2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6bd2:	280d      	cmp	r0, #13
{
   d6bd4:	b510      	push	{r4, lr}
   d6bd6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6bd8:	bf9c      	itt	ls
   d6bda:	340e      	addls	r4, #14
   d6bdc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6bde:	4620      	mov	r0, r4
   d6be0:	f7ff ff7c 	bl	d6adc <pinAvailable>
   d6be4:	b150      	cbz	r0, d6bfc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6be6:	2103      	movs	r1, #3
   d6be8:	4620      	mov	r0, r4
   d6bea:	f7fe fb29 	bl	d5240 <HAL_Validate_Pin_Function>
   d6bee:	2803      	cmp	r0, #3
   d6bf0:	d104      	bne.n	d6bfc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6bf2:	4620      	mov	r0, r4
}
   d6bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6bf8:	f7fe bb52 	b.w	d52a0 <hal_adc_read>
}
   d6bfc:	2000      	movs	r0, #0
   d6bfe:	bd10      	pop	{r4, pc}

000d6c00 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6c00:	b538      	push	{r3, r4, r5, lr}
   d6c02:	4604      	mov	r4, r0
   d6c04:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6c06:	f7ff ff69 	bl	d6adc <pinAvailable>
   d6c0a:	b1f0      	cbz	r0, d6c4a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6c0c:	2104      	movs	r1, #4
   d6c0e:	4620      	mov	r0, r4
   d6c10:	f7fe fb16 	bl	d5240 <HAL_Validate_Pin_Function>
   d6c14:	2804      	cmp	r0, #4
   d6c16:	d105      	bne.n	d6c24 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6c18:	b2a9      	uxth	r1, r5
   d6c1a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6c20:	f7fe bb36 	b.w	d5290 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6c24:	2102      	movs	r1, #2
   d6c26:	4620      	mov	r0, r4
   d6c28:	f7fe fb0a 	bl	d5240 <HAL_Validate_Pin_Function>
   d6c2c:	2802      	cmp	r0, #2
   d6c2e:	d10c      	bne.n	d6c4a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c30:	4620      	mov	r0, r4
   d6c32:	f7fe fb15 	bl	d5260 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6c36:	2801      	cmp	r0, #1
   d6c38:	d001      	beq.n	d6c3e <_Z11analogWritetm+0x3e>
   d6c3a:	2804      	cmp	r0, #4
   d6c3c:	d105      	bne.n	d6c4a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6c3e:	4629      	mov	r1, r5
   d6c40:	4620      	mov	r0, r4
}
   d6c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d6c46:	f7fe bb33 	b.w	d52b0 <hal_pwm_write_ext>
}
   d6c4a:	bd38      	pop	{r3, r4, r5, pc}

000d6c4c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6c4c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6c4e:	2300      	movs	r3, #0
   d6c50:	2520      	movs	r5, #32
   d6c52:	8043      	strh	r3, [r0, #2]
   d6c54:	2314      	movs	r3, #20
{
   d6c56:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6c58:	8003      	strh	r3, [r0, #0]
   d6c5a:	6085      	str	r5, [r0, #8]
   d6c5c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6c5e:	4906      	ldr	r1, [pc, #24]	; (d6c78 <_Z17acquireWireBufferv+0x2c>)
   d6c60:	4628      	mov	r0, r5
   d6c62:	f000 f83a 	bl	d6cda <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6c66:	4904      	ldr	r1, [pc, #16]	; (d6c78 <_Z17acquireWireBufferv+0x2c>)
	};
   d6c68:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6c6a:	4628      	mov	r0, r5
   d6c6c:	f000 f835 	bl	d6cda <_ZnajRKSt9nothrow_t>
	};
   d6c70:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6c72:	4620      	mov	r0, r4
   d6c74:	bd38      	pop	{r3, r4, r5, pc}
   d6c76:	bf00      	nop
   d6c78:	000d8498 	.word	0x000d8498

000d6c7c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6c7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c7e:	4d0f      	ldr	r5, [pc, #60]	; (d6cbc <_Z19__fetch_global_Wirev+0x40>)
   d6c80:	7829      	ldrb	r1, [r5, #0]
   d6c82:	f3bf 8f5b 	dmb	ish
   d6c86:	f011 0401 	ands.w	r4, r1, #1
{
   d6c8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c8c:	d113      	bne.n	d6cb6 <_Z19__fetch_global_Wirev+0x3a>
   d6c8e:	4628      	mov	r0, r5
   d6c90:	f7fd fa10 	bl	d40b4 <__cxa_guard_acquire>
   d6c94:	b178      	cbz	r0, d6cb6 <_Z19__fetch_global_Wirev+0x3a>
   d6c96:	a801      	add	r0, sp, #4
   d6c98:	f7ff ffd8 	bl	d6c4c <_Z17acquireWireBufferv>
   d6c9c:	aa01      	add	r2, sp, #4
   d6c9e:	4621      	mov	r1, r4
   d6ca0:	4807      	ldr	r0, [pc, #28]	; (d6cc0 <_Z19__fetch_global_Wirev+0x44>)
   d6ca2:	f7ff fb3b 	bl	d631c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6ca6:	4628      	mov	r0, r5
   d6ca8:	f7fd fa09 	bl	d40be <__cxa_guard_release>
   d6cac:	4a05      	ldr	r2, [pc, #20]	; (d6cc4 <_Z19__fetch_global_Wirev+0x48>)
   d6cae:	4906      	ldr	r1, [pc, #24]	; (d6cc8 <_Z19__fetch_global_Wirev+0x4c>)
   d6cb0:	4803      	ldr	r0, [pc, #12]	; (d6cc0 <_Z19__fetch_global_Wirev+0x44>)
   d6cb2:	f000 f80b 	bl	d6ccc <__aeabi_atexit>
	return wire;
}
   d6cb6:	4802      	ldr	r0, [pc, #8]	; (d6cc0 <_Z19__fetch_global_Wirev+0x44>)
   d6cb8:	b007      	add	sp, #28
   d6cba:	bd30      	pop	{r4, r5, pc}
   d6cbc:	2003e7d8 	.word	0x2003e7d8
   d6cc0:	2003e7dc 	.word	0x2003e7dc
   d6cc4:	2003e590 	.word	0x2003e590
   d6cc8:	000d62c5 	.word	0x000d62c5

000d6ccc <__aeabi_atexit>:
   d6ccc:	460b      	mov	r3, r1
   d6cce:	4601      	mov	r1, r0
   d6cd0:	4618      	mov	r0, r3
   d6cd2:	f000 bf2f 	b.w	d7b34 <__cxa_atexit>

000d6cd6 <_ZdlPvj>:
   d6cd6:	f7fd b9e0 	b.w	d409a <_ZdlPv>

000d6cda <_ZnajRKSt9nothrow_t>:
   d6cda:	f7fd b9dc 	b.w	d4096 <_Znaj>
	...

000d6ce0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6ce0:	4901      	ldr	r1, [pc, #4]	; (d6ce8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6ce2:	f000 b8f9 	b.w	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6ce6:	bf00      	nop
   d6ce8:	000d84b4 	.word	0x000d84b4

000d6cec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6cec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6cee:	2400      	movs	r4, #0
   d6cf0:	2310      	movs	r3, #16
   d6cf2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6cf6:	6803      	ldr	r3, [r0, #0]
   d6cf8:	9400      	str	r4, [sp, #0]
   d6cfa:	699e      	ldr	r6, [r3, #24]
   d6cfc:	f88d 4004 	strb.w	r4, [sp, #4]
   d6d00:	4615      	mov	r5, r2
   d6d02:	466b      	mov	r3, sp
   d6d04:	6812      	ldr	r2, [r2, #0]
   d6d06:	47b0      	blx	r6
   d6d08:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6d0c:	f003 0306 	and.w	r3, r3, #6
   d6d10:	2b06      	cmp	r3, #6
   d6d12:	bf03      	ittte	eq
   d6d14:	9b00      	ldreq	r3, [sp, #0]
   d6d16:	602b      	streq	r3, [r5, #0]
   d6d18:	2001      	moveq	r0, #1
   d6d1a:	4620      	movne	r0, r4
   d6d1c:	b004      	add	sp, #16
   d6d1e:	bd70      	pop	{r4, r5, r6, pc}

000d6d20 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6d20:	9800      	ldr	r0, [sp, #0]
   d6d22:	4290      	cmp	r0, r2
   d6d24:	bf14      	ite	ne
   d6d26:	2001      	movne	r0, #1
   d6d28:	2006      	moveq	r0, #6
   d6d2a:	4770      	bx	lr

000d6d2c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6d2c:	b510      	push	{r4, lr}
   d6d2e:	4b03      	ldr	r3, [pc, #12]	; (d6d3c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6d30:	6003      	str	r3, [r0, #0]
   d6d32:	4604      	mov	r4, r0
   d6d34:	f000 f8cd 	bl	d6ed2 <_ZNSt9type_infoD1Ev>
   d6d38:	4620      	mov	r0, r4
   d6d3a:	bd10      	pop	{r4, pc}
   d6d3c:	000d84f4 	.word	0x000d84f4

000d6d40 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6d40:	b510      	push	{r4, lr}
   d6d42:	4604      	mov	r4, r0
   d6d44:	f7ff fff2 	bl	d6d2c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6d48:	4620      	mov	r0, r4
   d6d4a:	2108      	movs	r1, #8
   d6d4c:	f7ff ffc3 	bl	d6cd6 <_ZdlPvj>
   d6d50:	4620      	mov	r0, r4
   d6d52:	bd10      	pop	{r4, pc}

000d6d54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d58:	461f      	mov	r7, r3
   d6d5a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6d5e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6d62:	4598      	cmp	r8, r3
   d6d64:	4606      	mov	r6, r0
   d6d66:	4615      	mov	r5, r2
   d6d68:	d107      	bne.n	d6d7a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6d6a:	9907      	ldr	r1, [sp, #28]
   d6d6c:	f000 f8b4 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6d70:	b118      	cbz	r0, d6d7a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6d72:	7165      	strb	r5, [r4, #5]
   d6d74:	2000      	movs	r0, #0
   d6d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d7a:	4639      	mov	r1, r7
   d6d7c:	4630      	mov	r0, r6
   d6d7e:	f000 f8ab 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6d82:	2800      	cmp	r0, #0
   d6d84:	d0f6      	beq.n	d6d74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6d86:	2301      	movs	r3, #1
   d6d88:	f8c4 8000 	str.w	r8, [r4]
   d6d8c:	7125      	strb	r5, [r4, #4]
   d6d8e:	71a3      	strb	r3, [r4, #6]
   d6d90:	e7f0      	b.n	d6d74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6d92 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6d92:	b538      	push	{r3, r4, r5, lr}
   d6d94:	4615      	mov	r5, r2
   d6d96:	461c      	mov	r4, r3
   d6d98:	f000 f89e 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6d9c:	b120      	cbz	r0, d6da8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6d9e:	2308      	movs	r3, #8
   d6da0:	60e3      	str	r3, [r4, #12]
   d6da2:	2306      	movs	r3, #6
   d6da4:	6025      	str	r5, [r4, #0]
   d6da6:	7123      	strb	r3, [r4, #4]
   d6da8:	bd38      	pop	{r3, r4, r5, pc}

000d6daa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6dac:	4605      	mov	r5, r0
   d6dae:	460c      	mov	r4, r1
   d6db0:	9201      	str	r2, [sp, #4]
   d6db2:	461e      	mov	r6, r3
   d6db4:	f000 f890 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6db8:	b950      	cbnz	r0, d6dd0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6dba:	2e03      	cmp	r6, #3
   d6dbc:	d808      	bhi.n	d6dd0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6dbe:	6823      	ldr	r3, [r4, #0]
   d6dc0:	9a01      	ldr	r2, [sp, #4]
   d6dc2:	695b      	ldr	r3, [r3, #20]
   d6dc4:	4629      	mov	r1, r5
   d6dc6:	4620      	mov	r0, r4
   d6dc8:	b002      	add	sp, #8
   d6dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6dce:	4718      	bx	r3
   d6dd0:	b002      	add	sp, #8
   d6dd2:	bd70      	pop	{r4, r5, r6, pc}

000d6dd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6dd4:	b510      	push	{r4, lr}
   d6dd6:	4b03      	ldr	r3, [pc, #12]	; (d6de4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6dd8:	6003      	str	r3, [r0, #0]
   d6dda:	4604      	mov	r4, r0
   d6ddc:	f7ff ffa6 	bl	d6d2c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6de0:	4620      	mov	r0, r4
   d6de2:	bd10      	pop	{r4, pc}
   d6de4:	000d8554 	.word	0x000d8554

000d6de8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6de8:	b510      	push	{r4, lr}
   d6dea:	4604      	mov	r4, r0
   d6dec:	f7ff fff2 	bl	d6dd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6df0:	4620      	mov	r0, r4
   d6df2:	210c      	movs	r1, #12
   d6df4:	f7ff ff6f 	bl	d6cd6 <_ZdlPvj>
   d6df8:	4620      	mov	r0, r4
   d6dfa:	bd10      	pop	{r4, pc}

000d6dfc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6dfe:	9f08      	ldr	r7, [sp, #32]
   d6e00:	4297      	cmp	r7, r2
   d6e02:	4605      	mov	r5, r0
   d6e04:	460e      	mov	r6, r1
   d6e06:	4614      	mov	r4, r2
   d6e08:	d00a      	beq.n	d6e20 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6e0a:	68a8      	ldr	r0, [r5, #8]
   d6e0c:	6802      	ldr	r2, [r0, #0]
   d6e0e:	9708      	str	r7, [sp, #32]
   d6e10:	6a15      	ldr	r5, [r2, #32]
   d6e12:	4631      	mov	r1, r6
   d6e14:	4622      	mov	r2, r4
   d6e16:	46ac      	mov	ip, r5
   d6e18:	b003      	add	sp, #12
   d6e1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6e1e:	4760      	bx	ip
   d6e20:	4619      	mov	r1, r3
   d6e22:	9301      	str	r3, [sp, #4]
   d6e24:	f000 f858 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6e28:	9b01      	ldr	r3, [sp, #4]
   d6e2a:	2800      	cmp	r0, #0
   d6e2c:	d0ed      	beq.n	d6e0a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6e2e:	2006      	movs	r0, #6
   d6e30:	b003      	add	sp, #12
   d6e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6e34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e38:	460d      	mov	r5, r1
   d6e3a:	4619      	mov	r1, r3
   d6e3c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6e40:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6e44:	4681      	mov	r9, r0
   d6e46:	4617      	mov	r7, r2
   d6e48:	4698      	mov	r8, r3
   d6e4a:	f000 f845 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6e4e:	b190      	cbz	r0, d6e76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6e50:	2d00      	cmp	r5, #0
   d6e52:	6034      	str	r4, [r6, #0]
   d6e54:	7137      	strb	r7, [r6, #4]
   d6e56:	db09      	blt.n	d6e6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6e58:	1961      	adds	r1, r4, r5
   d6e5a:	458a      	cmp	sl, r1
   d6e5c:	bf0c      	ite	eq
   d6e5e:	2106      	moveq	r1, #6
   d6e60:	2101      	movne	r1, #1
   d6e62:	71b1      	strb	r1, [r6, #6]
   d6e64:	2000      	movs	r0, #0
   d6e66:	b001      	add	sp, #4
   d6e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e6c:	3502      	adds	r5, #2
   d6e6e:	d1f9      	bne.n	d6e64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6e70:	2301      	movs	r3, #1
   d6e72:	71b3      	strb	r3, [r6, #6]
   d6e74:	e7f6      	b.n	d6e64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6e76:	4554      	cmp	r4, sl
   d6e78:	d106      	bne.n	d6e88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6e7a:	4659      	mov	r1, fp
   d6e7c:	4648      	mov	r0, r9
   d6e7e:	f000 f82b 	bl	d6ed8 <_ZNKSt9type_infoeqERKS_>
   d6e82:	b108      	cbz	r0, d6e88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6e84:	7177      	strb	r7, [r6, #5]
   d6e86:	e7ed      	b.n	d6e64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6e88:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6e8c:	6803      	ldr	r3, [r0, #0]
   d6e8e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6e92:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6e96:	69dc      	ldr	r4, [r3, #28]
   d6e98:	463a      	mov	r2, r7
   d6e9a:	4643      	mov	r3, r8
   d6e9c:	4629      	mov	r1, r5
   d6e9e:	46a4      	mov	ip, r4
   d6ea0:	b001      	add	sp, #4
   d6ea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ea6:	4760      	bx	ip

000d6ea8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6eac:	4607      	mov	r7, r0
   d6eae:	460c      	mov	r4, r1
   d6eb0:	4615      	mov	r5, r2
   d6eb2:	461e      	mov	r6, r3
   d6eb4:	f7ff ff6d 	bl	d6d92 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6eb8:	b948      	cbnz	r0, d6ece <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6eba:	68b8      	ldr	r0, [r7, #8]
   d6ebc:	6803      	ldr	r3, [r0, #0]
   d6ebe:	699f      	ldr	r7, [r3, #24]
   d6ec0:	462a      	mov	r2, r5
   d6ec2:	4633      	mov	r3, r6
   d6ec4:	4621      	mov	r1, r4
   d6ec6:	46bc      	mov	ip, r7
   d6ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6ecc:	4760      	bx	ip
   d6ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ed2 <_ZNSt9type_infoD1Ev>:
   d6ed2:	4770      	bx	lr

000d6ed4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6ed4:	2000      	movs	r0, #0
   d6ed6:	4770      	bx	lr

000d6ed8 <_ZNKSt9type_infoeqERKS_>:
   d6ed8:	4281      	cmp	r1, r0
   d6eda:	b508      	push	{r3, lr}
   d6edc:	d00e      	beq.n	d6efc <_ZNKSt9type_infoeqERKS_+0x24>
   d6ede:	6840      	ldr	r0, [r0, #4]
   d6ee0:	7803      	ldrb	r3, [r0, #0]
   d6ee2:	2b2a      	cmp	r3, #42	; 0x2a
   d6ee4:	d00c      	beq.n	d6f00 <_ZNKSt9type_infoeqERKS_+0x28>
   d6ee6:	6849      	ldr	r1, [r1, #4]
   d6ee8:	780b      	ldrb	r3, [r1, #0]
   d6eea:	2b2a      	cmp	r3, #42	; 0x2a
   d6eec:	bf08      	it	eq
   d6eee:	3101      	addeq	r1, #1
   d6ef0:	f000 fe68 	bl	d7bc4 <strcmp>
   d6ef4:	fab0 f080 	clz	r0, r0
   d6ef8:	0940      	lsrs	r0, r0, #5
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	2001      	movs	r0, #1
   d6efe:	e7fc      	b.n	d6efa <_ZNKSt9type_infoeqERKS_+0x22>
   d6f00:	2000      	movs	r0, #0
   d6f02:	e7fa      	b.n	d6efa <_ZNKSt9type_infoeqERKS_+0x22>

000d6f04 <__aeabi_drsub>:
   d6f04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6f08:	e002      	b.n	d6f10 <__adddf3>
   d6f0a:	bf00      	nop

000d6f0c <__aeabi_dsub>:
   d6f0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6f10 <__adddf3>:
   d6f10:	b530      	push	{r4, r5, lr}
   d6f12:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6f16:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6f1a:	ea94 0f05 	teq	r4, r5
   d6f1e:	bf08      	it	eq
   d6f20:	ea90 0f02 	teqeq	r0, r2
   d6f24:	bf1f      	itttt	ne
   d6f26:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6f2a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6f2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6f32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6f36:	f000 80e2 	beq.w	d70fe <__adddf3+0x1ee>
   d6f3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6f3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6f42:	bfb8      	it	lt
   d6f44:	426d      	neglt	r5, r5
   d6f46:	dd0c      	ble.n	d6f62 <__adddf3+0x52>
   d6f48:	442c      	add	r4, r5
   d6f4a:	ea80 0202 	eor.w	r2, r0, r2
   d6f4e:	ea81 0303 	eor.w	r3, r1, r3
   d6f52:	ea82 0000 	eor.w	r0, r2, r0
   d6f56:	ea83 0101 	eor.w	r1, r3, r1
   d6f5a:	ea80 0202 	eor.w	r2, r0, r2
   d6f5e:	ea81 0303 	eor.w	r3, r1, r3
   d6f62:	2d36      	cmp	r5, #54	; 0x36
   d6f64:	bf88      	it	hi
   d6f66:	bd30      	pophi	{r4, r5, pc}
   d6f68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6f6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6f70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6f74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6f78:	d002      	beq.n	d6f80 <__adddf3+0x70>
   d6f7a:	4240      	negs	r0, r0
   d6f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6f88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6f8c:	d002      	beq.n	d6f94 <__adddf3+0x84>
   d6f8e:	4252      	negs	r2, r2
   d6f90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6f94:	ea94 0f05 	teq	r4, r5
   d6f98:	f000 80a7 	beq.w	d70ea <__adddf3+0x1da>
   d6f9c:	f1a4 0401 	sub.w	r4, r4, #1
   d6fa0:	f1d5 0e20 	rsbs	lr, r5, #32
   d6fa4:	db0d      	blt.n	d6fc2 <__adddf3+0xb2>
   d6fa6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6faa:	fa22 f205 	lsr.w	r2, r2, r5
   d6fae:	1880      	adds	r0, r0, r2
   d6fb0:	f141 0100 	adc.w	r1, r1, #0
   d6fb4:	fa03 f20e 	lsl.w	r2, r3, lr
   d6fb8:	1880      	adds	r0, r0, r2
   d6fba:	fa43 f305 	asr.w	r3, r3, r5
   d6fbe:	4159      	adcs	r1, r3
   d6fc0:	e00e      	b.n	d6fe0 <__adddf3+0xd0>
   d6fc2:	f1a5 0520 	sub.w	r5, r5, #32
   d6fc6:	f10e 0e20 	add.w	lr, lr, #32
   d6fca:	2a01      	cmp	r2, #1
   d6fcc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6fd0:	bf28      	it	cs
   d6fd2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6fd6:	fa43 f305 	asr.w	r3, r3, r5
   d6fda:	18c0      	adds	r0, r0, r3
   d6fdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6fe4:	d507      	bpl.n	d6ff6 <__adddf3+0xe6>
   d6fe6:	f04f 0e00 	mov.w	lr, #0
   d6fea:	f1dc 0c00 	rsbs	ip, ip, #0
   d6fee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6ff2:	eb6e 0101 	sbc.w	r1, lr, r1
   d6ff6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6ffa:	d31b      	bcc.n	d7034 <__adddf3+0x124>
   d6ffc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7000:	d30c      	bcc.n	d701c <__adddf3+0x10c>
   d7002:	0849      	lsrs	r1, r1, #1
   d7004:	ea5f 0030 	movs.w	r0, r0, rrx
   d7008:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d700c:	f104 0401 	add.w	r4, r4, #1
   d7010:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7014:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7018:	f080 809a 	bcs.w	d7150 <__adddf3+0x240>
   d701c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7020:	bf08      	it	eq
   d7022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7026:	f150 0000 	adcs.w	r0, r0, #0
   d702a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d702e:	ea41 0105 	orr.w	r1, r1, r5
   d7032:	bd30      	pop	{r4, r5, pc}
   d7034:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7038:	4140      	adcs	r0, r0
   d703a:	eb41 0101 	adc.w	r1, r1, r1
   d703e:	3c01      	subs	r4, #1
   d7040:	bf28      	it	cs
   d7042:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7046:	d2e9      	bcs.n	d701c <__adddf3+0x10c>
   d7048:	f091 0f00 	teq	r1, #0
   d704c:	bf04      	itt	eq
   d704e:	4601      	moveq	r1, r0
   d7050:	2000      	moveq	r0, #0
   d7052:	fab1 f381 	clz	r3, r1
   d7056:	bf08      	it	eq
   d7058:	3320      	addeq	r3, #32
   d705a:	f1a3 030b 	sub.w	r3, r3, #11
   d705e:	f1b3 0220 	subs.w	r2, r3, #32
   d7062:	da0c      	bge.n	d707e <__adddf3+0x16e>
   d7064:	320c      	adds	r2, #12
   d7066:	dd08      	ble.n	d707a <__adddf3+0x16a>
   d7068:	f102 0c14 	add.w	ip, r2, #20
   d706c:	f1c2 020c 	rsb	r2, r2, #12
   d7070:	fa01 f00c 	lsl.w	r0, r1, ip
   d7074:	fa21 f102 	lsr.w	r1, r1, r2
   d7078:	e00c      	b.n	d7094 <__adddf3+0x184>
   d707a:	f102 0214 	add.w	r2, r2, #20
   d707e:	bfd8      	it	le
   d7080:	f1c2 0c20 	rsble	ip, r2, #32
   d7084:	fa01 f102 	lsl.w	r1, r1, r2
   d7088:	fa20 fc0c 	lsr.w	ip, r0, ip
   d708c:	bfdc      	itt	le
   d708e:	ea41 010c 	orrle.w	r1, r1, ip
   d7092:	4090      	lslle	r0, r2
   d7094:	1ae4      	subs	r4, r4, r3
   d7096:	bfa2      	ittt	ge
   d7098:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d709c:	4329      	orrge	r1, r5
   d709e:	bd30      	popge	{r4, r5, pc}
   d70a0:	ea6f 0404 	mvn.w	r4, r4
   d70a4:	3c1f      	subs	r4, #31
   d70a6:	da1c      	bge.n	d70e2 <__adddf3+0x1d2>
   d70a8:	340c      	adds	r4, #12
   d70aa:	dc0e      	bgt.n	d70ca <__adddf3+0x1ba>
   d70ac:	f104 0414 	add.w	r4, r4, #20
   d70b0:	f1c4 0220 	rsb	r2, r4, #32
   d70b4:	fa20 f004 	lsr.w	r0, r0, r4
   d70b8:	fa01 f302 	lsl.w	r3, r1, r2
   d70bc:	ea40 0003 	orr.w	r0, r0, r3
   d70c0:	fa21 f304 	lsr.w	r3, r1, r4
   d70c4:	ea45 0103 	orr.w	r1, r5, r3
   d70c8:	bd30      	pop	{r4, r5, pc}
   d70ca:	f1c4 040c 	rsb	r4, r4, #12
   d70ce:	f1c4 0220 	rsb	r2, r4, #32
   d70d2:	fa20 f002 	lsr.w	r0, r0, r2
   d70d6:	fa01 f304 	lsl.w	r3, r1, r4
   d70da:	ea40 0003 	orr.w	r0, r0, r3
   d70de:	4629      	mov	r1, r5
   d70e0:	bd30      	pop	{r4, r5, pc}
   d70e2:	fa21 f004 	lsr.w	r0, r1, r4
   d70e6:	4629      	mov	r1, r5
   d70e8:	bd30      	pop	{r4, r5, pc}
   d70ea:	f094 0f00 	teq	r4, #0
   d70ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d70f2:	bf06      	itte	eq
   d70f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d70f8:	3401      	addeq	r4, #1
   d70fa:	3d01      	subne	r5, #1
   d70fc:	e74e      	b.n	d6f9c <__adddf3+0x8c>
   d70fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7102:	bf18      	it	ne
   d7104:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7108:	d029      	beq.n	d715e <__adddf3+0x24e>
   d710a:	ea94 0f05 	teq	r4, r5
   d710e:	bf08      	it	eq
   d7110:	ea90 0f02 	teqeq	r0, r2
   d7114:	d005      	beq.n	d7122 <__adddf3+0x212>
   d7116:	ea54 0c00 	orrs.w	ip, r4, r0
   d711a:	bf04      	itt	eq
   d711c:	4619      	moveq	r1, r3
   d711e:	4610      	moveq	r0, r2
   d7120:	bd30      	pop	{r4, r5, pc}
   d7122:	ea91 0f03 	teq	r1, r3
   d7126:	bf1e      	ittt	ne
   d7128:	2100      	movne	r1, #0
   d712a:	2000      	movne	r0, #0
   d712c:	bd30      	popne	{r4, r5, pc}
   d712e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7132:	d105      	bne.n	d7140 <__adddf3+0x230>
   d7134:	0040      	lsls	r0, r0, #1
   d7136:	4149      	adcs	r1, r1
   d7138:	bf28      	it	cs
   d713a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d713e:	bd30      	pop	{r4, r5, pc}
   d7140:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7144:	bf3c      	itt	cc
   d7146:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d714a:	bd30      	popcc	{r4, r5, pc}
   d714c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7150:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7158:	f04f 0000 	mov.w	r0, #0
   d715c:	bd30      	pop	{r4, r5, pc}
   d715e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7162:	bf1a      	itte	ne
   d7164:	4619      	movne	r1, r3
   d7166:	4610      	movne	r0, r2
   d7168:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d716c:	bf1c      	itt	ne
   d716e:	460b      	movne	r3, r1
   d7170:	4602      	movne	r2, r0
   d7172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7176:	bf06      	itte	eq
   d7178:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d717c:	ea91 0f03 	teqeq	r1, r3
   d7180:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7184:	bd30      	pop	{r4, r5, pc}
   d7186:	bf00      	nop

000d7188 <__aeabi_ui2d>:
   d7188:	f090 0f00 	teq	r0, #0
   d718c:	bf04      	itt	eq
   d718e:	2100      	moveq	r1, #0
   d7190:	4770      	bxeq	lr
   d7192:	b530      	push	{r4, r5, lr}
   d7194:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7198:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d719c:	f04f 0500 	mov.w	r5, #0
   d71a0:	f04f 0100 	mov.w	r1, #0
   d71a4:	e750      	b.n	d7048 <__adddf3+0x138>
   d71a6:	bf00      	nop

000d71a8 <__aeabi_i2d>:
   d71a8:	f090 0f00 	teq	r0, #0
   d71ac:	bf04      	itt	eq
   d71ae:	2100      	moveq	r1, #0
   d71b0:	4770      	bxeq	lr
   d71b2:	b530      	push	{r4, r5, lr}
   d71b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d71b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d71bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d71c0:	bf48      	it	mi
   d71c2:	4240      	negmi	r0, r0
   d71c4:	f04f 0100 	mov.w	r1, #0
   d71c8:	e73e      	b.n	d7048 <__adddf3+0x138>
   d71ca:	bf00      	nop

000d71cc <__aeabi_f2d>:
   d71cc:	0042      	lsls	r2, r0, #1
   d71ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d71d2:	ea4f 0131 	mov.w	r1, r1, rrx
   d71d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d71da:	bf1f      	itttt	ne
   d71dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d71e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d71e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d71e8:	4770      	bxne	lr
   d71ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d71ee:	bf08      	it	eq
   d71f0:	4770      	bxeq	lr
   d71f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d71f6:	bf04      	itt	eq
   d71f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d71fc:	4770      	bxeq	lr
   d71fe:	b530      	push	{r4, r5, lr}
   d7200:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7208:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d720c:	e71c      	b.n	d7048 <__adddf3+0x138>
   d720e:	bf00      	nop

000d7210 <__aeabi_ul2d>:
   d7210:	ea50 0201 	orrs.w	r2, r0, r1
   d7214:	bf08      	it	eq
   d7216:	4770      	bxeq	lr
   d7218:	b530      	push	{r4, r5, lr}
   d721a:	f04f 0500 	mov.w	r5, #0
   d721e:	e00a      	b.n	d7236 <__aeabi_l2d+0x16>

000d7220 <__aeabi_l2d>:
   d7220:	ea50 0201 	orrs.w	r2, r0, r1
   d7224:	bf08      	it	eq
   d7226:	4770      	bxeq	lr
   d7228:	b530      	push	{r4, r5, lr}
   d722a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d722e:	d502      	bpl.n	d7236 <__aeabi_l2d+0x16>
   d7230:	4240      	negs	r0, r0
   d7232:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7236:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d723a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d723e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7242:	f43f aed8 	beq.w	d6ff6 <__adddf3+0xe6>
   d7246:	f04f 0203 	mov.w	r2, #3
   d724a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d724e:	bf18      	it	ne
   d7250:	3203      	addne	r2, #3
   d7252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7256:	bf18      	it	ne
   d7258:	3203      	addne	r2, #3
   d725a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d725e:	f1c2 0320 	rsb	r3, r2, #32
   d7262:	fa00 fc03 	lsl.w	ip, r0, r3
   d7266:	fa20 f002 	lsr.w	r0, r0, r2
   d726a:	fa01 fe03 	lsl.w	lr, r1, r3
   d726e:	ea40 000e 	orr.w	r0, r0, lr
   d7272:	fa21 f102 	lsr.w	r1, r1, r2
   d7276:	4414      	add	r4, r2
   d7278:	e6bd      	b.n	d6ff6 <__adddf3+0xe6>
   d727a:	bf00      	nop

000d727c <__aeabi_dmul>:
   d727c:	b570      	push	{r4, r5, r6, lr}
   d727e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7282:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7286:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d728a:	bf1d      	ittte	ne
   d728c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7290:	ea94 0f0c 	teqne	r4, ip
   d7294:	ea95 0f0c 	teqne	r5, ip
   d7298:	f000 f8de 	bleq	d7458 <__aeabi_dmul+0x1dc>
   d729c:	442c      	add	r4, r5
   d729e:	ea81 0603 	eor.w	r6, r1, r3
   d72a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d72a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d72aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d72ae:	bf18      	it	ne
   d72b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d72b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d72bc:	d038      	beq.n	d7330 <__aeabi_dmul+0xb4>
   d72be:	fba0 ce02 	umull	ip, lr, r0, r2
   d72c2:	f04f 0500 	mov.w	r5, #0
   d72c6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d72ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d72ce:	fbe0 e503 	umlal	lr, r5, r0, r3
   d72d2:	f04f 0600 	mov.w	r6, #0
   d72d6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d72da:	f09c 0f00 	teq	ip, #0
   d72de:	bf18      	it	ne
   d72e0:	f04e 0e01 	orrne.w	lr, lr, #1
   d72e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d72e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d72ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d72f0:	d204      	bcs.n	d72fc <__aeabi_dmul+0x80>
   d72f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d72f6:	416d      	adcs	r5, r5
   d72f8:	eb46 0606 	adc.w	r6, r6, r6
   d72fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7300:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7304:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7308:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d730c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7310:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7314:	bf88      	it	hi
   d7316:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d731a:	d81e      	bhi.n	d735a <__aeabi_dmul+0xde>
   d731c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7320:	bf08      	it	eq
   d7322:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7326:	f150 0000 	adcs.w	r0, r0, #0
   d732a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d732e:	bd70      	pop	{r4, r5, r6, pc}
   d7330:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7334:	ea46 0101 	orr.w	r1, r6, r1
   d7338:	ea40 0002 	orr.w	r0, r0, r2
   d733c:	ea81 0103 	eor.w	r1, r1, r3
   d7340:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7344:	bfc2      	ittt	gt
   d7346:	ebd4 050c 	rsbsgt	r5, r4, ip
   d734a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d734e:	bd70      	popgt	{r4, r5, r6, pc}
   d7350:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7354:	f04f 0e00 	mov.w	lr, #0
   d7358:	3c01      	subs	r4, #1
   d735a:	f300 80ab 	bgt.w	d74b4 <__aeabi_dmul+0x238>
   d735e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7362:	bfde      	ittt	le
   d7364:	2000      	movle	r0, #0
   d7366:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d736a:	bd70      	pople	{r4, r5, r6, pc}
   d736c:	f1c4 0400 	rsb	r4, r4, #0
   d7370:	3c20      	subs	r4, #32
   d7372:	da35      	bge.n	d73e0 <__aeabi_dmul+0x164>
   d7374:	340c      	adds	r4, #12
   d7376:	dc1b      	bgt.n	d73b0 <__aeabi_dmul+0x134>
   d7378:	f104 0414 	add.w	r4, r4, #20
   d737c:	f1c4 0520 	rsb	r5, r4, #32
   d7380:	fa00 f305 	lsl.w	r3, r0, r5
   d7384:	fa20 f004 	lsr.w	r0, r0, r4
   d7388:	fa01 f205 	lsl.w	r2, r1, r5
   d738c:	ea40 0002 	orr.w	r0, r0, r2
   d7390:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7398:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d739c:	fa21 f604 	lsr.w	r6, r1, r4
   d73a0:	eb42 0106 	adc.w	r1, r2, r6
   d73a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d73a8:	bf08      	it	eq
   d73aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d73ae:	bd70      	pop	{r4, r5, r6, pc}
   d73b0:	f1c4 040c 	rsb	r4, r4, #12
   d73b4:	f1c4 0520 	rsb	r5, r4, #32
   d73b8:	fa00 f304 	lsl.w	r3, r0, r4
   d73bc:	fa20 f005 	lsr.w	r0, r0, r5
   d73c0:	fa01 f204 	lsl.w	r2, r1, r4
   d73c4:	ea40 0002 	orr.w	r0, r0, r2
   d73c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d73cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d73d0:	f141 0100 	adc.w	r1, r1, #0
   d73d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d73d8:	bf08      	it	eq
   d73da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d73de:	bd70      	pop	{r4, r5, r6, pc}
   d73e0:	f1c4 0520 	rsb	r5, r4, #32
   d73e4:	fa00 f205 	lsl.w	r2, r0, r5
   d73e8:	ea4e 0e02 	orr.w	lr, lr, r2
   d73ec:	fa20 f304 	lsr.w	r3, r0, r4
   d73f0:	fa01 f205 	lsl.w	r2, r1, r5
   d73f4:	ea43 0302 	orr.w	r3, r3, r2
   d73f8:	fa21 f004 	lsr.w	r0, r1, r4
   d73fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7400:	fa21 f204 	lsr.w	r2, r1, r4
   d7404:	ea20 0002 	bic.w	r0, r0, r2
   d7408:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d740c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7410:	bf08      	it	eq
   d7412:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7416:	bd70      	pop	{r4, r5, r6, pc}
   d7418:	f094 0f00 	teq	r4, #0
   d741c:	d10f      	bne.n	d743e <__aeabi_dmul+0x1c2>
   d741e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7422:	0040      	lsls	r0, r0, #1
   d7424:	eb41 0101 	adc.w	r1, r1, r1
   d7428:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d742c:	bf08      	it	eq
   d742e:	3c01      	subeq	r4, #1
   d7430:	d0f7      	beq.n	d7422 <__aeabi_dmul+0x1a6>
   d7432:	ea41 0106 	orr.w	r1, r1, r6
   d7436:	f095 0f00 	teq	r5, #0
   d743a:	bf18      	it	ne
   d743c:	4770      	bxne	lr
   d743e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7442:	0052      	lsls	r2, r2, #1
   d7444:	eb43 0303 	adc.w	r3, r3, r3
   d7448:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d744c:	bf08      	it	eq
   d744e:	3d01      	subeq	r5, #1
   d7450:	d0f7      	beq.n	d7442 <__aeabi_dmul+0x1c6>
   d7452:	ea43 0306 	orr.w	r3, r3, r6
   d7456:	4770      	bx	lr
   d7458:	ea94 0f0c 	teq	r4, ip
   d745c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7460:	bf18      	it	ne
   d7462:	ea95 0f0c 	teqne	r5, ip
   d7466:	d00c      	beq.n	d7482 <__aeabi_dmul+0x206>
   d7468:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d746c:	bf18      	it	ne
   d746e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7472:	d1d1      	bne.n	d7418 <__aeabi_dmul+0x19c>
   d7474:	ea81 0103 	eor.w	r1, r1, r3
   d7478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d747c:	f04f 0000 	mov.w	r0, #0
   d7480:	bd70      	pop	{r4, r5, r6, pc}
   d7482:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7486:	bf06      	itte	eq
   d7488:	4610      	moveq	r0, r2
   d748a:	4619      	moveq	r1, r3
   d748c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7490:	d019      	beq.n	d74c6 <__aeabi_dmul+0x24a>
   d7492:	ea94 0f0c 	teq	r4, ip
   d7496:	d102      	bne.n	d749e <__aeabi_dmul+0x222>
   d7498:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d749c:	d113      	bne.n	d74c6 <__aeabi_dmul+0x24a>
   d749e:	ea95 0f0c 	teq	r5, ip
   d74a2:	d105      	bne.n	d74b0 <__aeabi_dmul+0x234>
   d74a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d74a8:	bf1c      	itt	ne
   d74aa:	4610      	movne	r0, r2
   d74ac:	4619      	movne	r1, r3
   d74ae:	d10a      	bne.n	d74c6 <__aeabi_dmul+0x24a>
   d74b0:	ea81 0103 	eor.w	r1, r1, r3
   d74b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d74bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d74c0:	f04f 0000 	mov.w	r0, #0
   d74c4:	bd70      	pop	{r4, r5, r6, pc}
   d74c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d74ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d74ce:	bd70      	pop	{r4, r5, r6, pc}

000d74d0 <__aeabi_ddiv>:
   d74d0:	b570      	push	{r4, r5, r6, lr}
   d74d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d74d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d74da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d74de:	bf1d      	ittte	ne
   d74e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d74e4:	ea94 0f0c 	teqne	r4, ip
   d74e8:	ea95 0f0c 	teqne	r5, ip
   d74ec:	f000 f8a7 	bleq	d763e <__aeabi_ddiv+0x16e>
   d74f0:	eba4 0405 	sub.w	r4, r4, r5
   d74f4:	ea81 0e03 	eor.w	lr, r1, r3
   d74f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d74fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7500:	f000 8088 	beq.w	d7614 <__aeabi_ddiv+0x144>
   d7504:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7508:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d750c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7510:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7514:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7518:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d751c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7520:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7524:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7528:	429d      	cmp	r5, r3
   d752a:	bf08      	it	eq
   d752c:	4296      	cmpeq	r6, r2
   d752e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7532:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7536:	d202      	bcs.n	d753e <__aeabi_ddiv+0x6e>
   d7538:	085b      	lsrs	r3, r3, #1
   d753a:	ea4f 0232 	mov.w	r2, r2, rrx
   d753e:	1ab6      	subs	r6, r6, r2
   d7540:	eb65 0503 	sbc.w	r5, r5, r3
   d7544:	085b      	lsrs	r3, r3, #1
   d7546:	ea4f 0232 	mov.w	r2, r2, rrx
   d754a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d754e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7552:	ebb6 0e02 	subs.w	lr, r6, r2
   d7556:	eb75 0e03 	sbcs.w	lr, r5, r3
   d755a:	bf22      	ittt	cs
   d755c:	1ab6      	subcs	r6, r6, r2
   d755e:	4675      	movcs	r5, lr
   d7560:	ea40 000c 	orrcs.w	r0, r0, ip
   d7564:	085b      	lsrs	r3, r3, #1
   d7566:	ea4f 0232 	mov.w	r2, r2, rrx
   d756a:	ebb6 0e02 	subs.w	lr, r6, r2
   d756e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7572:	bf22      	ittt	cs
   d7574:	1ab6      	subcs	r6, r6, r2
   d7576:	4675      	movcs	r5, lr
   d7578:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d757c:	085b      	lsrs	r3, r3, #1
   d757e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7582:	ebb6 0e02 	subs.w	lr, r6, r2
   d7586:	eb75 0e03 	sbcs.w	lr, r5, r3
   d758a:	bf22      	ittt	cs
   d758c:	1ab6      	subcs	r6, r6, r2
   d758e:	4675      	movcs	r5, lr
   d7590:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7594:	085b      	lsrs	r3, r3, #1
   d7596:	ea4f 0232 	mov.w	r2, r2, rrx
   d759a:	ebb6 0e02 	subs.w	lr, r6, r2
   d759e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d75a2:	bf22      	ittt	cs
   d75a4:	1ab6      	subcs	r6, r6, r2
   d75a6:	4675      	movcs	r5, lr
   d75a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d75ac:	ea55 0e06 	orrs.w	lr, r5, r6
   d75b0:	d018      	beq.n	d75e4 <__aeabi_ddiv+0x114>
   d75b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d75b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d75ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d75be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d75c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d75c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d75ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d75ce:	d1c0      	bne.n	d7552 <__aeabi_ddiv+0x82>
   d75d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75d4:	d10b      	bne.n	d75ee <__aeabi_ddiv+0x11e>
   d75d6:	ea41 0100 	orr.w	r1, r1, r0
   d75da:	f04f 0000 	mov.w	r0, #0
   d75de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d75e2:	e7b6      	b.n	d7552 <__aeabi_ddiv+0x82>
   d75e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75e8:	bf04      	itt	eq
   d75ea:	4301      	orreq	r1, r0
   d75ec:	2000      	moveq	r0, #0
   d75ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d75f2:	bf88      	it	hi
   d75f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d75f8:	f63f aeaf 	bhi.w	d735a <__aeabi_dmul+0xde>
   d75fc:	ebb5 0c03 	subs.w	ip, r5, r3
   d7600:	bf04      	itt	eq
   d7602:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d760a:	f150 0000 	adcs.w	r0, r0, #0
   d760e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7612:	bd70      	pop	{r4, r5, r6, pc}
   d7614:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7618:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d761c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7620:	bfc2      	ittt	gt
   d7622:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d762a:	bd70      	popgt	{r4, r5, r6, pc}
   d762c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7630:	f04f 0e00 	mov.w	lr, #0
   d7634:	3c01      	subs	r4, #1
   d7636:	e690      	b.n	d735a <__aeabi_dmul+0xde>
   d7638:	ea45 0e06 	orr.w	lr, r5, r6
   d763c:	e68d      	b.n	d735a <__aeabi_dmul+0xde>
   d763e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7642:	ea94 0f0c 	teq	r4, ip
   d7646:	bf08      	it	eq
   d7648:	ea95 0f0c 	teqeq	r5, ip
   d764c:	f43f af3b 	beq.w	d74c6 <__aeabi_dmul+0x24a>
   d7650:	ea94 0f0c 	teq	r4, ip
   d7654:	d10a      	bne.n	d766c <__aeabi_ddiv+0x19c>
   d7656:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d765a:	f47f af34 	bne.w	d74c6 <__aeabi_dmul+0x24a>
   d765e:	ea95 0f0c 	teq	r5, ip
   d7662:	f47f af25 	bne.w	d74b0 <__aeabi_dmul+0x234>
   d7666:	4610      	mov	r0, r2
   d7668:	4619      	mov	r1, r3
   d766a:	e72c      	b.n	d74c6 <__aeabi_dmul+0x24a>
   d766c:	ea95 0f0c 	teq	r5, ip
   d7670:	d106      	bne.n	d7680 <__aeabi_ddiv+0x1b0>
   d7672:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7676:	f43f aefd 	beq.w	d7474 <__aeabi_dmul+0x1f8>
   d767a:	4610      	mov	r0, r2
   d767c:	4619      	mov	r1, r3
   d767e:	e722      	b.n	d74c6 <__aeabi_dmul+0x24a>
   d7680:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7684:	bf18      	it	ne
   d7686:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d768a:	f47f aec5 	bne.w	d7418 <__aeabi_dmul+0x19c>
   d768e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7692:	f47f af0d 	bne.w	d74b0 <__aeabi_dmul+0x234>
   d7696:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d769a:	f47f aeeb 	bne.w	d7474 <__aeabi_dmul+0x1f8>
   d769e:	e712      	b.n	d74c6 <__aeabi_dmul+0x24a>

000d76a0 <__gedf2>:
   d76a0:	f04f 3cff 	mov.w	ip, #4294967295
   d76a4:	e006      	b.n	d76b4 <__cmpdf2+0x4>
   d76a6:	bf00      	nop

000d76a8 <__ledf2>:
   d76a8:	f04f 0c01 	mov.w	ip, #1
   d76ac:	e002      	b.n	d76b4 <__cmpdf2+0x4>
   d76ae:	bf00      	nop

000d76b0 <__cmpdf2>:
   d76b0:	f04f 0c01 	mov.w	ip, #1
   d76b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d76b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d76bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d76c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d76c4:	bf18      	it	ne
   d76c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d76ca:	d01b      	beq.n	d7704 <__cmpdf2+0x54>
   d76cc:	b001      	add	sp, #4
   d76ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d76d2:	bf0c      	ite	eq
   d76d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d76d8:	ea91 0f03 	teqne	r1, r3
   d76dc:	bf02      	ittt	eq
   d76de:	ea90 0f02 	teqeq	r0, r2
   d76e2:	2000      	moveq	r0, #0
   d76e4:	4770      	bxeq	lr
   d76e6:	f110 0f00 	cmn.w	r0, #0
   d76ea:	ea91 0f03 	teq	r1, r3
   d76ee:	bf58      	it	pl
   d76f0:	4299      	cmppl	r1, r3
   d76f2:	bf08      	it	eq
   d76f4:	4290      	cmpeq	r0, r2
   d76f6:	bf2c      	ite	cs
   d76f8:	17d8      	asrcs	r0, r3, #31
   d76fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d76fe:	f040 0001 	orr.w	r0, r0, #1
   d7702:	4770      	bx	lr
   d7704:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7708:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d770c:	d102      	bne.n	d7714 <__cmpdf2+0x64>
   d770e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7712:	d107      	bne.n	d7724 <__cmpdf2+0x74>
   d7714:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7718:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d771c:	d1d6      	bne.n	d76cc <__cmpdf2+0x1c>
   d771e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7722:	d0d3      	beq.n	d76cc <__cmpdf2+0x1c>
   d7724:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7728:	4770      	bx	lr
   d772a:	bf00      	nop

000d772c <__aeabi_cdrcmple>:
   d772c:	4684      	mov	ip, r0
   d772e:	4610      	mov	r0, r2
   d7730:	4662      	mov	r2, ip
   d7732:	468c      	mov	ip, r1
   d7734:	4619      	mov	r1, r3
   d7736:	4663      	mov	r3, ip
   d7738:	e000      	b.n	d773c <__aeabi_cdcmpeq>
   d773a:	bf00      	nop

000d773c <__aeabi_cdcmpeq>:
   d773c:	b501      	push	{r0, lr}
   d773e:	f7ff ffb7 	bl	d76b0 <__cmpdf2>
   d7742:	2800      	cmp	r0, #0
   d7744:	bf48      	it	mi
   d7746:	f110 0f00 	cmnmi.w	r0, #0
   d774a:	bd01      	pop	{r0, pc}

000d774c <__aeabi_dcmpeq>:
   d774c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7750:	f7ff fff4 	bl	d773c <__aeabi_cdcmpeq>
   d7754:	bf0c      	ite	eq
   d7756:	2001      	moveq	r0, #1
   d7758:	2000      	movne	r0, #0
   d775a:	f85d fb08 	ldr.w	pc, [sp], #8
   d775e:	bf00      	nop

000d7760 <__aeabi_dcmplt>:
   d7760:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7764:	f7ff ffea 	bl	d773c <__aeabi_cdcmpeq>
   d7768:	bf34      	ite	cc
   d776a:	2001      	movcc	r0, #1
   d776c:	2000      	movcs	r0, #0
   d776e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7772:	bf00      	nop

000d7774 <__aeabi_dcmple>:
   d7774:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7778:	f7ff ffe0 	bl	d773c <__aeabi_cdcmpeq>
   d777c:	bf94      	ite	ls
   d777e:	2001      	movls	r0, #1
   d7780:	2000      	movhi	r0, #0
   d7782:	f85d fb08 	ldr.w	pc, [sp], #8
   d7786:	bf00      	nop

000d7788 <__aeabi_dcmpge>:
   d7788:	f84d ed08 	str.w	lr, [sp, #-8]!
   d778c:	f7ff ffce 	bl	d772c <__aeabi_cdrcmple>
   d7790:	bf94      	ite	ls
   d7792:	2001      	movls	r0, #1
   d7794:	2000      	movhi	r0, #0
   d7796:	f85d fb08 	ldr.w	pc, [sp], #8
   d779a:	bf00      	nop

000d779c <__aeabi_dcmpgt>:
   d779c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d77a0:	f7ff ffc4 	bl	d772c <__aeabi_cdrcmple>
   d77a4:	bf34      	ite	cc
   d77a6:	2001      	movcc	r0, #1
   d77a8:	2000      	movcs	r0, #0
   d77aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d77ae:	bf00      	nop

000d77b0 <__aeabi_d2uiz>:
   d77b0:	004a      	lsls	r2, r1, #1
   d77b2:	d211      	bcs.n	d77d8 <__aeabi_d2uiz+0x28>
   d77b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d77b8:	d211      	bcs.n	d77de <__aeabi_d2uiz+0x2e>
   d77ba:	d50d      	bpl.n	d77d8 <__aeabi_d2uiz+0x28>
   d77bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d77c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d77c4:	d40e      	bmi.n	d77e4 <__aeabi_d2uiz+0x34>
   d77c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d77ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d77ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d77d2:	fa23 f002 	lsr.w	r0, r3, r2
   d77d6:	4770      	bx	lr
   d77d8:	f04f 0000 	mov.w	r0, #0
   d77dc:	4770      	bx	lr
   d77de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d77e2:	d102      	bne.n	d77ea <__aeabi_d2uiz+0x3a>
   d77e4:	f04f 30ff 	mov.w	r0, #4294967295
   d77e8:	4770      	bx	lr
   d77ea:	f04f 0000 	mov.w	r0, #0
   d77ee:	4770      	bx	lr

000d77f0 <__aeabi_uldivmod>:
   d77f0:	b953      	cbnz	r3, d7808 <__aeabi_uldivmod+0x18>
   d77f2:	b94a      	cbnz	r2, d7808 <__aeabi_uldivmod+0x18>
   d77f4:	2900      	cmp	r1, #0
   d77f6:	bf08      	it	eq
   d77f8:	2800      	cmpeq	r0, #0
   d77fa:	bf1c      	itt	ne
   d77fc:	f04f 31ff 	movne.w	r1, #4294967295
   d7800:	f04f 30ff 	movne.w	r0, #4294967295
   d7804:	f000 b98c 	b.w	d7b20 <__aeabi_idiv0>
   d7808:	f1ad 0c08 	sub.w	ip, sp, #8
   d780c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7810:	f000 f824 	bl	d785c <__udivmoddi4>
   d7814:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d781c:	b004      	add	sp, #16
   d781e:	4770      	bx	lr

000d7820 <__aeabi_d2ulz>:
   d7820:	b5d0      	push	{r4, r6, r7, lr}
   d7822:	4b0c      	ldr	r3, [pc, #48]	; (d7854 <__aeabi_d2ulz+0x34>)
   d7824:	2200      	movs	r2, #0
   d7826:	4606      	mov	r6, r0
   d7828:	460f      	mov	r7, r1
   d782a:	f7ff fd27 	bl	d727c <__aeabi_dmul>
   d782e:	f7ff ffbf 	bl	d77b0 <__aeabi_d2uiz>
   d7832:	4604      	mov	r4, r0
   d7834:	f7ff fca8 	bl	d7188 <__aeabi_ui2d>
   d7838:	4b07      	ldr	r3, [pc, #28]	; (d7858 <__aeabi_d2ulz+0x38>)
   d783a:	2200      	movs	r2, #0
   d783c:	f7ff fd1e 	bl	d727c <__aeabi_dmul>
   d7840:	4602      	mov	r2, r0
   d7842:	460b      	mov	r3, r1
   d7844:	4630      	mov	r0, r6
   d7846:	4639      	mov	r1, r7
   d7848:	f7ff fb60 	bl	d6f0c <__aeabi_dsub>
   d784c:	f7ff ffb0 	bl	d77b0 <__aeabi_d2uiz>
   d7850:	4621      	mov	r1, r4
   d7852:	bdd0      	pop	{r4, r6, r7, pc}
   d7854:	3df00000 	.word	0x3df00000
   d7858:	41f00000 	.word	0x41f00000

000d785c <__udivmoddi4>:
   d785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7860:	9d08      	ldr	r5, [sp, #32]
   d7862:	4604      	mov	r4, r0
   d7864:	468c      	mov	ip, r1
   d7866:	2b00      	cmp	r3, #0
   d7868:	f040 8083 	bne.w	d7972 <__udivmoddi4+0x116>
   d786c:	428a      	cmp	r2, r1
   d786e:	4617      	mov	r7, r2
   d7870:	d947      	bls.n	d7902 <__udivmoddi4+0xa6>
   d7872:	fab2 f282 	clz	r2, r2
   d7876:	b142      	cbz	r2, d788a <__udivmoddi4+0x2e>
   d7878:	f1c2 0020 	rsb	r0, r2, #32
   d787c:	fa24 f000 	lsr.w	r0, r4, r0
   d7880:	4091      	lsls	r1, r2
   d7882:	4097      	lsls	r7, r2
   d7884:	ea40 0c01 	orr.w	ip, r0, r1
   d7888:	4094      	lsls	r4, r2
   d788a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d788e:	0c23      	lsrs	r3, r4, #16
   d7890:	fbbc f6f8 	udiv	r6, ip, r8
   d7894:	fa1f fe87 	uxth.w	lr, r7
   d7898:	fb08 c116 	mls	r1, r8, r6, ip
   d789c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d78a0:	fb06 f10e 	mul.w	r1, r6, lr
   d78a4:	4299      	cmp	r1, r3
   d78a6:	d909      	bls.n	d78bc <__udivmoddi4+0x60>
   d78a8:	18fb      	adds	r3, r7, r3
   d78aa:	f106 30ff 	add.w	r0, r6, #4294967295
   d78ae:	f080 8119 	bcs.w	d7ae4 <__udivmoddi4+0x288>
   d78b2:	4299      	cmp	r1, r3
   d78b4:	f240 8116 	bls.w	d7ae4 <__udivmoddi4+0x288>
   d78b8:	3e02      	subs	r6, #2
   d78ba:	443b      	add	r3, r7
   d78bc:	1a5b      	subs	r3, r3, r1
   d78be:	b2a4      	uxth	r4, r4
   d78c0:	fbb3 f0f8 	udiv	r0, r3, r8
   d78c4:	fb08 3310 	mls	r3, r8, r0, r3
   d78c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d78cc:	fb00 fe0e 	mul.w	lr, r0, lr
   d78d0:	45a6      	cmp	lr, r4
   d78d2:	d909      	bls.n	d78e8 <__udivmoddi4+0x8c>
   d78d4:	193c      	adds	r4, r7, r4
   d78d6:	f100 33ff 	add.w	r3, r0, #4294967295
   d78da:	f080 8105 	bcs.w	d7ae8 <__udivmoddi4+0x28c>
   d78de:	45a6      	cmp	lr, r4
   d78e0:	f240 8102 	bls.w	d7ae8 <__udivmoddi4+0x28c>
   d78e4:	3802      	subs	r0, #2
   d78e6:	443c      	add	r4, r7
   d78e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d78ec:	eba4 040e 	sub.w	r4, r4, lr
   d78f0:	2600      	movs	r6, #0
   d78f2:	b11d      	cbz	r5, d78fc <__udivmoddi4+0xa0>
   d78f4:	40d4      	lsrs	r4, r2
   d78f6:	2300      	movs	r3, #0
   d78f8:	e9c5 4300 	strd	r4, r3, [r5]
   d78fc:	4631      	mov	r1, r6
   d78fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7902:	b902      	cbnz	r2, d7906 <__udivmoddi4+0xaa>
   d7904:	deff      	udf	#255	; 0xff
   d7906:	fab2 f282 	clz	r2, r2
   d790a:	2a00      	cmp	r2, #0
   d790c:	d150      	bne.n	d79b0 <__udivmoddi4+0x154>
   d790e:	1bcb      	subs	r3, r1, r7
   d7910:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7914:	fa1f f887 	uxth.w	r8, r7
   d7918:	2601      	movs	r6, #1
   d791a:	fbb3 fcfe 	udiv	ip, r3, lr
   d791e:	0c21      	lsrs	r1, r4, #16
   d7920:	fb0e 331c 	mls	r3, lr, ip, r3
   d7924:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7928:	fb08 f30c 	mul.w	r3, r8, ip
   d792c:	428b      	cmp	r3, r1
   d792e:	d907      	bls.n	d7940 <__udivmoddi4+0xe4>
   d7930:	1879      	adds	r1, r7, r1
   d7932:	f10c 30ff 	add.w	r0, ip, #4294967295
   d7936:	d202      	bcs.n	d793e <__udivmoddi4+0xe2>
   d7938:	428b      	cmp	r3, r1
   d793a:	f200 80e9 	bhi.w	d7b10 <__udivmoddi4+0x2b4>
   d793e:	4684      	mov	ip, r0
   d7940:	1ac9      	subs	r1, r1, r3
   d7942:	b2a3      	uxth	r3, r4
   d7944:	fbb1 f0fe 	udiv	r0, r1, lr
   d7948:	fb0e 1110 	mls	r1, lr, r0, r1
   d794c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7950:	fb08 f800 	mul.w	r8, r8, r0
   d7954:	45a0      	cmp	r8, r4
   d7956:	d907      	bls.n	d7968 <__udivmoddi4+0x10c>
   d7958:	193c      	adds	r4, r7, r4
   d795a:	f100 33ff 	add.w	r3, r0, #4294967295
   d795e:	d202      	bcs.n	d7966 <__udivmoddi4+0x10a>
   d7960:	45a0      	cmp	r8, r4
   d7962:	f200 80d9 	bhi.w	d7b18 <__udivmoddi4+0x2bc>
   d7966:	4618      	mov	r0, r3
   d7968:	eba4 0408 	sub.w	r4, r4, r8
   d796c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7970:	e7bf      	b.n	d78f2 <__udivmoddi4+0x96>
   d7972:	428b      	cmp	r3, r1
   d7974:	d909      	bls.n	d798a <__udivmoddi4+0x12e>
   d7976:	2d00      	cmp	r5, #0
   d7978:	f000 80b1 	beq.w	d7ade <__udivmoddi4+0x282>
   d797c:	2600      	movs	r6, #0
   d797e:	e9c5 0100 	strd	r0, r1, [r5]
   d7982:	4630      	mov	r0, r6
   d7984:	4631      	mov	r1, r6
   d7986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d798a:	fab3 f683 	clz	r6, r3
   d798e:	2e00      	cmp	r6, #0
   d7990:	d14a      	bne.n	d7a28 <__udivmoddi4+0x1cc>
   d7992:	428b      	cmp	r3, r1
   d7994:	d302      	bcc.n	d799c <__udivmoddi4+0x140>
   d7996:	4282      	cmp	r2, r0
   d7998:	f200 80b8 	bhi.w	d7b0c <__udivmoddi4+0x2b0>
   d799c:	1a84      	subs	r4, r0, r2
   d799e:	eb61 0103 	sbc.w	r1, r1, r3
   d79a2:	2001      	movs	r0, #1
   d79a4:	468c      	mov	ip, r1
   d79a6:	2d00      	cmp	r5, #0
   d79a8:	d0a8      	beq.n	d78fc <__udivmoddi4+0xa0>
   d79aa:	e9c5 4c00 	strd	r4, ip, [r5]
   d79ae:	e7a5      	b.n	d78fc <__udivmoddi4+0xa0>
   d79b0:	f1c2 0320 	rsb	r3, r2, #32
   d79b4:	fa20 f603 	lsr.w	r6, r0, r3
   d79b8:	4097      	lsls	r7, r2
   d79ba:	fa01 f002 	lsl.w	r0, r1, r2
   d79be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d79c2:	40d9      	lsrs	r1, r3
   d79c4:	4330      	orrs	r0, r6
   d79c6:	0c03      	lsrs	r3, r0, #16
   d79c8:	fbb1 f6fe 	udiv	r6, r1, lr
   d79cc:	fa1f f887 	uxth.w	r8, r7
   d79d0:	fb0e 1116 	mls	r1, lr, r6, r1
   d79d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d79d8:	fb06 f108 	mul.w	r1, r6, r8
   d79dc:	4299      	cmp	r1, r3
   d79de:	fa04 f402 	lsl.w	r4, r4, r2
   d79e2:	d909      	bls.n	d79f8 <__udivmoddi4+0x19c>
   d79e4:	18fb      	adds	r3, r7, r3
   d79e6:	f106 3cff 	add.w	ip, r6, #4294967295
   d79ea:	f080 808d 	bcs.w	d7b08 <__udivmoddi4+0x2ac>
   d79ee:	4299      	cmp	r1, r3
   d79f0:	f240 808a 	bls.w	d7b08 <__udivmoddi4+0x2ac>
   d79f4:	3e02      	subs	r6, #2
   d79f6:	443b      	add	r3, r7
   d79f8:	1a5b      	subs	r3, r3, r1
   d79fa:	b281      	uxth	r1, r0
   d79fc:	fbb3 f0fe 	udiv	r0, r3, lr
   d7a00:	fb0e 3310 	mls	r3, lr, r0, r3
   d7a04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7a08:	fb00 f308 	mul.w	r3, r0, r8
   d7a0c:	428b      	cmp	r3, r1
   d7a0e:	d907      	bls.n	d7a20 <__udivmoddi4+0x1c4>
   d7a10:	1879      	adds	r1, r7, r1
   d7a12:	f100 3cff 	add.w	ip, r0, #4294967295
   d7a16:	d273      	bcs.n	d7b00 <__udivmoddi4+0x2a4>
   d7a18:	428b      	cmp	r3, r1
   d7a1a:	d971      	bls.n	d7b00 <__udivmoddi4+0x2a4>
   d7a1c:	3802      	subs	r0, #2
   d7a1e:	4439      	add	r1, r7
   d7a20:	1acb      	subs	r3, r1, r3
   d7a22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d7a26:	e778      	b.n	d791a <__udivmoddi4+0xbe>
   d7a28:	f1c6 0c20 	rsb	ip, r6, #32
   d7a2c:	fa03 f406 	lsl.w	r4, r3, r6
   d7a30:	fa22 f30c 	lsr.w	r3, r2, ip
   d7a34:	431c      	orrs	r4, r3
   d7a36:	fa20 f70c 	lsr.w	r7, r0, ip
   d7a3a:	fa01 f306 	lsl.w	r3, r1, r6
   d7a3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d7a42:	fa21 f10c 	lsr.w	r1, r1, ip
   d7a46:	431f      	orrs	r7, r3
   d7a48:	0c3b      	lsrs	r3, r7, #16
   d7a4a:	fbb1 f9fe 	udiv	r9, r1, lr
   d7a4e:	fa1f f884 	uxth.w	r8, r4
   d7a52:	fb0e 1119 	mls	r1, lr, r9, r1
   d7a56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7a5a:	fb09 fa08 	mul.w	sl, r9, r8
   d7a5e:	458a      	cmp	sl, r1
   d7a60:	fa02 f206 	lsl.w	r2, r2, r6
   d7a64:	fa00 f306 	lsl.w	r3, r0, r6
   d7a68:	d908      	bls.n	d7a7c <__udivmoddi4+0x220>
   d7a6a:	1861      	adds	r1, r4, r1
   d7a6c:	f109 30ff 	add.w	r0, r9, #4294967295
   d7a70:	d248      	bcs.n	d7b04 <__udivmoddi4+0x2a8>
   d7a72:	458a      	cmp	sl, r1
   d7a74:	d946      	bls.n	d7b04 <__udivmoddi4+0x2a8>
   d7a76:	f1a9 0902 	sub.w	r9, r9, #2
   d7a7a:	4421      	add	r1, r4
   d7a7c:	eba1 010a 	sub.w	r1, r1, sl
   d7a80:	b2bf      	uxth	r7, r7
   d7a82:	fbb1 f0fe 	udiv	r0, r1, lr
   d7a86:	fb0e 1110 	mls	r1, lr, r0, r1
   d7a8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d7a8e:	fb00 f808 	mul.w	r8, r0, r8
   d7a92:	45b8      	cmp	r8, r7
   d7a94:	d907      	bls.n	d7aa6 <__udivmoddi4+0x24a>
   d7a96:	19e7      	adds	r7, r4, r7
   d7a98:	f100 31ff 	add.w	r1, r0, #4294967295
   d7a9c:	d22e      	bcs.n	d7afc <__udivmoddi4+0x2a0>
   d7a9e:	45b8      	cmp	r8, r7
   d7aa0:	d92c      	bls.n	d7afc <__udivmoddi4+0x2a0>
   d7aa2:	3802      	subs	r0, #2
   d7aa4:	4427      	add	r7, r4
   d7aa6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7aaa:	eba7 0708 	sub.w	r7, r7, r8
   d7aae:	fba0 8902 	umull	r8, r9, r0, r2
   d7ab2:	454f      	cmp	r7, r9
   d7ab4:	46c6      	mov	lr, r8
   d7ab6:	4649      	mov	r1, r9
   d7ab8:	d31a      	bcc.n	d7af0 <__udivmoddi4+0x294>
   d7aba:	d017      	beq.n	d7aec <__udivmoddi4+0x290>
   d7abc:	b15d      	cbz	r5, d7ad6 <__udivmoddi4+0x27a>
   d7abe:	ebb3 020e 	subs.w	r2, r3, lr
   d7ac2:	eb67 0701 	sbc.w	r7, r7, r1
   d7ac6:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7aca:	40f2      	lsrs	r2, r6
   d7acc:	ea4c 0202 	orr.w	r2, ip, r2
   d7ad0:	40f7      	lsrs	r7, r6
   d7ad2:	e9c5 2700 	strd	r2, r7, [r5]
   d7ad6:	2600      	movs	r6, #0
   d7ad8:	4631      	mov	r1, r6
   d7ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ade:	462e      	mov	r6, r5
   d7ae0:	4628      	mov	r0, r5
   d7ae2:	e70b      	b.n	d78fc <__udivmoddi4+0xa0>
   d7ae4:	4606      	mov	r6, r0
   d7ae6:	e6e9      	b.n	d78bc <__udivmoddi4+0x60>
   d7ae8:	4618      	mov	r0, r3
   d7aea:	e6fd      	b.n	d78e8 <__udivmoddi4+0x8c>
   d7aec:	4543      	cmp	r3, r8
   d7aee:	d2e5      	bcs.n	d7abc <__udivmoddi4+0x260>
   d7af0:	ebb8 0e02 	subs.w	lr, r8, r2
   d7af4:	eb69 0104 	sbc.w	r1, r9, r4
   d7af8:	3801      	subs	r0, #1
   d7afa:	e7df      	b.n	d7abc <__udivmoddi4+0x260>
   d7afc:	4608      	mov	r0, r1
   d7afe:	e7d2      	b.n	d7aa6 <__udivmoddi4+0x24a>
   d7b00:	4660      	mov	r0, ip
   d7b02:	e78d      	b.n	d7a20 <__udivmoddi4+0x1c4>
   d7b04:	4681      	mov	r9, r0
   d7b06:	e7b9      	b.n	d7a7c <__udivmoddi4+0x220>
   d7b08:	4666      	mov	r6, ip
   d7b0a:	e775      	b.n	d79f8 <__udivmoddi4+0x19c>
   d7b0c:	4630      	mov	r0, r6
   d7b0e:	e74a      	b.n	d79a6 <__udivmoddi4+0x14a>
   d7b10:	f1ac 0c02 	sub.w	ip, ip, #2
   d7b14:	4439      	add	r1, r7
   d7b16:	e713      	b.n	d7940 <__udivmoddi4+0xe4>
   d7b18:	3802      	subs	r0, #2
   d7b1a:	443c      	add	r4, r7
   d7b1c:	e724      	b.n	d7968 <__udivmoddi4+0x10c>
   d7b1e:	bf00      	nop

000d7b20 <__aeabi_idiv0>:
   d7b20:	4770      	bx	lr
   d7b22:	bf00      	nop

000d7b24 <atoi>:
   d7b24:	220a      	movs	r2, #10
   d7b26:	2100      	movs	r1, #0
   d7b28:	f000 b8f4 	b.w	d7d14 <strtol>

000d7b2c <atol>:
   d7b2c:	220a      	movs	r2, #10
   d7b2e:	2100      	movs	r1, #0
   d7b30:	f000 b8f0 	b.w	d7d14 <strtol>

000d7b34 <__cxa_atexit>:
   d7b34:	b510      	push	{r4, lr}
   d7b36:	4c05      	ldr	r4, [pc, #20]	; (d7b4c <__cxa_atexit+0x18>)
   d7b38:	4613      	mov	r3, r2
   d7b3a:	b12c      	cbz	r4, d7b48 <__cxa_atexit+0x14>
   d7b3c:	460a      	mov	r2, r1
   d7b3e:	4601      	mov	r1, r0
   d7b40:	2002      	movs	r0, #2
   d7b42:	f3af 8000 	nop.w
   d7b46:	bd10      	pop	{r4, pc}
   d7b48:	4620      	mov	r0, r4
   d7b4a:	e7fc      	b.n	d7b46 <__cxa_atexit+0x12>
   d7b4c:	00000000 	.word	0x00000000

000d7b50 <memcpy>:
   d7b50:	440a      	add	r2, r1
   d7b52:	4291      	cmp	r1, r2
   d7b54:	f100 33ff 	add.w	r3, r0, #4294967295
   d7b58:	d100      	bne.n	d7b5c <memcpy+0xc>
   d7b5a:	4770      	bx	lr
   d7b5c:	b510      	push	{r4, lr}
   d7b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b62:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b66:	4291      	cmp	r1, r2
   d7b68:	d1f9      	bne.n	d7b5e <memcpy+0xe>
   d7b6a:	bd10      	pop	{r4, pc}

000d7b6c <memset>:
   d7b6c:	4402      	add	r2, r0
   d7b6e:	4603      	mov	r3, r0
   d7b70:	4293      	cmp	r3, r2
   d7b72:	d100      	bne.n	d7b76 <memset+0xa>
   d7b74:	4770      	bx	lr
   d7b76:	f803 1b01 	strb.w	r1, [r3], #1
   d7b7a:	e7f9      	b.n	d7b70 <memset+0x4>

000d7b7c <srand>:
   d7b7c:	b538      	push	{r3, r4, r5, lr}
   d7b7e:	4b0d      	ldr	r3, [pc, #52]	; (d7bb4 <srand+0x38>)
   d7b80:	681d      	ldr	r5, [r3, #0]
   d7b82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7b84:	4604      	mov	r4, r0
   d7b86:	b97b      	cbnz	r3, d7ba8 <srand+0x2c>
   d7b88:	2018      	movs	r0, #24
   d7b8a:	f7fd fdad 	bl	d56e8 <malloc>
   d7b8e:	4a0a      	ldr	r2, [pc, #40]	; (d7bb8 <srand+0x3c>)
   d7b90:	4b0a      	ldr	r3, [pc, #40]	; (d7bbc <srand+0x40>)
   d7b92:	63a8      	str	r0, [r5, #56]	; 0x38
   d7b94:	e9c0 2300 	strd	r2, r3, [r0]
   d7b98:	4b09      	ldr	r3, [pc, #36]	; (d7bc0 <srand+0x44>)
   d7b9a:	6083      	str	r3, [r0, #8]
   d7b9c:	230b      	movs	r3, #11
   d7b9e:	8183      	strh	r3, [r0, #12]
   d7ba0:	2201      	movs	r2, #1
   d7ba2:	2300      	movs	r3, #0
   d7ba4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ba8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7baa:	2200      	movs	r2, #0
   d7bac:	611c      	str	r4, [r3, #16]
   d7bae:	615a      	str	r2, [r3, #20]
   d7bb0:	bd38      	pop	{r3, r4, r5, pc}
   d7bb2:	bf00      	nop
   d7bb4:	2003e52c 	.word	0x2003e52c
   d7bb8:	abcd330e 	.word	0xabcd330e
   d7bbc:	e66d1234 	.word	0xe66d1234
   d7bc0:	0005deec 	.word	0x0005deec

000d7bc4 <strcmp>:
   d7bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7bcc:	2a01      	cmp	r2, #1
   d7bce:	bf28      	it	cs
   d7bd0:	429a      	cmpcs	r2, r3
   d7bd2:	d0f7      	beq.n	d7bc4 <strcmp>
   d7bd4:	1ad0      	subs	r0, r2, r3
   d7bd6:	4770      	bx	lr

000d7bd8 <strcpy>:
   d7bd8:	4603      	mov	r3, r0
   d7bda:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7bde:	f803 2b01 	strb.w	r2, [r3], #1
   d7be2:	2a00      	cmp	r2, #0
   d7be4:	d1f9      	bne.n	d7bda <strcpy+0x2>
   d7be6:	4770      	bx	lr

000d7be8 <strlen>:
   d7be8:	4603      	mov	r3, r0
   d7bea:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7bee:	2a00      	cmp	r2, #0
   d7bf0:	d1fb      	bne.n	d7bea <strlen+0x2>
   d7bf2:	1a18      	subs	r0, r3, r0
   d7bf4:	3801      	subs	r0, #1
   d7bf6:	4770      	bx	lr

000d7bf8 <strncpy>:
   d7bf8:	b510      	push	{r4, lr}
   d7bfa:	3901      	subs	r1, #1
   d7bfc:	4603      	mov	r3, r0
   d7bfe:	b132      	cbz	r2, d7c0e <strncpy+0x16>
   d7c00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7c04:	f803 4b01 	strb.w	r4, [r3], #1
   d7c08:	3a01      	subs	r2, #1
   d7c0a:	2c00      	cmp	r4, #0
   d7c0c:	d1f7      	bne.n	d7bfe <strncpy+0x6>
   d7c0e:	441a      	add	r2, r3
   d7c10:	2100      	movs	r1, #0
   d7c12:	4293      	cmp	r3, r2
   d7c14:	d100      	bne.n	d7c18 <strncpy+0x20>
   d7c16:	bd10      	pop	{r4, pc}
   d7c18:	f803 1b01 	strb.w	r1, [r3], #1
   d7c1c:	e7f9      	b.n	d7c12 <strncpy+0x1a>
	...

000d7c20 <_strtol_l.isra.0>:
   d7c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c24:	4e3a      	ldr	r6, [pc, #232]	; (d7d10 <_strtol_l.isra.0+0xf0>)
   d7c26:	4686      	mov	lr, r0
   d7c28:	468c      	mov	ip, r1
   d7c2a:	4660      	mov	r0, ip
   d7c2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7c30:	5da5      	ldrb	r5, [r4, r6]
   d7c32:	f015 0508 	ands.w	r5, r5, #8
   d7c36:	d1f8      	bne.n	d7c2a <_strtol_l.isra.0+0xa>
   d7c38:	2c2d      	cmp	r4, #45	; 0x2d
   d7c3a:	d133      	bne.n	d7ca4 <_strtol_l.isra.0+0x84>
   d7c3c:	f89c 4000 	ldrb.w	r4, [ip]
   d7c40:	f04f 0801 	mov.w	r8, #1
   d7c44:	f100 0c02 	add.w	ip, r0, #2
   d7c48:	2b00      	cmp	r3, #0
   d7c4a:	d05c      	beq.n	d7d06 <_strtol_l.isra.0+0xe6>
   d7c4c:	2b10      	cmp	r3, #16
   d7c4e:	d10c      	bne.n	d7c6a <_strtol_l.isra.0+0x4a>
   d7c50:	2c30      	cmp	r4, #48	; 0x30
   d7c52:	d10a      	bne.n	d7c6a <_strtol_l.isra.0+0x4a>
   d7c54:	f89c 0000 	ldrb.w	r0, [ip]
   d7c58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c5c:	2858      	cmp	r0, #88	; 0x58
   d7c5e:	d14d      	bne.n	d7cfc <_strtol_l.isra.0+0xdc>
   d7c60:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7c64:	2310      	movs	r3, #16
   d7c66:	f10c 0c02 	add.w	ip, ip, #2
   d7c6a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7c6e:	3f01      	subs	r7, #1
   d7c70:	2600      	movs	r6, #0
   d7c72:	fbb7 f9f3 	udiv	r9, r7, r3
   d7c76:	4630      	mov	r0, r6
   d7c78:	fb03 7a19 	mls	sl, r3, r9, r7
   d7c7c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7c80:	2d09      	cmp	r5, #9
   d7c82:	d818      	bhi.n	d7cb6 <_strtol_l.isra.0+0x96>
   d7c84:	462c      	mov	r4, r5
   d7c86:	42a3      	cmp	r3, r4
   d7c88:	dd24      	ble.n	d7cd4 <_strtol_l.isra.0+0xb4>
   d7c8a:	1c75      	adds	r5, r6, #1
   d7c8c:	d007      	beq.n	d7c9e <_strtol_l.isra.0+0x7e>
   d7c8e:	4581      	cmp	r9, r0
   d7c90:	d31d      	bcc.n	d7cce <_strtol_l.isra.0+0xae>
   d7c92:	d101      	bne.n	d7c98 <_strtol_l.isra.0+0x78>
   d7c94:	45a2      	cmp	sl, r4
   d7c96:	db1a      	blt.n	d7cce <_strtol_l.isra.0+0xae>
   d7c98:	fb00 4003 	mla	r0, r0, r3, r4
   d7c9c:	2601      	movs	r6, #1
   d7c9e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7ca2:	e7eb      	b.n	d7c7c <_strtol_l.isra.0+0x5c>
   d7ca4:	2c2b      	cmp	r4, #43	; 0x2b
   d7ca6:	bf08      	it	eq
   d7ca8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7cac:	46a8      	mov	r8, r5
   d7cae:	bf08      	it	eq
   d7cb0:	f100 0c02 	addeq.w	ip, r0, #2
   d7cb4:	e7c8      	b.n	d7c48 <_strtol_l.isra.0+0x28>
   d7cb6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7cba:	2d19      	cmp	r5, #25
   d7cbc:	d801      	bhi.n	d7cc2 <_strtol_l.isra.0+0xa2>
   d7cbe:	3c37      	subs	r4, #55	; 0x37
   d7cc0:	e7e1      	b.n	d7c86 <_strtol_l.isra.0+0x66>
   d7cc2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7cc6:	2d19      	cmp	r5, #25
   d7cc8:	d804      	bhi.n	d7cd4 <_strtol_l.isra.0+0xb4>
   d7cca:	3c57      	subs	r4, #87	; 0x57
   d7ccc:	e7db      	b.n	d7c86 <_strtol_l.isra.0+0x66>
   d7cce:	f04f 36ff 	mov.w	r6, #4294967295
   d7cd2:	e7e4      	b.n	d7c9e <_strtol_l.isra.0+0x7e>
   d7cd4:	1c73      	adds	r3, r6, #1
   d7cd6:	d106      	bne.n	d7ce6 <_strtol_l.isra.0+0xc6>
   d7cd8:	2322      	movs	r3, #34	; 0x22
   d7cda:	f8ce 3000 	str.w	r3, [lr]
   d7cde:	4638      	mov	r0, r7
   d7ce0:	b942      	cbnz	r2, d7cf4 <_strtol_l.isra.0+0xd4>
   d7ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ce6:	f1b8 0f00 	cmp.w	r8, #0
   d7cea:	d000      	beq.n	d7cee <_strtol_l.isra.0+0xce>
   d7cec:	4240      	negs	r0, r0
   d7cee:	2a00      	cmp	r2, #0
   d7cf0:	d0f7      	beq.n	d7ce2 <_strtol_l.isra.0+0xc2>
   d7cf2:	b10e      	cbz	r6, d7cf8 <_strtol_l.isra.0+0xd8>
   d7cf4:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7cf8:	6011      	str	r1, [r2, #0]
   d7cfa:	e7f2      	b.n	d7ce2 <_strtol_l.isra.0+0xc2>
   d7cfc:	2430      	movs	r4, #48	; 0x30
   d7cfe:	2b00      	cmp	r3, #0
   d7d00:	d1b3      	bne.n	d7c6a <_strtol_l.isra.0+0x4a>
   d7d02:	2308      	movs	r3, #8
   d7d04:	e7b1      	b.n	d7c6a <_strtol_l.isra.0+0x4a>
   d7d06:	2c30      	cmp	r4, #48	; 0x30
   d7d08:	d0a4      	beq.n	d7c54 <_strtol_l.isra.0+0x34>
   d7d0a:	230a      	movs	r3, #10
   d7d0c:	e7ad      	b.n	d7c6a <_strtol_l.isra.0+0x4a>
   d7d0e:	bf00      	nop
   d7d10:	000d858e 	.word	0x000d858e

000d7d14 <strtol>:
   d7d14:	4613      	mov	r3, r2
   d7d16:	460a      	mov	r2, r1
   d7d18:	4601      	mov	r1, r0
   d7d1a:	4802      	ldr	r0, [pc, #8]	; (d7d24 <strtol+0x10>)
   d7d1c:	6800      	ldr	r0, [r0, #0]
   d7d1e:	f7ff bf7f 	b.w	d7c20 <_strtol_l.isra.0>
   d7d22:	bf00      	nop
   d7d24:	2003e52c 	.word	0x2003e52c

000d7d28 <dynalib_user>:
   d7d28:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7d38:	00000000 61666564 20746c75 42534d00     ....default .MSB
   d7d48:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d7d58:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d7d68:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   d7d78:	45444f4d 003e7525 25006925 6900696c     MODE%u>.%i.%li.i
   d7d88:	756f006e 77700074 7764006d 00776100     n.out.pwm.dw.aw.
   d7d98:	25007776 66372e32 00202000 73206f6e     vw.%2.7f.  .no s
   d7da8:	6c706d61 67380065 5951506d 356c5459     ample.8gmPQYYTl5
   d7db8:	74754c66 51343979 5733734a 57732d4a     fLuty94QJs3WJ-sW
   d7dc8:	53506475 73007579 70757465 63637553     udPSyu.setupSucc
   d7dd8:	3d737365 00006425                       ess=%d..

000d7de0 <_ZTVN8particle11SPISettingsE>:
	...
   d7de8:	000d4155 000d40c5 000d40c7              UA...@...@..

000d7df4 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d7df4:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d7e04:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d7e14:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d7e24:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d7e34:	32203920 20313230 343a3030 39303a37      9 2021 00:47:09
   d7e44:	64000000 63697665 6f6e2065 6f662074     ...device not fo
   d7e54:	00646e75                                und.

000d7e58 <_ZTV6LIS3DH>:
	...
   d7e68:	000d508d 000d40a1 000d40a1              .P...@...@..

000d7e74 <_ZTV9LIS3DHSPI>:
	...
   d7e7c:	000d4f79 000d4f7b 000d50af 000d4fb9     yO..{O...P...O..
   d7e8c:	000d4ffb 000d4f89 000d4fa3              .O...O...O..

000d7e98 <_ZL22BlynkReadHandlerVector>:
   d7e98:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7ea8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7eb8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7ec8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7ed8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7ee8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7ef8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f08:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f18:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f28:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f38:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f48:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f58:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f68:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f78:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f88:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7f98:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7fa8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7fb8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7fc8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7fd8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7fe8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d7ff8:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8008:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8018:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8028:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8038:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8048:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8058:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8068:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8078:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..
   d8088:	000d51f1 000d51f1 000d51f1 000d51f1     .Q...Q...Q...Q..

000d8098 <_ZL23BlynkWriteHandlerVector>:
   d8098:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d80a8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d80b8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d80c8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d80d8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d80e8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d80f8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8108:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8118:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8128:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8138:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8148:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8158:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8168:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8178:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8188:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8198:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d81a8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d81b8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d81c8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d81d8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d81e8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d81f8:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8208:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8218:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8228:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8238:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8248:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8258:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8268:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8278:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..
   d8288:	000d51f3 000d51f3 000d51f3 000d51f3     .Q...Q...Q...Q..

000d8298 <_ZTVN5spark13EthernetClassE>:
	...
   d82a0:	000d57b7 000d57ad 000d57a3 000d5799     .W...W...W...W..
   d82b0:	000d578d 000d5781 000d69b1 000d69b9     .W...W...i...i..
   d82c0:	000d5775 000d576d 000d5763 000d5759     uW..mW..cW..YW..
   d82d0:	000d69e9                                .i..

000d82d4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d82d4:	18100800 38302820                       .... (08

000d82dc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d82e4:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d82f4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d8304 <_ZTV9IPAddress>:
	...
   d830c:	000d5f99 000d5f89 000d5f8b              ._..._..._..

000d8318 <_ZTV9USBSerial>:
	...
   d8320:	000d60bd 000d6125 000d60fb 000d5c91     .`..%a...`...\..
   d8330:	000d60ed 000d60bf 000d60cf 000d611f     .`...`...`...a..
   d8340:	000d60df 000d60b9                       .`...`..

000d8348 <_ZTV11USARTSerial>:
	...
   d8350:	000d61c9 000d6235 000d620d 000d5c91     .a..5b...b...\..
   d8360:	000d61dd 000d61f9 000d61eb 000d6207     .a...a...a...b..
   d8370:	000d61cb 000d61cf                       .a...a..

000d8378 <_ZTV7TwoWire>:
	...
   d8380:	000d62c5 000d630f 000d62e7 000d62c7     .b...c...b...b..
   d8390:	000d62ef 000d62f7 000d62ff 000d6307     .b...b...b...c..
   d83a0:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d83b0:	203d2072 00006425                       r = %d..

000d83b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d83c0:	000d63c3 000d63e5 000d67ff 000d63f3     .c...c...g...c..
   d83d0:	000d63c5                                .c..

000d83d4 <_ZTV9TCPClient>:
	...
   d83dc:	000d6471 000d64a5 000d6341 000d635b     qd...d..Ac..[c..
   d83ec:	000d6695 000d6507 000d64d9 000d6385     .f...e...d...c..
   d83fc:	000d659f 000d6805 000d653b 000d6749     .e...h..;e..Ig..
   d840c:	000d6387 000d63b9 000d636d 000d63f7     .c...c..mc...c..
   d841c:	000d64b9                                .d..

000d8420 <_ZTVN5spark9WiFiClassE>:
	...
   d8428:	000d6953 000d6949 000d693f 000d6901     Si..Ii..?i...i..
   d8438:	000d5e05 000d6933 000d69b1 000d69b9     .^..3i...i...i..
   d8448:	000d6927 000d691f 000d6915 000d690b     'i...i...i...i..
   d8458:	000d69e9                                .i..

000d845c <_ZTVN5spark12NetworkClassE>:
	...
   d8464:	000d6971 000d697b 000d6985 000d698f     qi..{i...i...i..
   d8474:	000d6999 000d69a5 000d69b1 000d69b9     .i...i...i...i..
   d8484:	000d69c1 000d69cd 000d69d5 000d69df     .i...i...i...i..
   d8494:	000d69e9                                .i..

000d8498 <_ZSt7nothrow>:
	...

000d8499 <_ZTSSt19_Sp_make_shared_tag>:
   d8499:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d84a9:	5f646572 00676174                        red_tag....

000d84b4 <_ZTISt19_Sp_make_shared_tag>:
   d84b4:	000d84f4 000d8499                       ........

000d84bc <_ZTIN10__cxxabiv117__class_type_infoE>:
   d84bc:	000d8554 000d84c8 000d8578              T.......x...

000d84c8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d84c8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d84d8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d84e8:	00000045                                E...

000d84ec <_ZTVN10__cxxabiv117__class_type_infoE>:
   d84ec:	00000000 000d84bc 000d6d2d 000d6d41     ........-m..Am..
   d84fc:	000d6ed5 000d6ed5 000d6dab 000d6ced     .n...n...m...l..
   d850c:	000d6d93 000d6d55 000d6d21              .m..Um..!m..

000d8518 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8518:	000d8554 000d8524 000d84bc              T...$.......

000d8524 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8524:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d8534:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d8544:	456f666e 00000000                       nfoE....

000d854c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d854c:	00000000 000d8518 000d6dd5 000d6de9     .........m...m..
   d855c:	000d6ed5 000d6ed5 000d6dab 000d6ced     .n...n...m...l..
   d856c:	000d6ea9 000d6e35 000d6dfd              .n..5n...m..

000d8578 <_ZTISt9type_info>:
   d8578:	000d84f4 000d8580                       ........

000d8580 <_ZTSSt9type_info>:
   d8580:	74397453 5f657079 6f666e69               St9type_info.

000d858d <_ctype_>:
   d858d:	20202000 20202020 28282020 20282828     .         ((((( 
   d859d:	20202020 20202020 20202020 20202020                     
   d85ad:	10108820 10101010 10101010 10101010      ...............
   d85bd:	04040410 04040404 10040404 10101010     ................
   d85cd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d85dd:	01010101 01010101 01010101 10101010     ................
   d85ed:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d85fd:	02020202 02020202 02020202 10101010     ................
   d860d:	00000020 00000000 00000000 00000000      ...............
	...

000d868e <link_const_variable_data_end>:
	...

000d8690 <link_constructors_location>:
   d8690:	000d4eb1 	.word	0x000d4eb1
   d8694:	000d57c1 	.word	0x000d57c1
   d8698:	000d5955 	.word	0x000d5955
   d869c:	000d5c69 	.word	0x000d5c69
   d86a0:	000d5e11 	.word	0x000d5e11
   d86a4:	000d5e21 	.word	0x000d5e21
   d86a8:	000d5e49 	.word	0x000d5e49
   d86ac:	000d695d 	.word	0x000d695d
   d86b0:	000d6ac9 	.word	0x000d6ac9

000d86b4 <link_constructors_end>:
	...
